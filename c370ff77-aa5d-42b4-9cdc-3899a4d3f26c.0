{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,1,
{"ru","Список торговых точек"}
},0,0,1,1,1,0,1,0,
{5,1d632984-de3c-4b4b-ad9f-d69682a10182,"ОбработкаВыбора",3699f6a3-9a2a-4c82-a775-6ff4824a08ca,"ОбработкаОповещения",3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",52dbb775-1631-4fd5-8c55-1615b5881dac,"ПередЗакрытием",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,1d632984-de3c-4b4b-ad9f-d69682a10182,0,1,3699f6a3-9a2a-4c82-a775-6ff4824a08ca,0,1,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,52dbb775-1631-4fd5-8c55-1615b5881dac,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{8,06ee6a21-061e-47f8-81c5-92ae8b8f3b5d,198ea630-fda2-4cda-8a23-f999f4c67ee6,239f0103-8de9-4fdf-b485-eb5531da7e51,3f01ed62-97f8-465b-b4f7-6517ac2bc994,5174ad3f-0569-42fd-8adf-011d8206db6c,5d41082e-9619-42ec-b96f-98b082b3a2f0,71e0226e-ebb2-4e33-8745-0a94a01bbf15,d7e9e72c-8fa7-430c-a3e9-aeadfd57dfc7},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{35,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаКоманднаяПанель",
{1,1,
{"ru","Командная панель"}
},
{1,1,
{"ru","Группа командная панель"}
},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},9,3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{37,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДекорацияИконка",
{1,1,
{"ru","Декорация иконка"}
},
{1,1,
{"ru","Перейти на главную страницу"}
},1,2,1,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,3,
{0},"",-1,-1,0,
{
{#base64:iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAA
AARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3
YXJlAHBhaW50Lm5ldCA0LjAuMTCtCgrAAAAB1UlEQVQ4T5WTyytEcRTHLfwHbCwl
mjw2CitSlsTfYG8xycICGUIoUUhiShYsMJNHnimTGCbDeC3QmLy5HkVm5PV1zrkP
9zIWfvW59/c7v3O+v3vO+d0YABbiqj02op6YIBTilHARVYTtp79lQQ5lxBMBJqlx
Rd4mIoTdHGMOHtQd42s88J894v3jE6XD+z9FmGki1hCgBZ9sOCQ4lhF5/aAtoG3p
xBxopkIEaMI5y2f3rp7j+C6Cov4ASpzbqJs7RmLDCkYC1zhQnpHXtWEW4HRsLMAF
E+Pr+6ec2r92YTimNK2KjUfzYsiwa1SxAFdbDOXjh5jcv0VOh8/i6JgLwrVzg4zW
NYudcLEAt0oMfd5zhO4jKHYGMLhxKekU9m1hdPsGR7dhFPT4Mb6n4FAJI7dT0jm1
COgpcDA1QMbQ5pU6oTHgu9RmkProAr9SyG73oXLqSE7LbFtH7ayaQnqrF40LIYzR
PLXFyzGSglFEJxXv5OFFOqDb+E5wcPAujPxuv2HXkCJyG7klUbuQHL0Lb4TaRrKz
iJ037O4DuHcVZFEKvNapngnKXUhTP1tHvUj80ET4epodosEn83ue+L7KmkAsUUFI
On/Ae+wjwRYBHdr8x++MmC+4IKQYoZgmOgAAAABJRU5ErkJggg==}
},0,""},1,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{1,9874537f-454c-40ae-83e9-3b9cefbc6d08,"КомандаПоказатьГлавнуюФорму",1,0,9874537f-454c-40ae-83e9-3b9cefbc6d08,0,1}
},1,
{21,
{38,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДекорацияИконкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Декорация иконка"}
},0},0,1,
{10,
{39,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДекорацияИконкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,1},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{40,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},2,"ПоказатьГлавнуюФорму",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{41,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьГлавнуюФормуРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,2,0},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{42,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ДекорацияСмТакже",
{1,1,
{"ru","cм. также:"}
},
{1,1,
{"ru","Смотрите также"}
},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{43,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДекорацияСмТакжеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","cм. также:"}
},0},0,1,
{10,
{44,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДекорацияСмТакжеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{45,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},2,"ПоказатьСпискиТТ",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{46,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьСпискиТТРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,2,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{54,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},2,"ПоказатьПартнеров",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{55,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьПартнеровРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,2,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{76,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},2,"ПоказатьТорговыхАгентов",
{1,0},1,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{77,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказатьТорговыхАгентовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,2,0},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{47,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ДекорацияКоманднаяПанель",
{1,0},
{1,0},0,0,1,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{4,0,
{0},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0}
},1,
{21,
{48,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДекорацияКоманднаяПанельКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,0},0},0,1,
{10,
{49,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДекорацияКоманднаяПанельРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{50,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},2,"Сохранить",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,2,60,
{-31},700,0,0,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{51,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СохранитьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,2,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{52,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"Справка",
{1,1,
{"ru","?"}
},1,
{0,39bb0fe9-771d-4dd5-8a6e-2d16984523af},
{0},1,0,0,0,2,2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{53,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СправкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},1,0,1,
{10,
{36,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКоманднаяПанельРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},3d3cb80c-508b-41fa-8a18-680cdf5f1712,
{10,
{120,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"НадписьГотовностьНастроекОбмена",
{1,1,
{"ru","Статус настроек обмена"}
},
{1,1,
{"ru","Показать настройки обмена"}
},1,0,0,2,2,
{3,3,
{-16}
},
{7,3,0,1,100},
{0,0,0},1,
{5,1,0,3,0,
{1,11707a99-4eb9-4373-bc8c-84891483a034,"НадписьСтатусНажатие",1,0,11707a99-4eb9-4373-bc8c-84891483a034,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},1,
{21,
{121,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"НадписьГотовностьНастроекОбменаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,2,
{1,
{1,1,
{"ru","Статус настроек обмена"}
},0},0,1,
{10,
{122,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НадписьГотовностьНастроекОбменаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,0,0,1,0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{56,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаЗаголовок",
{1,1,
{"ru","Группа заголовок"}
},
{1,1,
{"ru","Группа заголовок"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Наименование",1,0,
{1,0},
{1,1,
{"ru","Наименование списка торговых точек"}
},
{1,
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"НаименованиеПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"НаименованиеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НаименованиеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{58,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Детализация",1,0,
{1,0},
{1,1,
{"ru","Детализация списка торговых точек"}
},
{1,
{8}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,1,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"ДетализацияНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},0,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДетализацияПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{59,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДетализацияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{60,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДетализацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{57,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаЗаголовокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ГруппаСтраницы",
{1,1,
{"ru","Группа страницы"}
},
{1,1,
{"ru","Группа страницы"}
},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1,
{1,526c501f-ed3f-4db4-8731-fd0324707501,"ГруппаСтраницыПриСменеСтраницы",1,0,526c501f-ed3f-4db4-8731-fd0324707501,0,1}
},3,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ГруппаСписок",
{1,1,
{"ru","Список"}
},
{1,1,
{"ru","Группа список"}
},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{1,
{5}
},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{51,
{13,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},"Состав",0,0,1,
{1,0},
{1,0},
{1,
{6}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,2,2,1,1,0,0,0,1,2,0,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,1,1,13,
{"U"},
{6,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,"СоставПриОкончанииРедактирования",1282f000-23b6-4887-87f4-9e8e79db3d32,"СоставВыбор",2391e7b8-7235-45d7-ab7e-6ff3dc086396,"СоставПередНачаломДобавления",60edb81d-887b-478e-94ee-7fef2b13393d,"СоставПриАктивизацииСтроки",de65638d-a806-4a76-bc10-f62bbc86e0e7,"СоставПослеУдаления",fe115cc8-9e33-4684-a166-bd5136fe7a9f,"СоставПриИзменении",1,0,01d80ddd-dce5-4db3-beb5-f63c97cb05b9,0,1,1282f000-23b6-4887-87f4-9e8e79db3d32,0,1,2391e7b8-7235-45d7-ab7e-6ff3dc086396,0,1,60edb81d-887b-478e-94ee-7fef2b13393d,0,1,de65638d-a806-4a76-bc10-f62bbc86e0e7,0,1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},
{1,b41f5bbc-ba5d-4888-8cd1-db246a371418},1,
{21,
{14,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СоставКонтекстноеМенюИзменитьДетализациюСТТ",
{1,0},1,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставКонтекстноеМенюИзменитьДетализациюСТТРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{90,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"СоставКонтекстноеМенюГруппаГрафик",
{1,1,
{"ru","Состав контекстное меню группа график"}
},
{1,1,
{"ru","Состав контекстное меню группа график"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,
{0},2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{111,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СоставКонтекстноеМенюПеренестиГрафикВПланПосещений",
{1,0},1,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{112,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставКонтекстноеМенюПеренестиГрафикВПланПосещенийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{78,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СоставГрафикКонтекстноеМенюКопироватьГрафик",
{1,0},1,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{79,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставГрафикКонтекстноеМенюКопироватьГрафикРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{80,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СоставКонтекстноеМенюПрименитьСкопированныйГрафик",
{1,0},1,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{81,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставКонтекстноеМенюПрименитьСкопированныйГрафикРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{91,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставКонтекстноеМенюГруппаГрафикРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,0,0,3,3},1,
{21,
{15,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"СоставКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{116,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"МенюПодборПартнеров",
{1,1,
{"ru","Подбор"}
},
{1,1,
{"ru","Меню подбор партнеров"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{7,
{4,0,
{0},"",-1,-1,1,0,""},
{0},2,3,0,0,
{3,4,
{0}
},
{3,4,
{0}
}
},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{74,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СоставПодборПартнеров",
{1,0},1,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{75,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставПодборПартнеровРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{118,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"СоставПодборПоОсновномуМенеджеру",
{1,0},1,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{119,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставПодборПоОсновномуМенеджеруРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{117,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"МенюПодборПартнеровРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,0,0,3,3},7,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{126,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставГруппаКолонкаТоргТочка",
{1,1,
{"ru","Состав группа колонка торг точка"}
},
{1,1,
{"ru","Состав группа колонка торг точка"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,1,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},1,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставПартнер",1,0,
{1,0},
{1,0},
{2,
{6},
{1}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},1,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{27,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставПартнерКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставПартнерРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{127,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставГруппаКолонкаТоргТочкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{32,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставАдрес",1,0,
{1,0},
{1,0},
{2,
{6},
{3}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},0,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{33,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставАдресКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{34,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставАдресРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставОрганизация",1,0,
{1,0},
{1,1,
{"ru","Организация, от имени которой оформлять документы при посещении торговой точки"}
},
{2,
{6},
{6}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставОрганизацияКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставОрганизацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{61,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставКонтрагент",1,0,
{1,0},
{1,1,
{"ru","Контрагент торговой точки на которго оформлять документы при посещении торговой точки"}
},
{2,
{6},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,1,"Отбор.Партнер",2,
{13,02023637-7868-4a5f-8576-835a76e0c9ba},
{1},0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{62,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставКонтрагентКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{63,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставКонтрагентРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{64,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставСоглашение",1,0,
{1,0},
{1,1,
{"ru","Соглашение с контрагентом, которое используется при посещении торговой точки"}
},
{2,
{6},
{5}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{1,1960479b-4d89-4eba-8b39-0aa802020558,"СоставСоглашениеНачалоВыбора",1,0,1960479b-4d89-4eba-8b39-0aa802020558,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{65,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставСоглашениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{66,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставСоглашениеРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{29,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставГрафик",1,0,
{1,1,
{"ru","График посещений (желательный)"}
},
{1,1,
{"ru","Желательный график посещения торговой точки"}
},
{2,
{6},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставГрафикКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставГрафикРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{82,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СоставПланПосещений",1,0,
{1,1,
{"ru","План посещений"}
},
{1,1,
{"ru","План посещений торговой точки"}
},
{2,
{6},
{8}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,2,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{83,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставПланПосещенийКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{84,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставПланПосещенийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},2,2,1,0,
{"Pattern"},"","",2,2,0,1,
{10,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,0,0,1,
{4,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{21,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{13,0},0,3,3},1,
{4,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"СоставСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{21,
{21,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{22,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{13,1},0,3,3},1,
{4,
{23,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"СоставУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{21,
{24,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"СоставУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СоставУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{13,2},0,3,3},0,1,0,0,1,0,3,3,0,1,0},1,0,1,
{10,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСписокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{85,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ГруппаПланПосещений",
{1,1,
{"ru","План посещений"}
},
{1,1,
{"ru","Группа план посещений"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},2,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{87,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},6,"ТДПланПосещений",0,0,
{1,0},
{1,0},
{1,
{11}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{12,50,10,1,1,0,0,1,1,0,0,1,0,0,1,
{3,4,
{0}
},1,1,
{1,2988b2a5-c887-4928-94ae-5d0c9c31e999,"ТДППОбработкаРасшифровки",1,0,2988b2a5-c887-4928-94ae-5d0c9c31e999,0,1},0,1,0,0,1,0,0,0,0,1,1,1},
{0,1,0},1,
{21,
{88,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ТДПланПосещенийКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{94,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ТДППКонтекстноеМенюЗаполнитьИзГрафика",
{1,0},1,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{95,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТДППКонтекстноеМенюЗаполнитьИзГрафикаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{107,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ТДППКонтекстноеМенюЗаполнитьВсеИзГрафиков",
{1,0},1,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{108,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТДППКонтекстноеМенюЗаполнитьВсеИзГрафиковРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{109,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"ТДПланПосещенийКонтекстноеМенюКомандаТДППОчиститьОбласть",
{1,0},1,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{110,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТДПланПосещенийКонтекстноеМенюКомандаТДППОчиститьОбластьРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{89,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ТДПланПосещенийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{105,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаКомандыПланаПосещений",
{1,1,
{"ru","Группа команды плана посещений"}
},
{1,1,
{"ru","Группа команды плана посещений"}
},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0}
},0,1,0,1,
{10,
{106,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаКомандыПланаПосещенийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{86,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПланПосещенийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{11,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},4,"ГруппаДополнительно",
{1,1,
{"ru","Дополнительно"}
},
{1,1,
{"ru","Группа дополнительно"}
},0,1,0,0,0,1,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{16,
{4,0,
{0},"",-1,-1,1,0,""},0,0,
{0},
{1,0},1,
{"Pattern"},"",
{3,4,
{0}
},0,0,3,3,0,0,0},5,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{96,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПериодГрафикаПлана",1,0,
{1,0},
{1,1,
{"ru","Период графика или плана посещений"}
},
{1,
{12}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,0,0,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},0,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ПериодГрафикаПланаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{97,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПериодГрафикаПланаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{98,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПериодГрафикаПланаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{99,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ДатаНачала",1,0,
{1,0},
{1,1,
{"ru","Дата начала первой недели графика или плана посещений"}
},
{1,
{13}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,1,2,2,2,2,2,2,0,0,0,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,0,0,
{"Pattern"},1,
{1,b50dc41b-c15a-4ebe-a17f-d01e51c47de6,"ДатаНачалаОчистка",1,0,b50dc41b-c15a-4ebe-a17f-d01e51c47de6,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},0,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ДатаНачалаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{100,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДатаНачалаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{101,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДатаНачалаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{113,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"ПериодВыводаПлана",1,0,
{1,0},
{1,1,
{"ru","Период вывода плана на закладке ""План посещений"""}
},
{1,
{15}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},26,0,2,2,1,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",1,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},0,
{3,0,0},0,
{1,0},2,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ПериодВыводаПланаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{114,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ПериодВыводаПланаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{115,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПериодВыводаПланаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{102,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},3,"ИспользоватьПорядок",1,0,
{1,0},
{1,1,
{"ru","Использовать порядок посещений (нумеровать пункты плана посещения"}
},
{1,
{14}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,0,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ИспользоватьПорядокПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{103,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ИспользоватьПорядокКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{104,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ИспользоватьПорядокРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Комментарий",1,0,
{1,0},
{1,0},
{1,
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,1,2,1,2,1,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ЭлементПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{5,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"КомментарийКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КомментарийРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{12,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаДополнительноРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,0,1,
{10,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаСтраницыРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
#Область ГлобальныеПеременные

&НаКлиенте
Перем МодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида ""%ИмяПараметра"");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, ""%1"", Параметр1);
	Результат = СтрЗаменить(Результат, ""%2"", Параметр2);
	Результат = СтрЗаменить(Результат, ""%3"", Параметр3);
	Результат = СтрЗаменить(Результат, ""%4"", Параметр4);
	Результат = СтрЗаменить(Результат, ""%5"", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     Е если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение """" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста 
Функция СтрСоединить_(Массив, Разделитель = "","", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = """";
	ТекРазделитель = """";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип(""Строка"") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура(""IDNew,ПрежниеЗначенияСтроки,МаксимумНедель,СписокВсеДетализацииСТТ,Пользователь,НастройкиВыгрузкиМаршрутов""); // общие значения модуля формы
	
	СтррКонтекст.Вставить(""СпрТоргТочки""); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	
	ТекОбъект = РеквизитФормыВЗначение(""Объект"");		
	ТекОбъект.ИнициализироватьКонтекстФормы(СтррКонтекст, Параметры);
	
	СтррКонтекст.МаксимумНедель	= 4; // максимально допустимое количество недель в графиках или плане посещений
	СтррКонтекст.СписокВсеДетализацииСТТ = ТекОбъект.ПолучитьСписокДетализацииСписковТорговыхТочек(); // все варианты детализации Списков торговых точек (СТТ)
	
	// признаки для работы с планом посещений:
	СтррКонтекст.Вставить(""ТДПланПосещенийОбновить"", Ложь); // признак необходимости обновления табличного документа ТДПланПосещений
	СтррКонтекст.Вставить(""ТДПланПосещенийИзменен"",  Ложь); // признак изменения табличного документа ТДПланПосещений
	
	СтррКонтекст.НастройкиВыгрузкиМаршрутов = ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища();
	
	СтррКонтекст.ПрежниеЗначенияСтроки = Новый Структура(СтррКонтекст.СпрТоргТочки.тзИмяКолонки + "",ИдентификаторСтроки"");
	
	Если Не Параметры.Свойство(""ID"")  Тогда
		ВызватьИсключение(""Отсутствует свойство """"Параметры.ID"""" для открытия формы списка торговых точек."");
	КонецЕсли;
	
	Если СтррКонтекст.СпрТоргТочки.ВидСправочника = ""алкПунктыРазгрузки"" Тогда 
		ИзменитьЭлементыФормы();
	КонецЕсли;
	
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ЭтоПустойID	= (Строка(Параметры.ID) = ""00000000-0000-0000-0000-000000000000"") Или ТипЗнч(Параметры.ID) <> Тип(""УникальныйИдентификатор"");
	
	Если Параметры.Свойство(""Копирование"") И Параметры.Копирование Тогда // форма открыта для копирования существующего элемента, очищаем его идентификатор
		ID = Новый УникальныйИдентификатор(""00000000-0000-0000-0000-000000000000"");
		ДобавитьВСтрокуНомерКопии(Наименование);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Список = Элементы.ПериодГрафикаПлана.СписокВыбора;
	Для Неделя = 1 По СтррКонтекст.МаксимумНедель Цикл
		ПредставлениеНедели = ЧислоЦифрамиПредметИсчисленияПрописью(Неделя, НСтр(""ru = 'неделя, недели, недель'""));	
		Список.Добавить(Неделя * 7,	ПредставлениеНедели);
	КонецЦикла;
	
	Если ПериодГрафикаПлана = 0 Тогда
		ПериодГрафикаПлана = 7;
	КонецЕсли; 
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	ОбновитьДетализациюСТТ();
	ОбновитьАдресаПартнеров();
	
	СтррКонтекст.IDNew = ЭтаФорма.КлючУникальности; // идентификатор для создания нового элемента (нового списка торговых точек)
	
	ОбновитьЗаголовокФормы();
	
	Если ДатаНачала = '00010101' Тогда
		ДатаНачала = НачалоНедели(ТекущаяДата());
	КонецЕсли; 
	
	СписокПериодовВыводаПланаОбновить();
	
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпискиТТПродложить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуОбработки(""СпискиТорговыхТочек"");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения(""СохранитьПродолжить"", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр(""ru = 'Данные были изменены. Сохранить изменения?'""), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяТипаСправочника = ""СправочникСсылка."" + СтррКонтекст.СпрТоргТочки.ВидСправочника;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип(""Массив"") Тогда
		ВызватьИсключение(""Не предусмотренное значение для подбора в форму: "" + ВыбранноеЗначение);
	КонецЕсли;
	
	ПервыйЭлементВыбора = ВыбранноеЗначение[0];
	
	Если ТипЗнч(ПервыйЭлементВыбора) = Тип(""СправочникСсылка.Пользователи"") Тогда 
		
		СтррКонтекст.Пользователь = ПервыйЭлементВыбора; // запоминаем пользователя - чтобы при повторном подборе он был уже выбран в списке
		мВыбранныеПартнеры = ПолучитьПартнеровПоОсновномуМенеджеру(ВыбранноеЗначение); // получаем массив выбранных партнеров на основе выбранного списка пользователей (по реквизиту ОсновнойМенеджер)
		
	ИначеЕсли ТипЗнч(ПервыйЭлементВыбора) = Тип(ИмяТипаСправочника) Тогда  
		
		мВыбранныеПартнеры = ВыбранноеЗначение;
		
	Иначе
		
		Текст = СтрШаблон_(""Выбрано значение (""""%1"""") для подбора не предусмотренного типа """"%2""""!"", ПервыйЭлементВыбора, ТипЗнч(ПервыйЭлементВыбора));
		ВызватьИсключение(Текст);
	
	КонецЕсли; 
	
	ВсегоВыбрано = мВыбранныеПартнеры.Количество();
	Если ВсегоВыбрано = 0 Тогда
		Текст = СтрШаблон_(НСтр(""ru = 'Не выбрано ни одного элемента из справочника """"%1"""".'""), СтррКонтекст.СпрТоргТочки.Синоним);
		ПоказатьПредупреждение(Неопределено, Текст);
		Возврат;
	КонецЕсли; 
	
 	мНовыеПартнеры = Новый Массив; // массив добавленных партнеров во время подбора
	СтрокаТ = Неопределено;
	НачальнаяСтрока = Состав.Количество();
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	стррПоиск = Новый Структура(ИмяКолонки);
	
	// подбор партнеров
	Для каждого Партнер Из мВыбранныеПартнеры Цикл
		
		стррПоиск[ИмяКолонки] = Партнер;
		мСтроки = Состав.НайтиСтроки(стррПоиск);
		Если мСтроки.Количество() > 0 Тогда // в таблице уже есть такой партнер
			Если ВсегоВыбрано = 1 Тогда
				СтрокаТ = мСтроки[0]; // выделяем найденную строку:
				Текст = СтрШаблон_(НСтр(""ru = 'Данный %1 уже присутствует в таблице.'""), СтррКонтекст.СпрТоргТочки.Представление);
				ПоказатьПредупреждение(, Текст);
				Прервать;
			Иначе
				Текст = СтрШаблон_(НСтр(""ru = 'Пропущен %1 """"%2"""" т.к. он уже присутствует в таблице.'""), СтррКонтекст.СпрТоргТочки.Представление, Партнер);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
		Иначе
			СтрокаТ = Состав.Добавить();
			СтрокаТ[ИмяКолонки] = Партнер;
			мНовыеПартнеры.Добавить(Партнер);
		КонецЕсли;
	
	КонецЦикла;
	
	Если СтрокаТ <> Неопределено Тогда
		Элементы.Состав.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
	КонецЕсли; 
	
	Если мНовыеПартнеры.Количество() <> 0 Тогда
		ОбновитьАдресаПартнеров(мНовыеПартнеры, НачальнаяСтрока);
		
		Если СтррКонтекст.СпрТоргТочки.ВидСправочника = ""алкПунктыРазгрузки"" Тогда 
			ОбновитьКонтрагентов(НачальнаяСтрока);
		КонецЕсли;
		
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = ""АПНастройкиСброшены"" Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();

	ИначеЕсли ИмяСобытия = ""АППроверкаУникальностиЗапускаОбработкиОбмена"" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки спрашивает - уже открыта обработка или нет
			Если ЭтаФорма.Открыта() Тогда
				Оповестить(""АПЗакрытьОбработкуОбменДанными"", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса			
			Иначе
				ЭтотОбъект.Закрыть();
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ""АПНастройкиПараметровОбменаИзмененияЗаписаны"" Тогда
		
		СтррКонтекст.НастройкиВыгрузкиМаршрутов = ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища();
		ОбновитьПредупреждениеОНастройкахОбмена();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	СохранитьОбъектВХранилищеКлиент();
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаИзменитьДетализациюСТТ(Команда)
	ВыбратьПараметрыДетализацииСТТ();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПартнеров(Команда)

	СтррПараметры = Новый Структура;	
	СтррПараметры.Вставить(""ЗакрыватьПриВыборе"", Ложь); 
	СтррПараметры.Вставить(""МножественныйВыбор"", Истина); 
	
	ОткрытьФорму(""Справочник."" + СтррКонтекст.СпрТоргТочки.ВидСправочника + "".ФормаВыбора"", СтррПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПоОсновномуМенеджеру(Команда)
	
	стррПараметры = Новый Структура;
	стррПараметры.Вставить(""РежимВыбора"",      		Истина);
	стррПараметры.Вставить(""МножественныйВыбор"", 	Истина);	
	стррПараметры.Вставить(""ВыборГрупп"", 			Ложь);
	стррПараметры.Вставить(""ЗакрыватьПриВыборе"", 	Истина);
	стррПараметры.Вставить(""ТекущаяСтрока"",    		СтррКонтекст.Пользователь);
	стррПараметры.Вставить(""РежимОткрытияОкна"", 	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Форма = ПолучитьФорму(""Справочник.Пользователи.ФормаВыбора"", стррПараметры, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	Форма.Открыть();

КонецПроцедуры

#Область ОбработчикиКомандФормы_КопированиеГрафика

&НаКлиенте
Процедура КомандаКопироватьГрафик(Команда)
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр(""ru = 'Выберите в таблице нужную строку для копирования графика.'""));
	Иначе
		СтррКопияГрафика = Новый Структура(""ПредставлениеГрафика,График"");
		ЗаполнитьЗначенияСвойств(СтррКопияГрафика, СтрокаТ);
		ОчиститьСообщения();
		Текст = НСтр(""ru = 'Скопрированы настройки в память у партнера """"%1"""". Выберите нужных партнеров и выберите пункт в конекстном меню """"Применить скопированный график"""".'"");
		Текст = СтрШаблон_(Текст, СтрокаТ.Партнер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрименитьСкопированныйГрафик(Команда)

	Если ТипЗнч(СтррКопияГрафика) <> Тип(""Структура"") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр(""ru = 'Сначала скопируйте график в память, выбрав пункт """"Скопировать график"""".'""));
		Возврат;
	КонецЕсли; 
	
	мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.Состав.ВыделенныеСтроки);
	
	Для Каждого ИдСтроки Из мСтроки Цикл
		СтрокаТ = Состав.НайтиПоИдентификатору(ИдСтроки);
		ЗаполнитьЗначенияСвойств(СтрокаТ, СтррКопияГрафика);
	КонецЦикла;
	
	Если мСтроки.Количество() > 1 Тогда
		Текст = НСтр(""ru = 'График успешно применен для выбранных партнеров.'"");
	Иначе
		Текст = СтрШаблон_(НСтр(""ru = 'График успешно применен для выбранного партнера (%1).'""), СтрокаТ.Партнер);
	КонецЕсли;
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиГрафикВПланПосещений(Команда)
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр(""ru = 'Выберите в таблице нужные строки для переноса графика в план посещений.'""));
		Возврат;
	КонецЕсли;
	
	мСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(мСтроки, Элементы.Состав.ВыделенныеСтроки);
	
	ПППеренстиГрафикиВПланы(мСтроки);
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

// ОбработчикиКомандФормы_КопированиеГрафика
#КонецОбласти 

#Область ОбработчикиКомандФормы_ПланПосещений

// Перенос графика торговой точки (точек) в план посещений
&НаКлиенте
Процедура КомандаТДППЗаполнитьИзГрафика(Команда)
	ТДППЗаполнитьИзГрафикаПосещенийДляОбласти();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТДППЗаполнитьВсеИзГрафика(Команда)
	ТДППЗаполнитьИзГрафикаПосещенийДляПартнеров();
КонецПроцедуры

&НаКлиенте
Процедура КомандаТДППОчиститьОбласть(Команда)
	ТДППОчиститьПосещенияДляОбласти();
КонецПроцедуры

// ОбработчикиКомандФормы_ПланПосещений
#КонецОбласти 

#Область ОбработчикиКомандФормы_НавигацияПоФормам

&НаКлиенте
Процедура КомандаПоказатьПартнеров(Команда)
	
	ОткрытьФорму(""Справочник."" + СтррКонтекст.СпрТоргТочки.ВидСправочника + "".ФормаСписка"");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСпискиТТ(Команда)
	
	ОткрытьФормуОбработки(""СпискиТорговыхТочек"");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьТорговыхАгентов(Команда)
	
	ОткрытьФормуОбработки(""НастройкиАгентов"");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьГлавнуюФорму(Команда)
	
	ОткрытьФормуОбработки(""ГлавнаяФорма"");
	
КонецПроцедуры

// ОбработчикиКомандФормы_НавигацияПоФормам
#КонецОбласти

// ОбработчикиКомандФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДетализацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьПараметрыДетализацииСТТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиСпискаДетализации(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Детализация.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			Детализация.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;   			
	
	ОбновитьДетализациюСТТ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияПриИзменении(Элемент)

	ОбновитьДетализациюСТТ(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = ""ГруппаПланПосещений"" Тогда
		ТДППОбновитьКлиент();
	КонецЕсли; 
	
	Если СтррКонтекст.ТДПланПосещенийИзменен И ТекущаяСтраница.Имя <> ""ГруппаПланПосещений"" Тогда
		ТДПППеренестиВОбъектКлиент();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГрафикаПланаПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьВидимостьДатыНачала();
	СписокПериодовВыводаПланаОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	УстановитьМодифицированостьФормы(Истина);
	Если ДатаНачала = '00010101' Тогда
		ДатаНачала = НачалоНедели(ТекущаяДата());
	ИначеЕсли НачалоНедели(ДатаНачала) <> ДатаНачала Тогда
		ДатаНачала = НачалоНедели(ДатаНачала);
		ОчиститьСообщения();
		Текст = НСтр(""ru = 'Дата начала должна быть уставновлена на начало недели.'"");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, ""ДатаНачала"");
	КонецЕсли;
	
	СписокПериодовВыводаПланаОбновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПорядокПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыводаПланаПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	ОткрытьФормуОбработки(""НастройкиМодуля"");
	Оповестить(""АПНастройкиМодуля_ПоказатьНаФорме"", Новый Структура(""Закладка,Сообщение"", ""ГруппаОсновные"", ""ВыбратьВыгружатьМаршруты""));

КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	
	СоставИмяЭлемента = СтррКонтекст.СпрТоргТочки.тзИмяЭлемента;
	ИмяКолонки 		  = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	
	Если СтрокаТ <> Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = СоставИмяЭлемента Тогда 
			// Проверяем, не выбрали ли партнера, который уже есть в таблице
			Если ЗначениеЗаполнено(СтрокаТ[ИмяКолонки]) Тогда 
				мСтроки = Состав.НайтиСтроки(Новый Структура(ИмяКолонки, СтрокаТ[ИмяКолонки])); 
				Если мСтроки.Количество() > 1 Тогда // т.е. в таблице как минимум есть два таких партнера
					Текст = СтрШаблон_(НСтр(""ru = '%1 """"%2"""" уже присутствует в таблице.'""), СтррКонтекст.СпрТоргТочки.Представление, СтрокаТ[ИмяКолонки]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, ""Состав["" + СтрокаТ.ПолучитьИдентификатор() + ""]"");
					// восстанавливаем прежнее значение партнера
					ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
					Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда
						СтрокаТ[ИмяКолонки] = ПрежниеЗначения[ИмяКолонки];
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
					СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТ.Адрес = ПолучитьАдресПартнера(СтрокаТ[ИмяКолонки]);
			Элементы.Состав.ЗакончитьРедактированиеСтроки(Ложь); // почему-то в платформе (8.3.8.1784) продолжается редактирование поля (выделен текст поля синим фоном)
			
			Если СтррКонтекст.СпрТоргТочки.ВидСправочника = ""алкПунктыРазгрузки"" Тогда
				СсылкаВладелец = ПолучитьВладельцаСправочника(СтрокаТ[ИмяКолонки]);
				Если ЗначениеЗаполнено(СсылкаВладелец) И ТипЗнч(СсылкаВладелец) = Тип(""СправочникСсылка.Контрагенты"") Тогда 
					СтрокаТ.Контрагент = СсылкаВладелец;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = ""СоставСоглашение"" Тогда
			Если ЗначениеЗаполнено(СтрокаТ.Соглашение) Тогда
				СтррЗначения = ЗначенияРеквизитовОбъекта(СтрокаТ.Соглашение, ""Партнер,Организация,Контрагент"");
				СтрокаТ.Организация = СтррЗначения.Организация;
				Если ЗначениеЗаполнено(СтррЗначения.Партнер) Тогда
					СтрокаТ.Партнер 	= СтррЗначения.Партнер;				
				КонецЕсли; 
				Если ЗначениеЗаполнено(СтррЗначения.Контрагент) Тогда
					СтрокаТ.Контрагент  = СтррЗначения.Контрагент;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;

	КонецЕсли; // Если СтрокаТ <> Неопределено
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриАктивизацииСтроки(Элемент)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		// Запоминаем некоторые знаечения текущей строки на случай, если потребуется восстановить прежнее значение в строке
		ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
		СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьМодифицированостьФормы(Истина); // если происходит отмена редатикрования при добавлении новой строки, нужно обновить итоговое количество строк
КонецПроцедуры

&НаКлиенте
Процедура СоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ТекСтрока = Элементы.Состав.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда // пресекаем дублирование одного и того же партнера
			Отказ = Истина;
			СтрокаТ = Состав.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТ, ТекСтрока,, ""Партнер,Адрес"");
			Элементы.Состав.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
			УстановитьМодифицированостьФормы(Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПослеУдаления(Элемент)
	
	// Нужно в плане посещений (ТЗ ПланПосещений) удалить Партнеров, отсутствующих в ТЗ Состав. 
	// Это требуется для корректной записи плана посещений.
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	ТекПартнер = Неопределено;
	мПартнерыУдаления = Новый Массив;
	стррПоиск = Новый Структура(ИмяКолонки);
	Для каждого СтрокаТ Из ПланПосещений Цикл
		Если СтрокаТ[ИмяКолонки] = ТекПартнер Тогда
			Продолжить;
		ИначеЕсли мПартнерыУдаления.Найти(СтрокаТ[ИмяКолонки]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекПартнер = СтрокаТ[ИмяКолонки];
		стррПоиск[ИмяКолонки] = ТекПартнер;
		//мПартнерыУдаления = Состав.НайтиСтроки(стррПоиск);
		мСтроки = Состав.НайтиСтроки(стррПоиск); // sd_21082017 не корректно удалялись строки #34616
		Если мСтроки.Количество() = 0 Тогда // эту строку из ТЗ ПланПосещений нужно удалить.
			мПартнерыУдаления.Добавить(ТекПартнер);
		КонецЕсли; 
	КонецЦикла;
	
	Для Каждого Партнер Из мПартнерыУдаления Цикл
		стррПоиск[ИмяКолонки] = Партнер;
		мСтроки = ПланПосещений.НайтиСтроки(стррПоиск);
		Для каждого СтрокаТ Из мСтроки Цикл
			ПланПосещений.Удалить(СтрокаТ);
		КонецЦикла; 
	КонецЦикла; 
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		
		Имя = Элемент.ТекущийЭлемент.Имя;
		
		Если Имя = ""СоставГрафик"" Или Имя = ""СоставПланПосещений"" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СтррПараметры = Новый Структура(""МаксимумНедель,ПериодПоУмолчанию"", СтррКонтекст.МаксимумНедель, ПериодГрафикаПлана);
			
			ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
			Если Имя = ""СоставГрафик"" Тогда
				СтррПараметры.Вставить(""Заголовок"", НСтр(""ru='График посещений - '"") + СтрокаТ[ИмяКолонки]);					
				СтррПараметры.Вставить(""График"", СтрокаТ.График);
			Иначе // редактирование строки плана посещения партнера
				СтррПараметры.Вставить(""Заголовок"", НСтр(""ru='План посещений - '"") + СтрокаТ[ИмяКолонки]);
				СтррПараметры.Вставить(""График"", ПППолучитьПланПоПартнеру(СтрокаТ[ИмяКолонки]));
				СтррПараметры.Вставить(""БлокироватьВремя"",  Истина); // блокировать в редакторе графика флажок ""Время посещения""
				СтррПараметры.Вставить(""БлокироватьПериод"", Истина); // блокировать в редакторе графика поле ""Период графика""
				СтррПараметры.Вставить(""УбратьВсегоНедель"", Истина); // убрать из представления графика надпись ""Всего X нед.""
			КонецЕсли; 

			СтррДопПараметры = Новый Структура(""ИмяЭлемента,Партнер"", Имя, СтрокаТ[ИмяКолонки]);			
			
			Оповещение = Новый ОписаниеОповещения(""ВыборГрафикаЗавершение"", ЭтотОбъект, СтррДопПараметры);
			ОткрытьФормуОбработки(""ВыборГрафика"", СтррПараметры,, Оповещение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборГрафикаЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтррРезультат) = Тип(""Структура"") И ТипЗнч(ДополнительныеПараметры) = Тип(""Структура"") Тогда
		ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
		стррПоиск = Новый Структура(ИмяКолонки, ДополнительныеПараметры.Партнер);
		мСтроки = Состав.НайтиСтроки(стррПоиск);
		Если ДополнительныеПараметры.ИмяЭлемента = ""СоставГрафик"" Тогда // изменен график посещений
			Для каждого СтрокаТ Из мСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаТ, СтррРезультат);
			КонецЦикла; 
		ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = ""СоставПланПосещений"" Тогда // изменен план посещений
			Для каждого СтрокаТ Из мСтроки Цикл
				СтрокаТ.ПредставлениеПлана = СтррРезультат.ПредставлениеГрафика;
			КонецЦикла;
			ППУстановитьПланПоПартнеру(ДополнительныеПараметры.Партнер, СтррРезультат.График);
		КонецЕсли; 
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТ = Элементы.Состав.ТекущиеДанные;
	
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МодульК().ПоколениеКонфигурации("">=УТ_11.3"") Тогда
	
		стррПараметры = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
		
		стррПараметры.Элемент              = Элемент;
		стррПараметры.Партнер              = СтрокаТ.Партнер;
		стррПараметры.Документ             = СтрокаТ.Соглашение;
		стррПараметры.ДатаДокумента        = ТекущаяДата();
		стррПараметры.ДанныеФормыСтруктура = Объект;
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(стррПараметры, СтандартнаяОбработка);
		
	Иначе
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, СтрокаТ.Партнер, СтрокаТ.Соглашение, ТекущаяДата());
	
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыСостав
#КонецОбласти

#Область ОбработчикиСобытийТДПланПосещений

&НаКлиенте
Процедура ТДППОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Таб = ТДПланПосещений;
	Если Расшифровка = ""Адрес"" Тогда // слева от данной ячейки в расшифроке - торговая точка - покажем ее на карте
		РасшифровкаСлева = Таб.Область(ТДПолучитьАдресПоСмещению(Элемент.ТекущаяОбласть.Имя, 0, -1)).Расшифровка;
		Если ТипЗнч(РасшифровкаСлева) = Тип(""СправочникСсылка.Партнеры"") Тогда
			//апРаботаСКартамиК.ПоказатьОбъектНаКарте(Расшифровка, ЭтаФорма);
			Сообщить(""Покажу на карте: "" + РасшифровкаСлева);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Возврат;
	ИначеЕсли ТипЗнч(Расшифровка) <> Тип(""Структура"") Тогда
		Возврат;
	КонецЕсли;
	
	ТекЗначение = Элемент.ТекущаяОбласть.Текст;
	СтандартнаяОбработка = Ложь;
	Если ИспользоватьПорядок Тогда
		ТекЗначение = ?(ПустаяСтрока(ТекЗначение), 0, Строка(ТекЗначение));
		ВыбранныйПорядок = ТДПППроставитьВыборПорядка(Элемент);
		Если ВыбранныйПорядок = -1 Тогда // пользователь выбирает порядок из списка
			Возврат;
		Иначе
			НовоеЗначение = ВыбранныйПорядок;
		КонецЕсли;
	Иначе
		НовоеЗначение = ?(ТекЗначение = """", ""X"", """"); 
	КонецЕсли; 
	Элемент.ТекущаяОбласть.Текст = НовоеЗначение;
	УстановитьМодифицированостьФормы(Истина);
	СтррКонтекст.ТДПланПосещенийИзменен = Истина;
	
	// скорректируем итог по колонке
	
	ИтогКолонки = ТДППВернутьИтогДня(Элемент);
	ИтогДоИзменения = ИтогКолонки;
	// Корректируем итог колонки с учетом нового значения и взависимости от порядка
	Если ИспользоватьПорядок Тогда
		Если ВыбранныйПорядок = 0 Тогда
			ИтогКолонки = ИтогКолонки - 1;
		ИначеЕсли ВыбранныйПорядок > ИтогКолонки Тогда
			ИтогКолонки = ВыбранныйПорядок;
		ИначеЕсли ВыбранныйПорядок = 1 Тогда 
			ИтогКолонки = ИтогКолонки + 1;
		КонецЕсли;
		ПерекраситьКолонку = ТекЗначение = 1 Или ТекЗначение = ИтогКолонки Или	ВыбранныйПорядок = 1 Или ВыбранныйПорядок = ИтогКолонки;
	Иначе
		ИтогКолонки = ИтогКолонки + ?(НовоеЗначение = """", -1, 1);
		ПерекраситьКолонку = Ложь;
	КонецЕсли;
	
	Изменение = ИтогКолонки - ИтогДоИзменения;
	
	АдресТекущейСтроки  = Неопределено;
	АдресТекущейКолонки = Неопределено;
	ТДПолучитьАдресаСтрокиИКолонки(Элемент.ТекущаяОбласть.Имя, АдресТекущейСтроки, АдресТекущейКолонки);
	АдресСтрокиИтогов  = ""R"" + Строка(СтррКонтекст.ППСтрокаИтогов);
	АдресКолонкиИтогов = ""C"" + Строка(СтррКонтекст.ППКолонкаИтогов);
	
	// итог колонки (итог дня)
	Таб.Область(АдресСтрокиИтогов + АдресТекущейКолонки).Текст = ИтогКолонки; // вывод итога дня
	
	// итог строки (итог торговой точки)
	Область = Таб.Область(АдресТекущейСтроки + АдресКолонкиИтогов);
	ТекстЯчейки = Область.Текст;
	Область.Текст = ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки)) + Изменение;
	
	// итог всего плана
	Область = Таб.Область(АдресСтрокиИтогов + АдресКолонкиИтогов);
	ТекстЯчейки = Область.Текст;
	Область.Текст = Строка(?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки)) + Изменение); // если будет значение ""0"", оно будет показано в ячейке как ""0""
	
	Если ПерекраситьКолонку Тогда
		ТДПППерекраситьКолонку(АдресТекущейКолонки, ИтогКолонки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ТДПППроставитьВыборПорядка(Элемент)
	
	ТекЗначение = ?(Элемент.ТекущаяОбласть.Текст = """", 0, Число(Элемент.ТекущаяОбласть.Текст));
	ВсегоЗаДень = ТДППВернутьИтогДня(Элемент);
	
	Если ТекЗначение = 0 Тогда // сразу проставляем следующий порядок
		Возврат ВсегоЗаДень + 1;
		
	ИначеЕсли ВсегоЗаДень = 1 Тогда // снятие единственного выбранного флажка
		Возврат 0;
		
	Иначе //сформируем массив возможных значений для выбора
		СписокПорядков = Новый СписокЗначений;
		МаксПорядок = ВсегоЗаДень + ?(ТекЗначение = 0, 1, 0); 
		Для Сч = 0 По МаксПорядок Цикл
			СписокПорядков.Добавить(Сч);
		КонецЦикла;
		Оповещение = Новый ОписаниеОповещения(""ТДППОбработкаВыбораПорядкаИзСписка"", ЭтотОбъект, Элемент);
		ПоказатьВыборИзСписка(Оповещение, СписокПорядков, Элемент); 
		Возврат -1; // признак, что пользователь будет выбирать значение из списка
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТДППОбработкаВыбораПорядкаИзСписка(Результат, Элемент) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // Отмена выбора.
	КонецЕсли;
	
	Таб = ТДПланПосещений;
	
	ВыбПорядок = Результат.Значение;
	РедактируемаяЯчейка = Элемент.ТекущаяОбласть.Имя;
	ТекПорядок = ?(Элемент.ТекущаяОбласть.Текст = """", 0, Число(Элемент.ТекущаяОбласть.Текст));
	
	Если ТекПорядок = ВыбПорядок Тогда
		Возврат; // выбрано прежнее значение
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Истина);
	СтррКонтекст.ТДПланПосещенийИзменен = Истина;
		
	ОтступСтр = СтррКонтекст.ППСтрокаИтогов + 1;
	
	АдресТекущейКолонки = Неопределено;
	АдресТекущейСтроки  = Неопределено;
	ТДПолучитьАдресаСтрокиИКолонки(Элемент.ТекущаяОбласть.Имя, АдресТекущейСтроки, АдресТекущейКолонки);
	
	НомерПоследнейСтроки = ОтступСтр + Состав.Количество() - 1;
	
	Если ВыбПорядок > 0 Тогда // итоги не меняются, делается только замена значений
		СтрВыбПорядок = Строка(ВыбПорядок);
		Для Сч = ОтступСтр По НомерПоследнейСтроки Цикл
			АдресОбласти = ""R""+Строка(Сч) + АдресТекущейКолонки;
			Расшифровка = Таб.Область(АдресОбласти).Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип(""Структура"") И Расшифровка.Свойство(""ЭтоПорядок"") Тогда
				Если Таб.Область(АдресОбласти).Текст = СтрВыбПорядок Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Таб.Область(АдресОбласти).Текст = ТекПорядок;
		Таб.Область(РедактируемаяЯчейка).Текст = ВыбПорядок;
		ИтогКолонки = ТДППВернутьИтогДня(Элемент);
		Если ВыбПорядок = 1 Или ВыбПорядок = ИтогКолонки Или ТекПорядок = 1 Или ТекПорядок = ИтогКолонки Тогда
			ТДПППерекраситьКолонку(АдресТекущейКолонки, ИтогКолонки);
		КонецЕсли;
	Иначе // выбран ""0""
		Таб.Область(РедактируемаяЯчейка).Текст = """";
		ИтогКолонки = 0;
		// сканируем все посещения дня и уменьшаем на 1 порядок у тех, где Порядок > ТекПорядок 
		Для Сч = ОтступСтр По НомерПоследнейСтроки Цикл
			АдресОбласти = ""R""+Строка(Сч) + АдресТекущейКолонки;
			Расшифровка = Таб.Область(АдресОбласти).Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип(""Структура"") И Расшифровка.Свойство(""ЭтоПорядок"") Тогда
				ТекстЯчейки = Таб.Область(АдресОбласти).Текст;
				Если Не ПустаяСтрока(ТекстЯчейки) Тогда
					ИтогКолонки = ИтогКолонки + 1;
					Порядок = Число(ТекстЯчейки);
					Если Порядок > ТекПорядок Тогда
						Таб.Область(АдресОбласти).Текст = Строка(Порядок-1);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Таб.Область(""R""+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресТекущейКолонки).Текст = ИтогКолонки; // вывод итога дня
		
		АдресОбласти = АдресТекущейСтроки + ""C"" + СтррКонтекст.ППКолонкаИтогов;
		ИтогСтроки = Число(Таб.Область(АдресОбласти).Текст) - 1;
		Таб.Область(АдресОбласти).Текст = ?(ИтогСтроки = 0, """", Строка(ИтогСтроки)); // обновили итог строки
		
		// уменьшаем общий итог документа
		АдресОбласти = ""R""+Строка(СтррКонтекст.ППСтрокаИтогов) + ""C""+Строка(СтррКонтекст.ППКолонкаИтогов);
		ОбшийИтог = Число(Таб.Область(АдресОбласти).Текст) - 1;
		Таб.Область(АдресОбласти).Текст = Строка(ОбшийИтог);
		ТДПППерекраситьКолонку(АдресТекущейКолонки, ИтогКолонки);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийТДПланПосещений
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Прочие

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, ""Код, Наименование, Родитель"".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
&НаСервере
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьВСтрокуНомерКопии(ИсхСтрока)
	
	ИсхСтрока = СокрП(ИсхСтрока);
	ИндексН = СтрДлина(ИсхСтрока) + 1; // индекс начала
	Символ = Неопределено;
	Пока ИндексН > 0 И Символ <> ""("" Цикл
		ИндексН = ИндексН - 1;		
		Символ = Сред(ИсхСтрока, ИндексН, 1);
	КонецЦикла; 
	
	СтрКопия = НСтр(""ru = 'копия'"");
	
	Если Символ = ""("" И Сред(ИсхСтрока, ИндексН + 1, СтрДлина(СтрКопия)) = СтрКопия Тогда // есть в названии слово ""(копия""
		СтрНомерКопии = """";
		ИндексК = СтрДлина(ИсхСтрока); // индекс конца
		Для Индекс = ИндексН По ИндексК Цикл
			Символ = Сред(ИсхСтрока, Индекс, 1);
			Код = КодСимвола(Символ);			
			Если Код = 41 Тогда // "")""
				Прервать;
			ИначеЕсли Код > 47 И Код < 58 Тогда
				СтрНомерКопии = СтрНомерКопии + Символ;
			КонецЕсли; 
		КонецЦикла;
		НомерКопии = ?(СтрНомерКопии <> """", Число(СтрНомерКопии), 1) + 1;
		ИсхСтрока = Лев(ИсхСтрока, ИндексН) + СтрКопия + "" "" + Строка(НомерКопии) + "")"";
	Иначе
		ИсхСтрока = ИсхСтрока + "" ("" + СтрКопия + "")"";
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  ""минуту,минуты,минут"") = ""23 минуты"";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  ""минуту,минуты,минут"") = ""15 минут"".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, ""ЧН=0"") + "" "", """");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, "","");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПартнеровПоОсновномуМенеджеру(мПользователи)

	Текст = ""
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ 
		|	Партнеры.ПометкаУдаления = ЛОЖЬ
		|	И Партнеры.ОсновнойМенеджер В (&Пользователи)"";
		
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр(""Пользователи"", мПользователи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(""Ссылка"");
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если МодульК = Неопределено Тогда
	    МодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + ""МодульОбщий"");
	КонецЕсли; 
	
	Возврат МодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (список торговых точек) из хранилищя значений.
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение(""Объект"");
	
	ID = КлючID;
	СтррОбъект = ТекОбъект.ПолучитьОбъектИзХранилища(""СпрСТТ"", ID);
	Если СтррОбъект = Неопределено Тогда // создание нового элемента списка, нужно назначить автоматическое имя списка
		тзСТТ = ТекОбъект.ПрочитатьЗначениеНастройки(""СпискиТорговыхТочек"");
		Если ТипЗнч(тзСТТ) <> Тип(""ТаблицаЗначений"") Тогда
			ВызватьИсключение(""Попытка создать новый элемент СТТ с неинициализированным хранилищем хранения списков СТТ (реквизит """"СпискиТорговыхТочек"""" в хранилище пустой!"");
		КонецЕсли; 
		// Для инициализации реквизита ""СпискиТорговыхТочек"" на форме СпискиТорговыхТочек в процедуре ПрочестьОбъектИзХранилища()
		// сделана проверка значения реквизита и его инициализация в Хранилище.
		Наименование = СтрШаблон_(НСтр(""ru = 'Список ТТ N %1'""), тзСТТ.Количество() + 1);
	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, СтррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура сохраняет объект (список торговых точек) в хранилище значений.
&НаСервере
Процедура СохранитьОбъектВХранилище()
	
	Если СтррКонтекст.ТДПланПосещенийИзменен Тогда // табличный документ плана посещений был изменен, нужно его перенести в объект
		ТДПППеренестиВОбъект();	
	КонецЕсли; 
	
	// Этап 1. Сохранение самого объекта в хранилище.
	Если Строка(ID) = ""00000000-0000-0000-0000-000000000000"" Тогда // новый объект
		ID = ?(ТипЗнч(СтррКонтекст.IDNew) = Тип(""УникальныйИдентификатор""), СтррКонтекст.IDNew, Новый УникальныйИдентификатор());
	КонецЕсли; 
	
	СтррОбъект = Новый Структура(""Наименование,Детализация,ПериодГрафикаПлана,ДатаНачала,Комментарий,ИспользоватьПорядок,Состав,ПланПосещений""); // сохраняемые реквизиты объекта
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма,, ""Состав,ПланПосещений"");
	
	СтррОбъект.Состав = Состав.Выгрузить();
	СтррОбъект.ПланПосещений = ПланПосещений.Выгрузить();
	
	ТекОбъект = РеквизитФормыВЗначение(""Объект"");
	ТекОбъект.СохранитьОбъектВХранилище(""СпрСТТ"", ID, СтррОбъект);
	
	// Этап 2. Обновление ТЗ списков торговых точек - обновление реквизитов представления списка ТТ.
	тзСТТ = ТекОбъект.ПрочитатьЗначениеНастройки(""СпискиТорговыхТочек"");
	
	СтрокаТ = тзСТТ.Найти(ID, ""ID"");
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = тзСТТ.Добавить();
		СтрокаТ.ID = ID;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТ, СтррОбъект);
	СтрокаТ.ВсегоТочек = ВсегоТочек;
	СтрокаТ.ДетализацияПредставление = Строка(Детализация);
	
	ТекОбъект.СохранитьЗначениеНастройки(""СпискиТорговыхТочек"", тзСТТ);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьОбъектВХранилищеКлиент()
	
	// проверяем - заполнены ли партнеры во всех строках? если нет, отказываем в записи
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	
	ЕстьПустойПартнер = Ложь;
	Для каждого СтрокаТ Из Состав Цикл
		Если Не ЗначениеЗаполнено(СтрокаТ[ИмяКолонки]) Тогда
			ЕстьПустойПартнер = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЕстьПустойПартнер Тогда
		Текст = СтрШаблон_(НСтр(""ru = 'Заполните значение в колонке """"%1"""" или удалите строку.'""), НСтр(""ru = 'Торговая точка'""));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, ""Состав["" + СтрокаТ.ПолучитьИдентификатор() + ""]"");
		Элементы.Состав.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();
		Возврат Ложь;
	Иначе
		СохранитьОбъектВХранилище();
		УстановитьМодифицированостьФормы(Ложь);
		Оповестить(""АПСписокТорговыхТочекЗаписан"", ID);
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьОбъектВХранилищеКлиент() Тогда
			Закрыть();
		КонецЕсли; 
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочестьНастройкиВыгрузкиМаршрутовИзХранилища()
	
	Возврат РеквизитФормыВЗначение(""Объект"").ПрочитатьЗначенияНастроек(""ВыгружатьМаршруты,ИнтервалВыгрузкиМаршрутов"");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КИПартнеров

&НаСервере
Функция ПолучитьАдресПартнера(Партнер)
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат """";
	Иначе
		мПартнеры = Новый Массив;
		мПартнеры.Добавить(Партнер);
		мВидыКИ = Новый Массив;
		мВидыКИ.Добавить(СтррКонтекст.СпрТоргТочки.Адрес);
		тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мПартнеры,, мВидыКИ);
		Возврат ?(тзАдреса.Количество() > 0, тзАдреса[0].Представление, """");
	КонецЕсли; 
		
КонецФункции 

&НаСервере
Процедура ОбновитьАдресаПартнеров(мПартнеры = Неопределено, НачальнаяСтрока = 0)
	
	Если Состав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	Если мПартнеры = Неопределено Тогда
		мПартнеры = Состав.Выгрузить(, ИмяКолонки).ВыгрузитьКолонку(ИмяКолонки);
	КонецЕсли; 

	мВидыКИ = Новый Массив;
	мВидыКИ.Добавить(СтррКонтекст.СпрТоргТочки.Адрес);
	
	тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мПартнеры,, мВидыКИ);
	СтррПоиск = Новый Структура(""Объект"");
	
	Если НачальнаяСтрока = 0 Тогда
		Для каждого СтрокаТ Из Состав Цикл
			СтррПоиск.Объект = СтрокаТ[ИмяКолонки];
			мСтроки = тзАдреса.НайтиСтроки(СтррПоиск);
			СтрокаТ.Адрес = ?(мСтроки.Количество() > 0, мСтроки[0].Представление, """");
		КонецЦикла; 
	Иначе
		ПоследняяСтрока = Состав.Количество() - 1;
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			СтрокаТ = Состав[НомерСтроки];
			СтррПоиск.Объект = СтрокаТ[ИмяКолонки];
			мСтроки = тзАдреса.НайтиСтроки(СтррПоиск);
			СтрокаТ.Адрес = ?(мСтроки.Количество() > 0, мСтроки[0].Представление, """");
		КонецЦикла; 
	КонецЕсли; 
		
КонецПроцедуры

// СлужебныеПроцедурыИФункции_КИПартнеров
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	ЭтаФорма.Заголовок = НСтр(""ru = 'Список торговых точек - '"") + Наименование;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуОбработки(ИмяФормы, стррПараметры = Неопределено, Уникальность = Неопределено, Оповещение = Неопределено)
	
	Если стррПараметры = Неопределено Тогда
		стррПараметры = Новый Структура;
	КонецЕсли; 
	стррПараметры.Вставить(""ВХОбщиеПараметры"", СтррКонтекст.ВХОбщиеПараметры);
	Возврат ОткрытьФорму(СтррКонтекст.ПутьКФорме + ИмяФормы, стррПараметры, ЭтаФорма, Уникальность,,, Оповещение);
	
КонецФункции

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, ""ТекстВнимание"", ""Авто"")];
	
	Если ВсегоТочек <> Состав.Количество() Тогда
		ВсегоТочек = Состав.Количество();
	КонецЕсли; 
	
	Если Не Режим Тогда
		СтррКонтекст.ТДПланПосещенийИзменен = Ложь;		
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДетализацияСТТ

// Процедура обновляет детализацию списка торговых точек.
// Если в детализации выбрано свойство ""Маршрут"", то включается видимость закладки ""Маршрут"".
&НаКлиенте
Процедура ОбновитьДетализациюСТТ(МодифицированностьФормы = Неопределено)

	СписокКолонокДетализации = СтррКонтекст.СписокВсеДетализацииСТТ;
	
	Для Каждого ЭлементСписка Из СписокКолонокДетализации Цикл
		ИмяЭлемента = ""Состав"" + ЭлементСписка.Значение;
		Элементы[ИмяЭлемента].Видимость = (Неопределено <> Детализация.НайтиПоЗначению(ЭлементСписка.Значение));
	КонецЦикла;
	
	Если МодифицированностьФормы <> Неопределено Тогда
		УстановитьМодифицированостьФормы(МодифицированностьФормы);
	КонецЕсли; 
	
	ВидимостьГрафиков = Элементы.СоставГрафик.Видимость;
	ВидимостьПланаПосещений = Элементы.СоставПланПосещений.Видимость;
	
	// Видимость пунктов меню ""Копировать график"" и ""Применить график""	
	Элементы.СоставГрафикКонтекстноеМенюКопироватьГрафик.Видимость 		  = ВидимостьГрафиков;
	Элементы.СоставКонтекстноеМенюПрименитьСкопированныйГрафик.Видимость  = ВидимостьГрафиков;
	Элементы.СоставКонтекстноеМенюПеренестиГрафикВПланПосещений.Видимость = ВидимостьГрафиков И ВидимостьПланаПосещений;
	
	// Видимость закладки ""План посещений"":
	Элементы.ГруппаПланПосещений.Видимость = ВидимостьПланаПосещений;
	Элементы.ИспользоватьПорядок.Видимость = ВидимостьПланаПосещений;
	
	// Видимость элементов на закладке ""Дополнительно""
	Элементы.ПериодГрафикаПлана.Видимость = ВидимостьГрафиков Или ВидимостьПланаПосещений;
	Элементы.ПериодВыводаПлана.Видимость = ВидимостьПланаПосещений;	
	
	Элементы.ТДППКонтекстноеМенюЗаполнитьИзГрафика.Видимость 	 = ВидимостьГрафиков;
	Элементы.ТДППКонтекстноеМенюЗаполнитьВсеИзГрафиков.Видимость = ВидимостьГрафиков;
	
	СтррКонтекст.ТДПланПосещенийОбновить = ВидимостьПланаПосещений;
	
	СоставПартнерВидимость = Не (СтррКонтекст.СпрТоргТочки.ВидСправочника = ""алкПунктыРазгрузки"");
	Элементы.СоставПартнер.Видимость = СоставПартнерВидимость;
	Элементы.СоставПодборПоОсновномуМенеджеру.Видимость = СоставПартнерВидимость;
		
	ОбновитьВидимостьДатыНачала();
	ОбновитьПредупреждениеОНастройкахОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеОНастройкахОбмена()
	
	стрЗамечания = """";
	Если Элементы.СоставГрафик.Видимость Или Элементы.СоставПланПосещений.Видимость Тогда
		// структура со свойствами: ВыгружатьМаршруты, ИнтервалВыгрузкиМаршрутов
		стррЗначения = СтррКонтекст.НастройкиВыгрузкиМаршрутов;
		Если стррЗначения.ВыгружатьМаршруты <> Истина Тогда
			стрЗамечания = стрЗамечания + НСтр(""ru = 'выключен режим выгрузки маршрутов'"");
		ИначеЕсли стррЗначения.ИнтервалВыгрузкиМаршрутов = Неопределено Или стррЗначения.ИнтервалВыгрузкиМаршрутов = 0 Тогда
			стрЗамечания = стрЗамечания + НСтр(""ru = 'не задан интервал выгрузки маршрутов'"");
		КонецЕсли; 
	Иначе
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Ложь;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(стрЗамечания) Тогда
		Элементы.НадписьГотовностьНастроекОбмена.Заголовок = СтрШаблон_(НСтр(""ru = 'В настройках обмена %1.'""), стрЗамечания);
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Истина;
	Иначе
		Элементы.НадписьГотовностьНастроекОбмена.Видимость = Ложь;		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПараметрыДетализацииСТТ()
	
	Перем Оповещение, СписокДляПометки, ЭлементСписка;
	
	СписокДляПометки = СтррКонтекст.СписокВсеДетализацииСТТ.Скопировать();
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> Детализация.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения(""ОповещениеОтметкиСпискаДетализации"", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр(""ru = 'Параметры детализации списка торговых точек'""));

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ДетализацияСТТ
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПланПосещений

&НаКлиенте
Процедура ОбновитьВидимостьДатыНачала()
	
	Элементы.ДатаНачала.Видимость = (Элементы.ПериодГрафикаПлана.Видимость И ПериодГрафикаПлана > 7);
	
КонецПроцедуры

&НаКлиенте
Процедура ТДППОбновитьКлиент()
	
	Если СтррКонтекст.ТДПланПосещенийОбновить Тогда
		ТДППОчистить();
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДПланПосещений, ""ФормированиеОтчета"");
		ЭтаФорма.Элементы.ТДПланПосещений.ОтображениеСостояния.Текст = НСтр(""ru = 'Обновление плана посещений...'"");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(""ТДППОбновитьПоТаймеру"", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ТДППОчистить()
	ТДПланПосещений.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТДППОбновитьПоТаймеру()
	ТДППОбновить();
КонецПроцедуры

// Процедура выводит содержимое плана посещений в табличный докуемнт (ТД).
&НаСервере
Процедура ТДППОбновить()
	
	Если СтррКонтекст.ТДПланПосещенийОбновить Тогда
	    СтррКонтекст.ТДПланПосещенийОбновить = Ложь;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если Не СтррКонтекст.Свойство(""ЦветаДляМакета"") Тогда
		СтррКонтекст.Вставить(""ЦветаДляМакета"", ТДППЦветаДляМакета());		
	КонецЕсли; 
	
	ТекОбъект = РеквизитФормыВЗначение(""Объект"");
	Макет = ТекОбъект.ПолучитьМакетОбработки(""ПланПосещений"");
	
	ВсегоДней = ПериодГрафикаПлана;
	
	ДатаВыводаПлана = ТДПППолучитьДатуНачалаПериода();
	
#Область ВыводШапки

	ОбластьШапки = Макет.ПолучитьОбласть(""Шапка|ТоргТочка"");
	
	ОбластьШапки.Параметры.Дата 			= Формат(ДатаВыводаПлана, ""ДФ=dd.MM.yyyy"");
	ОбластьШапки.Параметры.НаименованиеСТТ 	= Наименование;
	ОбластьШапки.Параметры.НаименованиеТТ	= СтррКонтекст.СпрТоргТочки.Представление;
	
	Таб = ТДПланПосещений;
	
	Таб.Очистить();
	Таб.Вывести(ОбластьШапки);
	
	ВсегоОбластьШапки = Макет.ПолучитьОбласть(""Шапка|Всего"");
	Таб.Присоединить(ВсегоОбластьШапки);
	
	СтррКонтекст.Вставить(""ППКолонкаИтогов"", Таб.ШиринаТаблицы);	
	
	ПараметрыВывода 		   = Новый Структура(""ВсегоДней,ДатаНачала,мИтогиДней"");
	ПараметрыВывода.ВсегоДней  = ВсегоДней;
	ПараметрыВывода.ДатаНачала = ДатаВыводаПлана;
	ПараметрыВывода.мИтогиДней = ПППолучитьИтогиДней(); // массив итогов на каждый день
	
	ТДППВывестиОбластиСДнями(Макет, ""Шапка"", ПараметрыВывода);
	
// ВыводШапки	
#КонецОбласти 

#Область ВыводИтога
	
	ОбластьИтога = Макет.ПолучитьОбласть(""Итоги|ТоргТочка"");
	ОбластьИтога.Параметры.КоличествоСтрок = Состав.Количество();
	Таб.Вывести(ОбластьИтога);
	
	ОбластьИтогаВсего = Макет.ПолучитьОбласть(""Итоги|Всего"");
	ОбластьИтогаВсего.Параметры.ПечВсего = Строка(ПараметрыВывода.мИтогиДней[0]); // полный итог в массиве мИтогиДней[0]
	Таб.Присоединить(ОбластьИтогаВсего);
	
	ТДППВывестиОбластиСДнями(Макет, ""Итоги"", ПараметрыВывода);
	
	СтррКонтекст.Вставить(""ППСтрокаИтогов"", Таб.ВысотаТаблицы);
	
// ВыводИтога	
#КонецОбласти 

#Область ВыводСтрокТЧ

	ПППопыткаПеренумероватьПункты();
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	ПланПосещений.Сортировать(ИмяКолонки + "",День"");
	ПараметрыВывода.Вставить(""стррПоиск"", Новый Структура(ИмяКолонки));
	ПараметрыВывода.Вставить(""НомерСтроки"", 1);
	
	Для каждого СтрокаТ Из Состав Цикл
		ТДППВывестиСтроку(Макет, СтрокаТ, ПараметрыВывода);
	КонецЦикла; 

// ВыводСтрокТЧ
#КонецОбласти 

#Область ВыводПодвала

	ОбластьПодвала = Макет.ПолучитьОбласть(""Подвал|ТоргТочка"");
	ОбластьПодвала.Параметры.КоличествоСтрок = Состав.Количество();
	ОбластьПодвала.Параметры.Автор 			 = ПараметрыСеанса.ТекущийПользователь;
	Таб.Вывести(ОбластьПодвала);
	
	ВсегоОбластьПодвала 				   = Макет.ПолучитьОбласть(""Подвал|Всего"");
	//ВсегоОбластьПодвала.Параметры.ПечВсего = ПараметрыВывода.мИтогиДней[0];
	Таб.Присоединить(ВсегоОбластьПодвала);	

	ТДППВывестиОбластиСДнями(Макет, ""Подвал"", ПараметрыВывода);

// ВыводПодвала	
#КонецОбласти 

	Таб.ТолькоПросмотр 	   = Истина;
	Таб.АвтоМасштаб    	   = Истина;
	Таб.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Таб.ФиксацияСлева 	   = 4;
	Таб.ФиксацияСверху 	   = 4;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДПланПосещений, ""НеИспользовать"");
	
КонецПроцедуры

// Процедура перенумеровывает пункты плана посещений, если он был интерактивно переключен в режим ИспользоватьПорядок
&НаСервере
Процедура ПППопыткаПеренумероватьПункты(Принудительно = Ложь)
	
	Если Не ИспользоватьПорядок Тогда
		Возврат;
	КонецЕсли; 
	
	Перенумеровать = Принудительно;
	Если Не Принудительно Тогда
		СтррПоиск = Новый Структура(""Порядок"", 9999); // проверяем есть ли одинаковые порядки
		мСтроки = ПланПосещений.НайтиСтроки(СтррПоиск);
		Перенумеровать = мСтроки.Количество() <> 0;	
	КонецЕсли; 
	
	Если Перенумеровать Тогда // Нужно перенумеровать порядки посещений ТТ
		ПланПосещений.Сортировать(""День,Порядок"");
		ТекДень = Неопределено;
		Для Каждого СтрокаТ Из ПланПосещений Цикл
			Если СтрокаТ.День <> ТекДень Тогда
				ТекДень = СтрокаТ.День;
				ТекПорядок 	= 1;
			КонецЕсли; 
			СтрокаТ.Порядок = ТекПорядок;
			ТекПорядок = ТекПорядок + 1;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТДПППеренестиВОбъектКлиент()
	Состояние(НСтр(""ru='Перенос плана из табличного документа...'""));
	ТДПППеренестиВОбъект();
КонецПроцедуры

// Процедура переносит содержимое ТД плана посещений в ТЗ ПланПосещений
&НаСервере
Процедура ТДПППеренестиВОбъект()

	Таб = ТДПланПосещений;

	ПланПосещений.Очистить();
	
	МинНомерСтроки   = СтррКонтекст.ППСтрокаИтогов + 1;
	МаксНомерСтроки  = МинНомерСтроки + Состав.Количество() - 1;
	МинНомерКолонки  = СтррКонтекст.ППКолонкаИтогов + 1;
	МаксНомерКолонки = МинНомерКолонки + ПериодГрафикаПлана - 1;
	
	НомерКолонкиПартнера = 4;
	АдресКолонкиПартнера = ""C"" + Строка(НомерКолонкиПартнера);
	НомерКолонкиПервогоДня_1 = МинНомерКолонки - 1;
	
	ТипСпрПартнеры = Тип(""СправочникСсылка.""+СтррКонтекст.СпрТоргТочки.ВидСправочника);
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	мДниПлана  = Новый Массив;
	мДниНедели = СтрРазделить_(НСтр(""ru='пн,вт,ср,чт,пт,СБ,ВС'""), "","");
	ВсегоНедель = Цел(ПериодГрафикаПлана / 7) + ?(ПериодГрафикаПлана % 7 <> 0, 1, 0); // количество недель в плане посещений
	
	Для НомерСтроки = МинНомерСтроки По МаксНомерСтроки Цикл
		
		АдресСтроки = ""R"" + Строка(НомерСтроки);
		Партнер = Таб.Область(АдресСтроки + АдресКолонкиПартнера).Расшифровка;
		Если ТипЗнч(Партнер) <> ТипСпрПартнеры Тогда
			Продолжить;
		КонецЕсли;
		мДниПлана.Очистить();
		Для НомерКолонки = МинНомерКолонки По МаксНомерКолонки Цикл
			ТекстЯчейки = Таб.Область(АдресСтроки + ""C""+Строка(НомерКолонки)).Текст;
			Если ТекстЯчейки <> """" Тогда
				День = НомерКолонки - НомерКолонкиПервогоДня_1;
				СтрокаТ = ПланПосещений.Добавить();
				СтрокаТ[ИмяКолонки] = Партнер;
				СтрокаТ.День = День;
				мДниПлана.Добавить(День);
				Если ИспользоватьПорядок Тогда
					СтрокаТ.Порядок = Число(ТекстЯчейки);
				Иначе
					СтрокаТ.Порядок = 9999;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
		Состав[НомерСтроки-МинНомерСтроки].ПредставлениеПлана = ПредставлениеПлана(мДниПлана, ВсегоНедель, мДниНедели);
		
	КонецЦикла; 
	
	СтррКонтекст.ТДПланПосещенийИзменен = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПлана(мДниПлана, ВсегоНедель, мДниНедели)
	
	Если мДниПлана.Количество() = 0 Тогда
		Возврат """";
	КонецЕсли; 
	
	ТекНеделя = Неопределено;
	ВсеНеделиОдинаковы = Истина;
	ПредыдущееПредставлениеНедели = Неопределено;
	ВыбраноНедель = 0;
	
	СтрРабочиеДни = """";	РабочихДней = 0; 
	СтрВыходные   = """"; Выходных 	= 0;
	
	мДниПлана.Добавить(-100); // маркер последнего дня, чтобы завершить цикл, но не повторять алгоритм получения представления недели после цикла
	
	СтрРезультат = """";
	
	Для каждого День Из мДниПлана Цикл
		
		Неделя = Цел((День-1) / 7); // недели нумеруются с 0
		ДеньНедели_1 = (День-1) % 7;
		
		Если ТекНеделя <> Неделя Тогда
			
			Если ТекНеделя <> Неопределено Тогда
				Если РабочихДней = 5 Тогда
					ПредставлениеНедели = ?(Выходных = 2, НСтр(""ru='все дни'""),	НСтр(""ru='по будням'"") + ?(Выходных = 0, """", "", "" + СтрВыходные));
				Иначе
					ПредставлениеНедели = СтрРабочиеДни + СтрВыходные;
				КонецЕсли;
				Если Прав(ПредставлениеНедели, 2) = "", "" Тогда
					ПредставлениеНедели = Лев(ПредставлениеНедели, СтрДлина(ПредставлениеНедели)-2);
				КонецЕсли;
				Если ВсеНеделиОдинаковы И ТекНеделя > 0 Тогда
					ВсеНеделиОдинаковы = (ПредыдущееПредставлениеНедели = ПредставлениеНедели);
				КонецЕсли; 
				Если ПредставлениеНедели <> """" Тогда
					СтрРезультат = СтрРезультат + ?(СтрРезультат = """", """", ""; "") + Строка(ТекНеделя+1) + "": "" + ПредставлениеНедели;		
				КонецЕсли; 
				ПредыдущееПредставлениеНедели = ПредставлениеНедели;
				ВыбраноНедель = ВыбраноНедель + 1; 
			КонецЕсли; 
			
			Если День = -100 Тогда
				Прервать;
			КонецЕсли; 
			
			ТекНеделя = Неделя;				
			СтрРабочиеДни = """";	РабочихДней = 0; 
			СтрВыходные   = """"; Выходных 	= 0;
			
		КонецЕсли; 
		
		Если ДеньНедели_1 < 5 Тогда // 0-4 - пн-пт
			СтрРабочиеДни = СтрРабочиеДни + мДниНедели[ДеньНедели_1] + "", "";
			РабочихДней   = РабочихДней + 1;
		Иначе
			СтрВыходные = СтрВыходные + мДниНедели[ДеньНедели_1] + "", "";
			Выходных 	= Выходных + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ВсеНеделиОдинаковы И ВыбраноНедель = ВсегоНедель Тогда
		СтрРезультат = ПредставлениеНедели;
	КонецЕсли; 
	
	Возврат СтрРезультат;
	
КонецФункции

&НаСервере
Процедура ТДППВывестиОбластиСДнями(Макет, ИмяОбласти, ПараметрыВывода)

	ТекДата 	= ПараметрыВывода.ДатаНачала;
	ВсегоДней 	= ПараметрыВывода.ВсегоДней;
	мИтогиДней 	= ПараметрыВывода.мИтогиДней;
	
	ДниНеделиСтр = НСтр(""ru='пн,вт,ср,чт,пт,СБ,ВС'"");
	мДниНедели   = СтрРазделить_(ДниНеделиСтр, "","");
	
	Для День = 1 По ВсегоДней Цикл		
		ДеньНед = ДеньНедели(ТекДата);
		Если ДеньНед = 7 Тогда 
			Область = Макет.ПолучитьОбласть(ИмяОбласти + ""|Воскр"");
		ИначеЕсли ДеньНед = 6 Тогда 
			Область = Макет.ПолучитьОбласть(ИмяОбласти + ""|Субб"");
		Иначе // остальные дни
			Область = Макет.ПолучитьОбласть(ИмяОбласти + ""|День"");
		КонецЕсли;
		
		Если ИмяОбласти = ""Шапка"" Тогда			
			Область.Параметры.ДеньНед = мДниНедели[ДеньНед-1];
			Область.Параметры.ДеньМес = Строка(День(ТекДата));
		ИначеЕсли ИмяОбласти = ""Подвал"" Тогда
			//Область.Параметры.ПечИтог = мИтогиДней[День];
		ИначеЕсли ИмяОбласти = ""Итоги"" Тогда
			Область.Параметры.ПечИтог = мИтогиДней[День];
		КонецЕсли;
		
		ТДПланПосещений.Присоединить(Область);
		ТекДата = ТекДата + 86400;
	КонецЦикла;	
	
КонецПроцедуры

// Функция возвращает количество посещений в строке.
&НаСервере
Функция ТДППВывестиСтроку(Макет, СтрокаТ, ПараметрыВывода)
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	
	Таб = ТДПланПосещений;
	
	НомерСтроки 	= ПараметрыВывода.НомерСтроки;
	НачИмяОбласти 	= ?(НомерСтроки % 2 = 0, ""Строка"", ""Строка2"");
	Область 		= Макет.ПолучитьОбласть(НачИмяОбласти + ""|ТоргТочка"");
	Область.Параметры.Ном 		= НомерСтроки;
	Область.Параметры.Партнер 	= СтрокаТ[ИмяКолонки];
	Область.Параметры.Адрес   	= СтрокаТ.Адрес;
	Область.Параметры.АдресТочки= ""Адрес"";
	Таб.Вывести(Область); // вывели колонку Торговая точка/Адрес
	// теперь выводим строку
	ДеньНед 	= ДеньНедели(ПараметрыВывода.ДатаНачала);
	ВсегоДней 	= ПараметрыВывода.ВсегоДней;
	мИтогиДней 	= ПараметрыВывода.мИтогиДней;
	Цвета		= СтррКонтекст.ЦветаДляМакета;	
	ВсегоПосещений = 0;
	
	стррПоиск = ПараметрыВывода.стррПоиск;
	стррПоиск[ИмяКолонки] = СтрокаТ[ИмяКолонки];
	мСтроки = ПланПосещений.НайтиСтроки(стррПоиск);
	НайденоДней = мСтроки.Количество();
	МаксИндексДня = НайденоДней - 1;
	ИндексДня = 0;
	
	ОбластьВсего 					      = Макет.ПолучитьОбласть(НачИмяОбласти + ""|Всего"");
	ОбластьВсего.Параметры.ВсегоПосещений = 0;
	ЯчейкаВсего = Таб.Присоединить(ОбластьВсего);
	
	Для День = 1 По ВсегоДней Цикл
		
		Если ДеньНед = 7 Тогда // воскресенье
			Область = Макет.ПолучитьОбласть(НачИмяОбласти + ""|Воскр"");
		ИначеЕсли ДеньНед = 6 Тогда //суббота
			Область = Макет.ПолучитьОбласть(НачИмяОбласти + ""|Субб"");
		Иначе // остальные дни
			Область = Макет.ПолучитьОбласть(НачИмяОбласти + ""|День"");
		КонецЕсли;
		
		Значение = 0;
		Если НайденоДней > 0 Тогда
			Для Индекс = ИндексДня По МаксИндексДня Цикл
				СтрокаТДень = мСтроки[Индекс];
				Если СтрокаТДень.День = День Тогда
					Значение = СтрокаТДень.Порядок;
					ИндексДня = Индекс + 1;
					Прервать;
				ИначеЕсли СтрокаТДень.День > День Тогда
					ИндексДня = Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			ВсегоПосещений = ВсегоПосещений + ?(Значение <> 0, 1, 0);
		КонецЕсли; 
		
		Если ИспользоватьПорядок Тогда
			Если Значение > 0 Тогда
				ПечЗначение = Значение;
				Если Значение = 1 Тогда
					Область.ТекущаяОбласть.ЦветФона = Цвета.ЦветПервогоДня;
				ИначеЕсли Значение = мИтогиДней[День] Тогда
					Область.ТекущаяОбласть.ЦветФона = Цвета.ЦветПоследнегоДня;
				КонецЕсли;
			Иначе
				ПечЗначение = """";
			КонецЕсли;
		Иначе
			ПечЗначение = ?(Значение <> 0, ""X"", """");
		КонецЕсли;
		
		Область.Параметры.ПечРабота = ПечЗначение;  			
		Область.Параметры.СтрПечРабота = Новый Структура(""День, Значение, ЭтоПорядок"", День, ПечЗначение, ИспользоватьПорядок);    	
		
		Таб.Присоединить(Область);
		
		ДеньНед = ?(ДеньНед = 7, 1, ДеньНед + 1);
	КонецЦикла;
	
	ЯчейкаВсего.Текст = ВсегоПосещений;
	
	ПараметрыВывода.НомерСтроки = НомерСтроки + 1;
	
	Возврат ВсегоПосещений;
	
КонецФункции

&НаКлиенте
Функция ПППолучитьПланПоПартнеру(Партнер)
	
	СтррПлан = Новый Структура(""ПериодГрафика,Пункты,УчитыватьВремяПосещения"");
	СтррПлан.ПериодГрафика = ПериодГрафикаПлана;
	СтррПлан.УчитыватьВремяПосещения = Ложь;
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	СтррПоиск = Новый Структура(ИмяКолонки, Партнер);
	мДни = ПланПосещений.НайтиСтроки(СтррПоиск);
	
	СтррПункты = Новый Структура;
	
	Для каждого СтрокаТ Из мДни Цикл
		Значение = Новый Структура(""Выбран"", Истина);
		СтррПункты.Вставить(""П"" + Строка(СтрокаТ.День - 1), Значение);
	КонецЦикла;

	СтррПлан.Пункты = СтррПункты;
	
	Возврат СтррПлан;
	
КонецФункции

&НаКлиенте
Процедура ППУстановитьПланПоПартнеру(Партнер, СтррПлан)
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	СтррПоиск = Новый Структура(ИмяКолонки, Партнер);
	мСтроки = ПланПосещений.НайтиСтроки(СтррПоиск);
	ствПорядки = Новый Соответствие; // запоминаем прежние порядки, чтобы по возможности их сохранить
	Для каждого СтрокаТ Из мСтроки Цикл
		ствПорядки.Вставить(СтрокаТ.День, СтрокаТ.Порядок);
		ПланПосещений.Удалить(СтрокаТ);
	КонецЦикла;
	
	// в структуре СтррПлан.Пункты элементы вида ""Пn"", где n - номер дня плана, начиная с 0
	Для каждого Элемент Из СтррПлан.Пункты Цикл
		День = Число(Сред(Элемент.Ключ, 2)) + 1;
		СтрокаТ = ПланПосещений.Добавить();
		СтрокаТ[ИмяКолонки] = Партнер;
		ПрежнийПорядок 	= ствПорядки[День];
		СтрокаТ.День 	= День;
		СтрокаТ.Порядок = ?(ПрежнийПорядок = Неопределено, 9999, ПрежнийПорядок);
	КонецЦикла; 
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	ПППопыткаПеренумероватьПункты(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПППеренстиГрафикиВПланы(мСтроки)
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	СтррПоиск = Новый Структура(ИмяКолонки);
	ствПорядки = Новый Соответствие;
	ПериодПлана = ПериодГрафикаПлана;
	мДниПлана = Новый Массив;
	мДниНедели = СтрРазделить_(НСтр(""ru='пн,вт,ср,чт,пт,СБ,ВС'""), "","");
	ВсегоНедель = Цел(ПериодГрафикаПлана / 7) + ?(ПериодГрафикаПлана % 7 <> 0, 1, 0); // количество недель в плане посещений
	
	Для Каждого ИдСтроки Из мСтроки Цикл
		
		стзСостав = Состав.НайтиПоИдентификатору(ИдСтроки);
		
		// удаляем строки из плана посещений по заданному партнеру
		ТекПартнер = стзСостав[ИмяКолонки];
		СтррПоиск[ИмяКолонки] = ТекПартнер;
		мСтрокиПП = ПланПосещений.НайтиСтроки(СтррПоиск);
		ствПорядки.Очистить(); // запоминаем прежние порядки, чтобы по возможности их сохранить	
		Для каждого стзПП Из мСтрокиПП Цикл
			ствПорядки.Вставить(стзПП.День, стзПП.Порядок);
			ПланПосещений.Удалить(стзПП);
		КонецЦикла;
		
		мДниПлана.Очистить();
		
		Если ЗначениеЗаполнено(стзСостав.График) Тогда
			СтррПункты = стзСостав.График.Пункты;
			ПериодГрафика = стзСостав.График.ПериодГрафика;
			СмещениеДняПлана = 0;
			Пока СмещениеДняПлана < ПериодПлана Цикл
				Для каждого Элемент Из СтррПункты Цикл // в структуре СтррПункты элементы вида ""Пn"", где n - номер дня плана, начиная с 0
					День = Число(Сред(Элемент.Ключ, 2)) + 1 + СмещениеДняПлана;
					Если День > ПериодГрафикаПлана Тогда
						Прервать;
					КонецЕсли; 
					мДниПлана.Добавить(День);
					стзПП = ПланПосещений.Добавить();
					стзПП[ИмяКолонки] = ТекПартнер;
					ПрежнийПорядок 	= ствПорядки[День];
					стзПП.День 	= День;
					стзПП.Порядок = ?(ПрежнийПорядок = Неопределено, 9999, ПрежнийПорядок);
				КонецЦикла; 
				СмещениеДняПлана = СмещениеДняПлана + ПериодГрафика;
			КонецЦикла;
		КонецЕсли; 
		
		стзСостав.ПредставлениеПлана = ПредставлениеПлана(мДниПлана, ВсегоНедель, мДниНедели);
		
	КонецЦикла;
	
	СтррКонтекст.ТДПланПосещенийОбновить = Истина;
	ПППопыткаПеренумероватьПункты(Истина);
	
КонецПроцедуры

// Функция возвращает линейный массив итогов дней (сколько посещений на каждый день).
// В элементе массива с нулевым индексом возвращается полный итог по всем дням.
&НаСервере
Функция ПППолучитьИтогиДней()
	
	ВсегоДней = ПериодГрафикаПлана;
	мИтоги = Новый Массив(ВсегоДней+1); // массив итогов на каждый день
	Для Индекс = 1 По ВсегоДней Цикл
		мИтоги[Индекс] = 0;
	КонецЦикла;
	
	ПолынйИтог = 0;
	
	Для Каждого СтрокаТ Из ПланПосещений Цикл
		НомерДня = СтрокаТ.День;
		Если НомерДня <= ВсегоДней Тогда
		    мИтоги[НомерДня] = мИтоги[НомерДня] + 1;
			ПолынйИтог = ПолынйИтог + 1;
		КонецЕсли; 
	КонецЦикла;
	
	мИтоги[0] = ПолынйИтог;
	
	Возврат мИтоги;
	
КонецФункции

&НаСервере
Функция ТДППЦветаДляМакета()
	Возврат Новый Структура(""ЦветПервогоДня,ЦветПоследнегоДня,ЦветФона0,ЦветФона1"",
		Новый Цвет(204, 255, 204), Новый Цвет(255, 200, 200), Новый Цвет(-1,-1,-1), Новый Цвет(240,240,240));
КонецФункции

// Функция возвращает итог по колонке.
// Функция не подсчитывает итог, а возвращает значение итога из строки итогов дней.
// Аналогичный подход задействован в функции ТДППВернутьИтогиВсехДней().
&НаКлиенте
Функция ТДППВернутьИтогДня(Элемент)
	
	АдресОбласти = ""R""+Строка(СтррКонтекст.ППСтрокаИтогов) + ТДПолучитьАдресКолонки(Элемент.ТекущаяОбласть.Имя);
	ТекстЯчейки = ТДПланПосещений.Область(АдресОбласти).Текст;	
	Возврат ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки));
	
КонецФункции

// Функция возвращает массив итогов дней по колонкам.
// Функция не подсчитывает итоги, а возвращает значения итогов из строки итогов дней.
// В нулевом элементе массива возвращяется общий итог по всем дням.
&НаКлиенте
Функция ТДППВернутьИтогиВсехДней()
	
	мИтоги = Новый Массив(ПериодГрафикаПлана+1);
	ЧастьАдреса  = ""R"" + Строка(СтррКонтекст.ППСтрокаИтогов) + ""C"";
	НомерКолонки = СтррКонтекст.ППКолонкаИтогов; // колонка общего итога идет первой, после нее идут итоги по дням
	
	ДнейВПлане_1 = ПериодГрафикаПлана - 1;
	Для ИндексДня = 0 По ПериодГрафикаПлана Цикл
		ТекстЯчейки = ТДПланПосещений.Область(ЧастьАдреса + Строка(НомерКолонки+ИндексДня)).Текст;	
		мИтоги[ИндексДня] = ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки));
	КонецЦикла; 
	
	Возврат мИтоги;
	
КонецФункции

&НаКлиенте
Функция ТДПППерекраситьКолонку(АдресКолонки, ИтогКолонки = Неопределено)
	
	Если ИтогКолонки = Неопределено Тогда // нужно прочитать итог колонки из макета
		ИтогКолонки = ТДПППолучитьИтогКолонки(АдресКолонки);
	КонецЕсли; 
	
	Таб = ТДПланПосещений;
	стррЦвета = СтррКонтекст.ЦветаДляМакета;
	
	ЦветФона = ТДПланПосещений.Область(""R"" + Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонки).ЦветФона;
	Если ЦветФона.Вид = ВидЦвета.АвтоЦвет Тогда // цвет по умолчанию
		ЦветФона = Неопределено;
	КонецЕсли;
	
	ОтступСтр 		= СтррКонтекст.ППСтрокаИтогов + 1;
	ПоследняяСтрока = ОтступСтр + Состав.Количество() - 1;	
	
	Для Сч = ОтступСтр По ПоследняяСтрока Цикл
		АдресОбласти = ""R""+Строка(Сч) + АдресКолонки;
		Расшифровка = Таб.Область(АдресОбласти).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип(""Структура"") И Расшифровка.Свойство(""ЭтоПорядок"") Тогда
			Область = Таб.Область(АдресОбласти);
			ТекстЯчейки = Область.Текст;
			Если Не ПустаяСтрока(ТекстЯчейки) Тогда
				Порядок = Число(ТекстЯчейки);
				Если Порядок = 1 Тогда
					Область.ЦветФона = стррЦвета.ЦветПервогоДня;
				ИначеЕсли Порядок = ИтогКолонки Тогда
					Область.ЦветФона = стррЦвета.ЦветПоследнегоДня;
				ИначеЕсли ЦветФона <> Неопределено Тогда
					Область.ЦветФона = ЦветФона;
				Иначе
					Область.ЦветФона = ?(Сч % 2 = 0, стррЦвета.ЦветФона0, стррЦвета.ЦветФона1);
				КонецЕсли;
			ИначеЕсли ЦветФона <> Неопределено Тогда
				Область.ЦветФона = ЦветФона;
			Иначе
				Область.ЦветФона = ?(Сч % 2 = 0, стррЦвета.ЦветФона0, стррЦвета.ЦветФона1);
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ТДПППеренумероватьПорядокВКолонке(АдресКолонки, СписокСортировки)
	
	Таб = ТДПланПосещений;
	
	Если СписокСортировки = Неопределено Тогда
		СписокСортировки = Новый СписокЗначений;
	Иначе
		СписокСортировки.Очистить();
	КонецЕсли; 
	
	ОтступСтр 		= СтррКонтекст.ППСтрокаИтогов + 1;
	ПоследняяСтрока = ОтступСтр + Состав.Количество() - 1;
	НомерМаксПорядка = 10000;
	
	Для Сч = ОтступСтр По ПоследняяСтрока Цикл
		ТекстЯчейки = Таб.Область(""R""+Строка(Сч) + АдресКолонки).Текст;
		Если ТекстЯчейки = ""X"" Тогда // при режиме нумерации порядков этот знак используется как признак добавления нового пункта посещения
			Порядок = НомерМаксПорядка;
			НомерМаксПорядка = НомерМаксПорядка + 1;
		ИначеЕсли Не ПустаяСтрока(ТекстЯчейки) Тогда
			Порядок = Число(ТекстЯчейки);
		Иначе
			Порядок = 0;
		КонецЕсли; 
		Если Порядок <> 0 Тогда
			СписокСортировки.Добавить(Порядок, Строка(Сч));
		КонецЕсли; 
	КонецЦикла;
	
	Порядок = 0;
	СписокСортировки.СортироватьПоЗначению();
	Для каждого Элемент Из СписокСортировки Цикл
		Порядок = Порядок + 1;
		Область = Таб.Область(""R""+Число(Элемент.Представление) + АдресКолонки);
		Если Область.Текст <> Строка(Порядок) Тогда
			Область.Текст = Строка(Порядок);
		КонецЕсли; 
	КонецЦикла; 
	
	ТДПППерекраситьКолонку(АдресКолонки);
	
КонецПроцедуры

&НаКлиенте
Функция ТДПППолучитьИтогКолонки(АдресКолонки)
	ТекстЯчейки = ТДПланПосещений.Область(""R""+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонки).Текст;	
	Возврат ?(ПустаяСтрока(ТекстЯчейки), 0, Число(ТекстЯчейки));
КонецФункции

// Процедура очищает пункты посещений в ТД и перенумеровывает пункты маршрутов (если это требуется).
&НаКлиенте
Процедура ТДППОчиститьПосещенияДляОбласти()
	
	Перем НомерСтроки, НомерКолонки;
	Перем НомерПервойСтроки;
	
	Таб = ТДПланПосещений;
	ТДПолучитьНомераСтрокиИКолонкиОбласти(Таб.ТекущаяОбласть.Имя, НомерСтроки, НомерКолонки);
	
	МинНомерСтроки   = СтррКонтекст.ППСтрокаИтогов + 1;
	МаксНомерСтроки  = МинНомерСтроки + Состав.Количество() - 1;
	МинНомерКолонки  = СтррКонтекст.ППКолонкаИтогов + 1;
	МаксНомерКолонки = МинНомерКолонки + ПериодГрафикаПлана - 1;
	
	СписокСортировки = Неопределено;
	БылиИзменения = Ложь;
	
	АдресКолонкиИтогов = ""C"" + Строка(СтррКонтекст.ППКолонкаИтогов);	
	ИтогВсего = Число(Таб.Область(""R""+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонкиИтогов).Текст);
	
	Если ТипЗнч(НомерСтроки) = Тип(""Массив"") Тогда // выбран диапазон ячеек
		НомерНачСтроки  = Макс( НомерСтроки[0],  МинНомерСтроки);
		НомерКонСтроки  = Мин(  НомерСтроки[1],  МаксНомерСтроки);
		НомерНачКолонки = Макс( НомерКолонки[0], МинНомерКолонки);
		НомерКонКолонки = Мин(  НомерКолонки[1], МаксНомерКолонки);
	Иначе // выбрана одна ячейка
		НомерНачСтроки  = Макс( НомерСтроки,  МинНомерСтроки);
		НомерКонСтроки  = Мин(  НомерСтроки,  МаксНомерСтроки);
		НомерНачКолонки = Макс( НомерКолонки, МинНомерКолонки);
		НомерКонКолонки = Мин(  НомерКолонки, МаксНомерКолонки);
	КонецЕсли;
	
	// перед началом перебора колонок и строк нужно заполнить массив итогов по выденным строкам
	мИтогиСтрок = Новый Массив(НомерКонСтроки - НомерНачСтроки + 1);
	МаксИндекс = НомерКонСтроки - НомерНачСтроки;
	Для Индекс = 0 По МаксИндекс Цикл // перебор строк
		ТекстЯчейки = Таб.Область(""R"" + Строка(НомерНачСтроки+Индекс) + АдресКолонкиИтогов).Текст;
		мИтогиСтрок[Индекс] = ?(ТекстЯчейки = """", 0, Число(ТекстЯчейки));
	КонецЦикла;
	
	// очистка ячеек посещений
	Для Колонка = НомерНачКолонки По НомерКонКолонки Цикл // перебор колонок
		АдресКолонки = ""C"" + Строка(Колонка);
		ИтогКолонки = ТДПППолучитьИтогКолонки(АдресКолонки);
		ПрежнийИтогКолонки = ИтогКолонки;
		Для Индекс = 0 По МаксИндекс  Цикл // перебор строк
			Область = Таб.Область(""R""+Строка(НомерНачСтроки+Индекс) + АдресКолонки);
			Если Область.Текст <> """" Тогда
				ИтогКолонки = ИтогКолонки - 1;
				мИтогиСтрок[Индекс] = мИтогиСтрок[Индекс] - 1;
				Область.Текст = """";
			КонецЕсли; 
		КонецЦикла; 
		Если ПрежнийИтогКолонки <> ИтогКолонки Тогда
			БылиИзменения = Истина;
			ИтогВсего = ИтогВсего - ПрежнийИтогКолонки + ИтогКолонки;
			Таб.Область(""R"" + Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонки).Текст = ИтогКолонки;
			Если ИспользоватьПорядок Тогда
		    	ТДПППеренумероватьПорядокВКолонке(АдресКолонки, СписокСортировки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если БылиИзменения Тогда 
		// обновляем колонку итогов строк
		Для Индекс = 0 По МаксИндекс Цикл
			Таб.Область(""R""+Строка(НомерНачСтроки+Индекс) + АдресКолонкиИтогов).Текст = мИтогиСтрок[Индекс];
		КонецЦикла;
		// обновляем общий итог
		Таб.Область(""R""+Строка(СтррКонтекст.ППСтрокаИтогов) + АдресКолонкиИтогов).Текст = Строка(ИтогВсего);
		УстановитьМодифицированостьФормы(Истина);
		СтррКонтекст.ТДПланПосещенийИзменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переносит графики посещений в табличный документ (ТД) плана посещений.
// Список партнеров для переноса графиков определяется по текущей области ТД.
&НаКлиенте
Процедура ТДППЗаполнитьИзГрафикаПосещенийДляОбласти()
	
	Перем НомерСтроки, НомерКолонки;
	Перем мПартнеры, НомерПервойСтроки;
	
	Таб = ТДПланПосещений;
	ТДПолучитьНомераСтрокиИКолонкиОбласти(Таб.ТекущаяОбласть.Имя, НомерСтроки, НомерКолонки);
	
	// Получаем массив партнеров для выделенной области макета.
	
	НомерКолонкиПартнера = 4;
	мПартнеры = Новый Массив;
	
	Если ТипЗнч(НомерСтроки) = Тип(""Массив"") Тогда // выбран диапазон ячеек
		ТипСпрПартнеры = Тип(""СправочникСсылка."" + СтррКонтекст.СпрТоргТочкиВидСправочника);
		АдресКолонкиПартнера = ""C""+НомерКолонкиПартнера;
		Для Индекс = НомерСтроки[0] По НомерСтроки[1] Цикл
			Расшифровка = Таб.Область(""R""+Индекс + АдресКолонкиПартнера).Расшифровка;
			Если ТипЗнч(Расшифровка) = ТипСпрПартнеры Тогда
				мПартнеры.Добавить(Расшифровка);
				Если НомерПервойСтроки = Неопределено Тогда
					НомерПервойСтроки = Индекс;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
	Иначе
		Расшифровка = Таб.Область(""R""+НомерСтроки + ""C""+НомерКолонкиПартнера).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип(""СправочникСсылка.Партнеры"") Тогда
			мПартнеры.Добавить(Расшифровка);
			НомерПервойСтроки 	 = НомерСтроки;
		КонецЕсли; 
	КонецЕсли; 
	
	Если НомерПервойСтроки <> Неопределено Тогда 
		ТДППЗаполнитьИзГрафикаПосещенийДляПартнеров(мПартнеры, НомерПервойСтроки);
		СтррКонтекст.ТДПланПосещенийИзменен = Истина;
	Иначе // значит не найдено партнеров для выделенного диапазона ячеек (или для выделенной ячейки)
		ПоказатьПредупреждение(, НСтр(""ru = 'Выделите строки, где указаны партнеры, для которых нужно перенести график в план посещений.'""));
	КонецЕсли; 
	
КонецПроцедуры

// Процедура переносит графики посещений партнеров в план посещений.
&НаКлиенте
Процедура ТДППЗаполнитьИзГрафикаПосещенийДляПартнеров(мПартнеры = Неопределено, НомерПервойСтроки = Неопределено)

	Таб = ТДПланПосещений;	
	
	ИмяКолонки = СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	стррПоиск  = Новый Структура(ИмяКолонки);
	ДнейВПлане = ПериодГрафикаПлана; // номера дней графика нумеруются от 0 до N-1	
	
	мИтогиДней = ТДППВернутьИтогиВсехДней();
	ИтогВсего = мИтогиДней[0];
	
	мОбновитьДни = Новый Массив(ДнейВПлане + 1); // массив с отметками какие дни (колонки) нужно перенумеровать в плане, в случае использования порядка посещения
	
	КолонкаПервогоДня_1 = СтррКонтекст.ППКолонкаИтогов;
	БылиИзменения = Ложь;
	Индекс = -1;
	
	ЗаполнитьДляВсехПартнеров = (мПартнеры = Неопределено);
	Если ЗаполнитьДляВсехПартнеров Тогда // заполнение для всех партнеров - нужно перебрать все строки таблицы Состав 
	    Выборка = Состав;
		НомерПервойСтроки = СтррКонтекст.ППСтрокаИтогов + 1;
	Иначе // заполнение для партнеров, указанных в массиве мПартнеры
	    Выборка = мПартнеры;
	КонецЕсли; 
	
	Для Каждого Элемент Из Выборка Цикл // Цикл перебора партнеров
		
		Индекс = Индекс + 1;
		
		Если ЗаполнитьДляВсехПартнеров Тогда // идет перебор строк ТЗ ""Состав""
			стррГрафик = Элемент.График; 
		Иначе // идет перебор элементов массива мПартнеры
			стррПоиск[ИмяКолонки] = Элемент;
			мСтроки = Состав.НайтиСтроки(стррПоиск);
			Если мСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			стррГрафик = мСтроки[0].График;
		КонецЕсли; 
		
		Если стррГрафик <> Неопределено Тогда // график ТТ задан
			ВсегоДнейГрафика = стррГрафик.ПериодГрафика; // приодичность графика (длительность графика в днях)
			стррПункты 		 = стррГрафик.Пункты;
			//УчитыватьВремяПосещения = стррГрафик.УчитыватьВремяПосещения;	// пока не используется
		КонецЕсли; 
		
		ЧастьАдреса = ""R"" + Строка(НомерПервойСтроки + Индекс) + ""C"";
		
		// заполняем дни строки значениями
		ИтогСтроки = 0;
		
		Для ИндексДня = 1 По ДнейВПлане Цикл
			Область = Таб.Область(ЧастьАдреса + Строка(КолонкаПервогоДня_1 + ИндексДня));
			ПрежнееЗначение = Область.Текст;
			НовоеЗначение = """";
			Если стррГрафик <> Неопределено Тогда
				ИмяПункта = ""П"" + Строка((ИндексДня-1) % ВсегоДнейГрафика); // пункты нумеруются с нуля
				Если стррПункты.Свойство(ИмяПункта) Тогда // выбран день в графике
					НовоеЗначение = ""X"";
					ИтогСтроки = ИтогСтроки + 1;
				КонецЕсли; 
			КонецЕсли; 
			Если ИспользоватьПорядок И ПрежнееЗначение <> """" И НовоеЗначение <> """" Тогда // включен порядок посещений, новое значение должно по возможности не менять порядок
				НовоеЗначение = ПрежнееЗначение;
			КонецЕсли; 
			Область.Текст = НовоеЗначение;
			Если НовоеЗначение <> """" И ПрежнееЗначение = """" Тогда
				ИтогВсего = ИтогВсего + 1;
				мИтогиДней[ИндексДня] = мИтогиДней[ИндексДня] + 1;
				Если ИспользоватьПорядок И мОбновитьДни[ИндексДня] <> Истина Тогда
					мОбновитьДни[ИндексДня] = Истина;
				КонецЕсли;
				БылиИзменения = Истина;
			ИначеЕсли НовоеЗначение = """" И ПрежнееЗначение <> """" Тогда
				ИтогВсего = ИтогВсего - 1;
				мИтогиДней[ИндексДня] = мИтогиДней[ИндексДня] - 1;
				Если ИспользоватьПорядок И мОбновитьДни[ИндексДня] <> Истина Тогда
					мОбновитьДни[ИндексДня] = Истина;
				КонецЕсли;
				БылиИзменения = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Таб.Область(ЧастьАдреса + Строка(КолонкаПервогоДня_1)).Текст = ИтогСтроки; // обновляем итог строки
		
	КонецЦикла; 
	
	Если БылиИзменения Тогда
		СтррКонтекст.ТДПланПосещенийИзменен = Истина;
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
	// Обновляем итоги дней и общий итог
	ЧастьАдреса = ""R"" + Строка(СтррКонтекст.ППСтрокаИтогов) + ""C"";
	Таб.Область(ЧастьАдреса + СтррКонтекст.ППКолонкаИтогов).Текст = Строка(ИтогВсего);
	НомерКолонки = СтррКонтекст.ППКолонкаИтогов; // колонка общего итога идет первой, после нее идут итоги по дням
	Для ИндексДня = 1 По ДнейВПлане Цикл
		Таб.Область(ЧастьАдреса + Строка(КолонкаПервогоДня_1 + ИндексДня)).Текст = мИтогиДней[ИндексДня];
	КонецЦикла; 
	
	Если ИспользоватьПорядок Тогда
		// Перенумеровываем порядки и перекрашиваем колонки для тех дней, где это требуется
		СписокСортировки = Неопределено; // исользуется как внешний объект для ускорения сортировки порядков в процедуре ТДПППеренумероватьПорядокВКолонке()
		Для ИндексДня = 1 По ДнейВПлане Цикл
			Если мОбновитьДни[ИндексДня] = Истина Тогда
				ТДПППеренумероватьПорядокВКолонке(""C"" + Строка(КолонкаПервогоДня_1 + ИндексДня), СписокСортировки);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дату начала плана посещений для вывода в печатной форме с учетом выбора значения из списка ПериодВыводаПлана.
&НаСервере
Функция ТДПППолучитьДатуНачалаПериода()
	
	Возврат ПППолучитьДатуНачалаТекущегоПериода(ДатаНачала, ПериодГрафикаПлана) + ПериодВыводаПлана * ПериодГрафикаПлана * 86400;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПППолучитьДатуНачалаТекущегоПериода(ДатаНачала, ПериодГрафикаПлана)
	
	ПромДатаНачала = ?(ПериодГрафикаПлана = 7, НачалоНедели(ТекущаяДата()), ДатаНачала);
	РазницаДней = (НачалоДня(ТекущаяДата()) - ПромДатаНачала) / 86400;
	СмещениеОтНачалаПлана = РазницаДней % ПериодГрафикаПлана;
	
	Возврат НачалоДня(ТекущаяДата()) - СмещениеОтНачалаПлана * 86400;

КонецФункции

&НаКлиенте
Процедура СписокПериодовВыводаПланаОбновить()
	
	Если Не Элементы.СоставПланПосещений.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПериодовОтТекущего = 3;
	
	ВсегоПериодов = КоличествоПериодовОтТекущего * 2 + 1;
	мПериоды = Новый Массив(ВсегоПериодов);	
	НомерСреднегоПериода = КоличествоПериодовОтТекущего + 1;
	
	НачалоПериода = ПППолучитьДатуНачалаТекущегоПериода(ДатаНачала, ПериодГрафикаПлана) - ПериодГрафикаПлана * (НомерСреднегоПериода - 1) * 86400;
	Для Индекс = 1 По ВсегоПериодов Цикл
		СтрНачалоПериода = Формат(НачалоПериода, ""ДФ=""""дд.ММ"""""");
		СтрКонецПериода = Формат(НачалоПериода + (ПериодГрафикаПлана - 1) * 86400, ""ДФ=""""дд.ММ"""""");
		Если Индекс < НомерСреднегоПериода Тогда
			НазваниеПериода = НСтр(""ru = 'Предыдущий период'"");
		ИначеЕсли Индекс > НомерСреднегоПериода Тогда
			НазваниеПериода = НСтр(""ru = 'Следующий период'"");
		Иначе
			НазваниеПериода = НСтр(""ru = 'Текущий период'"");	
		КонецЕсли; 
		Смещение = Индекс - НомерСреднегоПериода;
		Если Смещение > -2 И Смещение < 2 Тогда
			СтрСмещение = """";
		ИначеЕсли Смещение < 0 Тогда
			СтрСмещение = "" "" + Строка(Смещение+1);
		Иначе
			СтрСмещение = "" +"" + Строка(Смещение-1);
		КонецЕсли; 
		мПериоды[Индекс-1] = НазваниеПериода + СтрСмещение + "" ("" + СтрНачалоПериода + "" - "" + СтрКонецПериода + "")"";
		НачалоПериода = НачалоПериода + ПериодГрафикаПлана * 86400;
	КонецЦикла; 
	
	Список = Элементы.ПериодВыводаПлана.СписокВыбора;
	Если Список.Количество() = 0 Тогда
		Для Индекс = 1 По ВсегоПериодов  Цикл
			Список.Добавить(Индекс-НомерСреднегоПериода, мПериоды[Индекс-1]);
		КонецЦикла; 
	Иначе
		Для Индекс = 0 По ВсегоПериодов-1  Цикл
			Список[Индекс].Представление = мПериоды[Индекс];
		КонецЦикла; 			
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ПланПосещений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ОбластиТабличногоДокумента

&НаКлиентеНаСервереБезКонтекста
Процедура ТДПолучитьНомераСтрокиИКолонкиОбласти(Адрес, НомерСтроки, НомерКолонки)
	
	ИндексРазделителя = Найти(Адрес, "":"");
	Если ИндексРазделителя = 0 Тогда // передан адрес ячейки
		ТДПолучитьНомераСтрокиИКолонки(Адрес, НомерСтроки, НомерКолонки);
	Иначе // передан адрес области, в переменных возвращаем массивы - первый элемент массива - адрес первого угла области, второй элемент - адрес второго угла области
		НомерСтроки  = Новый Массив(2);
		НомерКолонки = Новый Массив(2);
		ТДПолучитьНомераСтрокиИКолонки(Лев(Адрес, ИндексРазделителя-1),  НомерСтроки[0], НомерКолонки[0]);
		ТДПолучитьНомераСтрокиИКолонки(Сред(Адрес, ИндексРазделителя+1), НомерСтроки[1], НомерКолонки[1]);
	КонецЕсли; 
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ТДПолучитьНомераСтрокиИКолонки(Адрес, НомерСтроки = Неопределено, НомерКолонки = Неопределено)
	
	// передан адрес ячейки вида: RxCy
	ИндексС = Найти(Адрес, ""C"");
	НомерСтроки  = Число(Сред(Адрес, 2, ИндексС-2));
	НомерКолонки = Число(Сред(Адрес, ИндексС + 1));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТДПолучитьАдресПоСмещению(Адрес, СмещениеСтроки, СмещениеКолонки)
	
	// передан адрес ячейки вида: RxCy
	ИндексС = Найти(Адрес, ""C"");
	НомерСтроки  = Число(Сред(Адрес, 2, ИндексС-2));
	НомерКолонки = Число(Сред(Адрес, ИндексС + 1));
	Возврат ""R""+Строка(НомерСтроки + СмещениеСтроки) + ""C""+Строка(НомерКолонки + СмещениеКолонки) 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ТДПолучитьАдресаСтрокиИКолонки(Адрес, АдресСтроки = Неопределено, АдресКолонки = Неопределено)
	
	// передан адрес ячейки вида: RxCy
	ИндексС = Найти(Адрес, ""C"");
	АдресСтроки  = Лев(Адрес, ИндексС-1);
	АдресКолонки = Сред(Адрес, ИндексС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТДПолучитьАдресКолонки(Адрес)
	Возврат  Сред(Адрес, Найти(Адрес, ""C""));
КонецФункции

// СлужебныеПроцедурыИФункции_ОбластиТабличногоДокумента
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_KT2000_Alcohol_Trade

&НаСервереБезКонтекста
Функция ПолучитьВладельцаСправочника(ОбъектСсылка)
	
	Если Не ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Неопределено;
	Иначе
		Возврат ОбъектСсылка.ПолучитьОбъект().Владелец;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКонтрагентов(НачальнаяСтрока = 0)
	
	Если Состав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	Если НачальнаяСтрока = 0 Тогда
		Для каждого СтрокаТ Из Состав Цикл
			СтрокаТ.Контрагент = ПолучитьВладельцаСправочника(СтрокаТ.ПунктРазгрузки);
		КонецЦикла; 
	Иначе
		ПоследняяСтрока = Состав.Количество() - 1;
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			СтрокаТ = Состав[НомерСтроки];
			СтрокаТ.Контрагент = ПолучитьВладельцаСправочника(СтрокаТ.ПунктРазгрузки);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементыФормы()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	// Добавляем колонки в таблицу значений 'Состав'
	ИмяРеквизита 		= СтррКонтекст.СпрТоргТочки.тзИмяКолонки;
	ТипРеквизита 		= Новый ОписаниеТипов(""СправочникСсылка."" + СтррКонтекст.СпрТоргТочки.ВидСправочника);
	РодительРеквизита 	= ""Состав"";
	ЗаголовокРеквизита 	= СтррКонтекст.СпрТоргТочки.Представление;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, РодительРеквизита, ЗаголовокРеквизита));
	// Добавляем колонки в таблицу значений 'ПланПосещений'
	РодительРеквизита 	= ""ПланПосещений"";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, РодительРеквизита, ЗаголовокРеквизита));
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);	
	
	НоваяКолонка = Элементы.Добавить(СтррКонтекст.СпрТоргТочки.тзИмяЭлемента, Тип(""ПолеФормы""), Элементы.СоставГруппаКолонкаТоргТочка); 
	НоваяКолонка.ПутьКДанным = ""Состав."" + СтррКонтекст.СпрТоргТочки.тзИмяКолонки; 
	НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	
	КомандаФормы = Команды.Найти(""ПоказатьПартнеров"");
	КомандаФормы.Заголовок = СтррКонтекст.СпрТоргТочки.Синоним;
	КомандаФормы.Подсказка = ""Показать """""" + СтррКонтекст.СпрТоргТочки.Синоним + """""""";
	
	КомандаФормы = Команды.Найти(""ПодборПартнеров"");
	КомандаФормы.Заголовок = ""Из справочника """""" + СтррКонтекст.СпрТоргТочки.Синоним + """""""";
	КомандаФормы.Подсказка = ""Подбор из справочника """""" + СтррКонтекст.СпрТоргТочки.Синоним + """""""";
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_KT2000_Alcohol_Trade
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти
",
{4,15,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",11aafdb3-24f5-4e79-b06e-d7029a5a8b30}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ID",
{1,1,
{"ru","ID"}
},
{"Pattern",
{"#",fc01b5df-97fe-449b-83d4-218a090e681e}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"Наименование",
{1,1,
{"ru","Наименование"}
},
{"Pattern",
{"S",80,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"Комментарий",
{1,1,
{"ru","Комментарий"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ВсегоТочек",
{1,1,
{"ru","Всего точек"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"Состав",
{1,1,
{"ru","Состав списка ТТ"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,8,
{5,1,0,"Партнер",
{1,1,
{"ru","Торговая точка (партнер, клиент)"}
},
{"Pattern",
{"#",8f8a65b4-94c4-4794-b3e2-800d18d503ca}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"ПредставлениеГрафика",
{1,1,
{"ru","График посещений (желательный)"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Адрес",
{1,1,
{"ru","Адрес"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Контрагент",
{1,1,
{"ru","Контрагент"}
},
{"Pattern",
{"#",77cb1448-7b83-44c4-bbf7-e724077c459b}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Соглашение",
{1,1,
{"ru","Соглашение"}
},
{"Pattern",
{"#",757c1970-be45-4fff-8f8b-19eac6de058f}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"Организация",
{1,1,
{"ru","Организация"}
},
{"Pattern",
{"#",55adb97e-a84e-453e-8020-7665bb2abdef}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,7,0,"График",
{1,1,
{"ru","Свойства графика (структура)"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,8,0,"ПредставлениеПлана",
{1,1,
{"ru","План посещений партнера"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{7},0,"СтррКонтекст",
{1,0},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{8},0,"Детализация",
{1,1,
{"ru","Детализация"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,1,"ElementType",
{"#",f5c65050-3bbb-11d5-b988-0050bae0a95d,
{"Pattern",
{"S"}
}
}
},
{0,0}
},
{9,
{9},0,"СтррКопияГрафика",
{1,1,
{"ru","Стрр копия графика"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{10},0,"ПланПосещений",
{1,1,
{"ru","План посещений"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,5,
{5,1,0,"Партнер",
{1,1,
{"ru","Торговая точка (партнер, клиент)"}
},
{"Pattern",
{"#",8f8a65b4-94c4-4794-b3e2-800d18d503ca}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"День",
{1,1,
{"ru","Номер дня маршрута"}
},
{"Pattern",
{"N",5,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Порядок",
{1,1,
{"ru","Порядок"}
},
{"Pattern",
{"N",4,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Время",
{1,1,
{"ru","Планируемое время посещения"}
},
{"Pattern",
{"D","T"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"Комментарий",
{1,1,
{"ru","Комментарий к пункту маршрута"}
},
{"Pattern",
{"S",255,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{11},0,"ТДПланПосещений",
{1,1,
{"ru","План посещений"}
},
{"Pattern",
{"#",e603103e-a318-4edc-a014-b1c6cf94d49f}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{12},0,"ПериодГрафикаПлана",
{1,1,
{"ru","Период графика/плана"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ДатаНачала",
{1,1,
{"ru","Дата начала"}
},
{"Pattern",
{"D","D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,1,0,
{0,0},
{0,0}
},
{9,
{14},0,"ИспользоватьПорядок",
{1,1,
{"ru","Использовать порядок"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"ПериодВыводаПлана",
{1,1,
{"ru","Период вывода плана"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},1,
{0,
{2,
{6},
{7}
},0},0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,15,
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьГлавнуюФорму",
{1,1,
{"ru","На главную"}
},
{1,1,
{"ru","Перейти на главную страницу"}
},
{0,
{0,
{"B",1},0}
},
{0,77,8},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПоказатьГлавнуюФорму",3,0,0,
{0,0},1,0,1,0,0},
{8,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Сохранить",
{1,1,
{"ru","Сохранить"}
},
{1,1,
{"ru","Сохранить все изменения"}
},
{0,
{0,
{"B",1},0}
},
{0,83,8},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаСохранить",3,0,0,
{0,0},1,0,1,0,0},
{8,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьСпискиТТ",
{1,1,
{"ru","Списки торговых точек"}
},
{1,1,
{"ru","Показать списки торговых точек"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПоказатьСпискиТТ",3,0,0,
{0,0},1,0,1,0,0},
{8,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьПартнеров",
{1,1,
{"ru","Партнеры (клиенты)"}
},
{1,1,
{"ru","Показать список партнеров (клиентов)"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПоказатьПартнеров",3,0,0,
{0,0},1,0,1,0,0},
{8,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОбновитьПланГрафик",
{1,1,
{"ru","Обновить план график"}
},
{1,1,
{"ru","Обновить план график"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ОбновитьПланГрафик",3,0,0,
{0,0},1,0,1,0,0},
{8,
{6,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ИзменитьДетализациюСТТ",
{1,1,
{"ru","Изменить детализацию списка торговых точек"}
},
{1,1,
{"ru","Изменить детализацию списка торговых точек"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаИзменитьДетализациюСТТ",3,0,0,
{0,0},1,0,1,0,0},
{8,
{8,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПодборПартнеров",
{1,1,
{"ru","Из справочника ""Партнеры"""}
},
{1,1,
{"ru","Подбор партнеров"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПодборПартнеров",3,0,0,
{0,0},1,0,1,0,0},
{8,
{7,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПоказатьТорговыхАгентов",
{1,1,
{"ru","Торговые агенты"}
},
{1,1,
{"ru","Показать торговых агентов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПоказатьТорговыхАгентов",3,0,0,
{0,0},1,0,1,0,0},
{8,
{9,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"КопироватьГрафик",
{1,1,
{"ru","Копировать график"}
},
{1,1,
{"ru","Копировать график"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаКопироватьГрафик",3,0,0,
{0,0},1,0,1,0,0},
{8,
{10,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПрименитьСкопированныйГрафик",
{1,1,
{"ru","Применить скопированный график"}
},
{1,1,
{"ru","Применить скопированный график"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПрименитьСкопированныйГрафик",3,0,0,
{0,0},1,0,1,0,0},
{8,
{11,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ТДППЗаполнитьИзГрафика",
{1,1,
{"ru","Заполнить выбранные строки из графика посещений"}
},
{1,1,
{"ru","Заполнить из графика посещений торговой точки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаТДППЗаполнитьИзГрафика",3,0,0,
{0,0},1,0,1,0,0},
{8,
{12,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ТДППЗаполнитьВсеИзГрафика",
{1,1,
{"ru","Заполнить все строки из графиков посещений"}
},
{1,1,
{"ru","Заполнить из графика посещений торговой точки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаТДППЗаполнитьВсеИзГрафика",3,0,0,
{0,0},1,0,1,0,0},
{8,
{13,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ТДППОчиститьОбласть",
{1,1,
{"ru","Очистить выделенные посещения"}
},
{1,1,
{"ru","Заполнить из графика посещений торговой точки"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаТДППОчиститьОбласть",3,0,0,
{0,0},1,0,1,0,0},
{8,
{14,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПеренестиГрафикВПланПосещений",
{1,1,
{"ru","Перенести график в план посещений"}
},
{1,1,
{"ru","Перенести график в план посещений"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПеренестиГрафикВПланПосещений",3,0,0,
{0,0},1,0,1,0,0},
{8,
{15,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПодборПоОсновномуМенеджеру",
{1,1,
{"ru","По ""Основному менеджеру"""}
},
{1,1,
{"ru","Подбор по основному менеджеру"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"КомандаПодборПоОсновномуМенеджеру",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}