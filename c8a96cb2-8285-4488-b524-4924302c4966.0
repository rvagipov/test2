{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррКонтекст = Новый Структура(""ЗначениеБезТочности,РегионГеокодера"");
	
	СтррКонтекст.ЗначениеБезТочности = 99; // чтобы при интерактивной ""сортировке по точности"" таблицы координат, координаты без точности были в конце
	СтррКонтекст.РегионГеокодера = """";
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой. Будет инициализирована, как только потребуется
	СтррКонтекст.Вставить(""МаксимальноеРасстояниеОтТТ"", Неопределено); 

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ЗаполнитьСписокДоступныхКарт(Список) Экспорт

	Список.Очистить();
	Список.Добавить(""OSM"", ""Open street maps"");
	Список.Добавить(""YandexMaps"", ""Yandex-карты"");
	Список.Добавить(""GoogleMaps"", ""Google maps"");

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗапросКВебСервису(Знач url = Неопределено, ВебЗапрос, ВернутьJSONСтруктуру = Ложь) Экспорт
	
	СертификатКлиентаWindows = Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать);
	СертификатыУдостоверяющихЦентровWindows = Новый СертификатыУдостоверяющихЦентровWindows();
	ssl = Новый ЗащищенноеСоединениеOpenSSL(СертификатКлиентаWindows, СертификатыУдостоверяющихЦентровWindows);
	Если url = Неопределено Тогда
		url = ""geocode-maps.yandex.ru"";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(url,,,,,, ssl);
	HTTPЗапрос = Новый HTTPЗапрос(ВебЗапрос);	
	
	ОписаниеОшибки = """";
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр(""ru = 'Ошибка обращения к веб-сервису. '"") + ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;

	Если Не ВернутьJSONСтруктуру Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат ПреобразоватьСтрокуВJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли; 

КонецФункции

// Перенос (чтение) данных из строки JSON в структуру.
&НаКлиенте
Функция ПреобразоватьСтрокуВJSON(Строка)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		ПромРезультат = ПрочитатьJSON(ЧтениеJSON);
		Если ТипЗнч(ПромРезультат) <> Тип(""Структура"") И ПромРезультат <> Неопределено Тогда
			Результат = Новый Структура(""JSON"", ПромРезультат);
		Иначе
			Результат = ПромРезультат;
		КонецЕсли;
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоординатыПользователя() Экспорт
	
	стррОтвет = ВыполнитьЗапросКВебСервису(""api.sypexgeo.net"", """", Истина);
	
	Если ТипЗнч(стррОтвет) = Тип(""Структура"") И стррОтвет.Свойство(""city"") И стррОтвет.city.Свойство(""lat"") И стррОтвет.city.Свойство(""lon"") Тогда
		стррРезультат = Новый Структура(""Широта,Долгота,Город,Регион"", 
		  		КоординатаИзWGS84вNMEA(стррОтвет.city.lat),
				КоординатаИзWGS84вNMEA(стррОтвет.city.lon)
			);
		стррОтвет.city.Свойство(""name_ru"", стррРезультат.Город);
		Если стррОтвет.Свойство(""region"") Тогда
			стррОтвет.region.Свойство(""name_ru"", стррРезультат.Регион);
		КонецЕсли
	Иначе
		стррРезультат = Неопределено;
	КонецЕсли; 
	
	Возврат стррРезультат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМестоположениеПользователя() Экспорт
	
	стррОтвет = ВыполнитьЗапросКВебСервису(""api.sypexgeo.net"", """", Истина);
	
	стррРезультат = Новый Структура;	
	
	Если ТипЗнч(стррОтвет) = Тип(""Структура"") Тогда
		
		Если стррОтвет.Свойство(""city"")  Тогда
			стррРезультат.Вставить(""city_ru"", стррОтвет.city.name_ru);
			стррРезультат.Вставить(""city_en"", стррОтвет.city.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство(""country"")  Тогда
			стррРезультат.Вставить(""country_ru"", стррОтвет.country.name_ru); 
			стррРезультат.Вставить(""country_en"", стррОтвет.country.name_en);
		КонецЕсли; 
		
		Если стррОтвет.Свойство(""region"")  Тогда
			стррРезультат.Вставить(""region_ru"", стррОтвет.region.name_ru); 
			стррРезультат.Вставить(""region_en"", стррОтвет.region.name_en);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если стррРезультат.Количество() = 0 Тогда
		стррРезультат = Неопределено;
	КонецЕсли; 
	
	Возврат стррРезультат;
	
КонецФункции

// Функция возвращает код страны местоположения пользователя.
// Возвращамое значение - строка - код страны:
//		""RU"" - Россия
//		""UA"" - Украина
&НаКлиенте
Функция КодСтраныМестоположения(Знач стррМестоположение = Неопределено) Экспорт

	Результат = ""RU"";	
	
	Если ТипЗнч(стррМестоположение) <> Тип(""Структура"") Тогда	
		стррМестоположение = ПолучитьМестоположениеПользователя();
	КонецЕсли; 
	
	Если ТипЗнч(стррМестоположение) = Тип(""Структура"") Тогда
		СтранаКод = Лев(СокрЛП(НРег(стррМестоположение.country_ru)), 3) + Лев(СокрЛП(НРег(стррМестоположение.country_en)), 3);
		Если Найти(СтранаКод, ""укр"") <> 0 Или Найти(СтранаКод, ""ukr"") <> 0 Тогда 
			Результат = ""UA"";
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

// Функция возвращает город местоположения пользователя.
&НаКлиенте
Функция ГородМестоположения(Знач стррМестоположение = Неопределено) Экспорт

	Результат = """";	
	
	Если ТипЗнч(стррМестоположение) <> Тип(""Структура"") Тогда	
		стррМестоположение = ПолучитьМестоположениеПользователя();
	КонецЕсли; 
	
	Если ТипЗнч(стррМестоположение) = Тип(""Структура"") Тогда
		Результат = стррМестоположение.city_ru;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

// Функция возвращает строку адреса по переданным координатам.
// Параметры:
// 		стррКоординаты - Структура - структура со свойствами Широта и Долгота
// 		КонвертироватьИзNMEA - Булево - координаты в строктуре переданы в формате NMEA, иначе - в формате WGS84
// 		ВернутьТочныйАдрес - Булево - Если Истина - возвращать точный адрес, иначе - возвращать только название локации (населенного пункта).
// Возвращаемое значение: строка адреса.
&НаКлиенте
Функция ПолучитьАдресПоКоординатамОтВебСервиса(стррКоординаты, КонвертироватьИзNMEA = Ложь, ВернутьТочныйАдрес = Ложь) Экспорт

	СтрШирота  = ?(КонвертироватьИзNMEA, ЧислоВСтроку(КонвертироватьNMEAWGS84(стррКоординаты.Широта)),  ЧислоВСтроку(стррКоординаты.Широта));
	СтрДолгота = ?(КонвертироватьИзNMEA, ЧислоВСтроку(КонвертироватьNMEAWGS84(стррКоординаты.Долгота)), ЧислоВСтроку(стррКоординаты.Долгота));
	
	ВебЗапрос  = ""1.x/?geocode="" + СтрДолгота + "","" + СтрШирота + ?(ВернутьТочныйАдрес, """", ""&kind=locality"");
	
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	
	//Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Результат = Неопределено;
	
	ИскатьЗначение = ?(ВернутьТочныйАдрес, ""addressline"", ""text"");

	//Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если НРег(ИмяПараметра) = ИскатьЗначение Тогда
			ЧтениеОтвета.Прочитать();
			Результат = СокрЛП(ЧтениеОтвета.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучтьКоординатыОтВебСервиса(Знач Адрес, ВернутьОдинАдрес) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВебЗапрос = ""1.x/?geocode="" + ПреобразоватьСтрокуВУТФ8(Адрес) + СтррКонтекст.РегионГеокодера;
		
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 

	// для ускорения циклов
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	БезТочности = СтррКонтекст.ЗначениеБезТочности;		
	
	СписокАдресов = Новый СписокЗначений;
	
	//Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Адрес = """"; 
	СтрТочность = """";
	Точность = БезТочности;
	Координаты = Неопределено;
	
	//Чтение XML строки
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяПараметра = ""text"" Тогда
			Если ЗначениеЗаполнено(Адрес) Тогда
				СписокАдресов.Добавить(Координаты + "" "" + Точность, Адрес + СтрТочность);
				Если ВернутьОдинАдрес И СписокАдресов.Количество() > 1 Тогда // возвращаем первый найденный адрес
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
			ЧтениеОтвета.Прочитать();
			Адрес = СокрЛП(ЧтениеОтвета.Значение);
			Точность = БезТочности;
		ИначеЕсли ИмяПараметра = ""precision"" Тогда
			ЧтениеОтвета.Прочитать();
			Значение = СокрЛП(ЧтениеОтвета.Значение);
			Если Значение = ""exact"" Тогда
				Точность = 1;
				СтрТочность = """";
			ИначеЕсли Значение = ""number"" Тогда
				Точность = 2;
				СтрТочность = "" *"";
			ИначеЕсли Значение = ""street"" Тогда
				Точность = 3;
				СтрТочность = "" **"";
			Иначе
				Точность = 4;
				СтрТочность = "" ***"";
			КонецЕсли; 
		ИначеЕсли ИмяПараметра = ""pos"" Тогда
			ЧтениеОтвета.Прочитать();
			Координаты = КонвертироватьWGS84NMEA(СокрЛП(ЧтениеОтвета.Значение));
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеОтвета.Закрыть();

	Если ЗначениеЗаполнено(Адрес) Тогда	
		СписокАдресов.Добавить(Координаты  + "" "" + Точность, Адрес + СтрТочность);
		Если ВернутьОдинАдрес Тогда // возвращаем первый найденный адрес
			ЭлементСписка = СписокАдресов[0];
			Если СписокАдресов.Количество() > 1 Тогда // нужно исправить данные о точности
				КоординатыИТочность = Лев(ЭлементСписка.Значение, СтрДлина(ЭлементСписка.Значение) - 1) + ""5"";
			Иначе
				КоординатыИТочность = ЭлементСписка.Значение;
			КонецЕсли; 
			Возврат Новый Структура(""Координаты,Адрес"", КоординатыИТочность, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ?(ВернутьОдинАдрес Или СписокАдресов.Количество() = 0, Неопределено, СписокАдресов);
	
КонецФункции

// Процедура устаналвивает регион для приоритета геокодирования.
// Параметры:
// 		стррРегион - Структура - свойства структуры:
// 			Широта, Долгота - Число - координаты центра региона в формате NMEA
// 			Ширина, Высота  - Число - (не обязательно) - ширина и высота региона в градусах в формате WGS84. Если не указано, то значения 2x2
//
&НаКлиенте
Процедура УстановитьРегионГеокодера(стррРегион) Экспорт

	Если стррРегион = Неопределено Тогда
		СтррКонтекст.РегионГеокодера = """";
	Иначе
		стрШирота  = ЧислоВСтроку(Окр(КонвертироватьNMEAWGS84(стррРегион.Широта), 2)); // координаты центра региона
		стрДолгота = ЧислоВСтроку(Окр(КонвертироватьNMEAWGS84(стррРегион.Долгота), 2));
		Если стррРегион.Свойство(""Ширина"") И стррРегион.Свойство(""Высота"") Тогда // ширина и высота региона, значения в градусах WGS84
			стрРазмер = ЧислоВСтроку(стррРегион.Ширина) + "","" + ЧислоВСтроку(стррРегион.Высота);
		Иначе
			стрРазмер = ""2,2"";
		КонецЕсли; 
		СтррКонтекст.РегионГеокодера = ""&ll="" + стрДолгота + "","" + стрШирота + ""&spn="" + стрРазмер;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Функция ДействиеВДопустимойЗоне(ШиротаЦентрЗоны, ДолготаЦентрЗоны, Широта, Долгота) Экспорт
	
	Если СтррКонтекст.МаксимальноеРасстояниеОтТТ = Неопределено Тогда
		ПрочестьНастройкиИзХранилища();
	КонецЕсли;
	
	Если СтррКонтекст.МаксимальноеРасстояниеОтТТ = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ШиротаЦентрЗоны) И ЗначениеЗаполнено(ДолготаЦентрЗоны) И ЗначениеЗаполнено(Широта) И ЗначениеЗаполнено(Долгота) Тогда
		Широта1  = ЗначениеВЧисло(ШиротаЦентрЗоны);
		Долгота1 = ЗначениеВЧисло(ДолготаЦентрЗоны);
		Широта2  = ЗначениеВЧисло(Широта);
		Долгота2 = ЗначениеВЧисло(Долгота);
		Возврат СтррКонтекст.МаксимальноеРасстояниеОтТТ >= РасстояниеМеждуТочкамиNMEA(Широта1, Долгота1, Широта2, Долгота2);
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РасстояниеМеждуТочкамиNMEA(Широта1, Долгота1, Широта2, Долгота2) Экспорт
	
	Шрт1 = КонвертироватьNMEAWGS84(Широта1);
	Шрт2 = КонвертироватьNMEAWGS84(Широта2);
	Длг1 = КонвертироватьNMEAWGS84(Долгота1);
	Длг2 = КонвертироватьNMEAWGS84(Долгота2);
	
	Возврат РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСкриптКарты(ИдентификаторКарты) Экспорт
	Возврат ПолучитьТекстМакетаКарты(ИдентификаторКарты);
КонецФункции

&НаКлиенте
Процедура СохранитьЦентрКартыКлиент(стррЦентр) Экспорт
	
	СохранитьЦентрКарты(стррЦентр);
	
КонецПроцедуры

// ПрограммныйИнтерфейс
#КонецОбласти 

#Область КонверсияЗначений

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтрокуВУТФ8(Стр)

	Длина = СтрДлина(Стр);
	Результат = """";
	
	Для Н = 1 По Длина Цикл
		Знак = Сред(Стр, Н, 1);
		Код = КодСимвола(Знак);
		Если Код = 32 Тогда
			Результат = Результат + СимволВ16(Знак);
		ИначеЕсли Код < 128 Тогда
			Результат = Результат + Знак;
		Иначе
			Если (Код >= КодСимвола(""А"")) И (Код <= КодСимвола(""п"")) Тогда
				Результат = Результат + СимволВ16(Символ(208)) + СимволВ16(Символ(144 + Код - КодСимвола(""А"")));
			ИначеЕсли (Код >= КодСимвола(""р"")) И (Код <= КодСимвола(""я"")) Тогда
				Результат = Результат + СимволВ16(Символ(209)) + СимволВ16(Символ(128 + Код - КодСимвола(""р"")));
			ИначеЕсли (Знак = ""ё"") Тогда
				Результат = Результат + СимволВ16(Символ(209)) + СимволВ16(Символ(145));
			ИначеЕсли (Знак = ""Ё"") Тогда
				Результат = Результат + СимволВ16(Символ(208)) + СимволВ16(Символ(129));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СимволВ16(Символ)
	Возврат ""%"" + ПереводЧислаВСистемуСчисления16(КодСимвола(Символ));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПереводЧислаВСистемуСчисления16(Знач Значение)

	Значение = Цел(Значение);
	Результат = """";
	Пока Значение > 0 Цикл
		Результат = Сред(""0123456789ABCDEF"", Значение % 16 + 1, 1) + Результат;
		Значение = Цел(Значение / 16);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), "" "", """"), "","", ""."");
	
КонецФункции

// Конвертирует переданные координаты из формата WGS84 в формат NMEA. 
//
//  Параметры:
//   стрКоординаты - строка с координатами вида ""<Долгота> <Широта>"" (в такой последовательности координаты возвращает geocoder Yandex)
//
//  Возвращаемое значение:
//   Результат - Строка - строка из координат, разделенных пробелом в формате ""<Широта> <Долгота>""
//
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьWGS84NMEA(стрКоординаты)

	Результат = """";
	
	Индекс = Найти(стрКоординаты, "" "");
	Если Индекс <> 0 Тогда
		ДолготаWGS84 = Число(Лев(стрКоординаты, Индекс-1));
		ШиротаWGS84  = Число(Сред(стрКоординаты, Индекс+1));
		Долгота = КоординатаИзWGS84вNMEA(ДолготаWGS84);
		Широта 	= КоординатаИзWGS84вNMEA(ШиротаWGS84);
		Результат = СтрЗаменить(Строка(Широта), "" "", """") + "" "" + СтрЗаменить(Строка(Долгота), "" "", """");		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоординатаИзWGS84вNMEA(Координата)
	
	Возврат Цел(Координата)*100 + (Координата-Цел(Координата)) * 60;
	
КонецФункции

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

// Возвращает строку-представление координат в читабельном для пользователя виде.
// Координаты передаются в формате NMEA.
&НаКлиентеНаСервереБезКонтекста
Функция NMEAвСтроку(Коор)
	
	Ч = Цел(Коор / 100);
	М = Цел(Коор - 100*Ч);
	С = Окр((Коор - Цел(Коор))*60, 2);
	ЧСтр = Строка(Ч);
	МСтр = Формат(М, ""ЧЦ=2;ЧВН=;ЧН="");
	ССтр = Формат(С, ""ЧЦ=4;ЧДЦ=2;ЧРД=.;ЧВН=;ЧН="");
	
	Возврат ЧСтр + ""°"" + МСтр + ""'"" + ССтр + """""""";
	
КонецФункции

// Функция конвертирует координаты из NMEA в WGS84 и возвращает их строковое представление.
&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоординатWGS84(Широта, Долгота) Экспорт
	
	Если Широта = 0 И Долгота = 0 Тогда
		Возврат ""Координаты не указаны."";	
	Иначе
		Возврат ""Широта: "" + NMEAвСтроку(Широта) + ""; Долгота: "" + NMEAвСтроку(Долгота);	
	КонецЕсли;                     

КонецФункции 

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	стрЧисло = """";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			стрЧисло = стрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ ""."" или "",""
			стрЧисло = стрЧисло + ""."";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(стрЧисло), 0, Число(стрЧисло));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВЧисло(Значение)
	
	Возврат ?(ЗначениеЗаполнено(Значение), СтрокуВЧисло(Значение), 0);
	
КонецФункции

// КонверсияЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьТекстМакетаКарты(ИдентификаторКарты)
	
	Результат = """";	
	
	Если ЗначениеЗаполнено(ИдентификаторКарты) Тогда
		Макет = РеквизитФормыВЗначение(""Объект"").ПолучитьМакетОбработки(""Карта"" + ИдентификаторКарты);
		Если Макет <> Неопределено Тогда
			Результат = Макет.ПолучитьТекст();
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЦентрКарты(стррЦентр)
	
	РеквизитФормыВЗначение(""Объект"").СохранитьЗначениеНастройки(""КартаЦентр"", стррЦентр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong)
	//Pi = 3.1415926535897932;

 // Передаваемые широта/долгота в градусах и сотых долях 
 //StartLat: double; // Начальная широта 
 //StartLong: double; // Начальная долгота 
 //EndLat: double; // Конечная широта 
 //EndLong: double; // Конечная долгота 

 //// Переменные, используемые для вычисления смещения и расстояния 
 //fPhimean: Double; // Средняя широта 
 //fdLambda: Double; // Разница между двумя значениями долготы 
 //fdPhi: Double; // Разница между двумя значениями широты 
 //fAlpha: Double; // Смещение 
 //fRho: Double; // Меридианский радиус кривизны 
 //fNu: Double; // Поперечный радиус кривизны 
 //fR: Double; // Радиус сферы Земли 
 //fz: Double; // Угловое расстояние от центра сфероида 
 //fTemp: Double; // Временная переменная, использующаяся в вычислениях 
 //Distance: Double; // Вычисленное расстояния в метрах 
 //Bearing: Double; // Вычисленное от и до смещение 

	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
 
	 // Константы, используемые для вычисления смещения и расстояния 
	 D2R = 0.017453; // Константа для преобразования градусов в радианы 
	 R2D = 57.295781; // Константа для преобразования радиан в градусы 
	 a = 6378137.0; // Основные полуоси 
	 b = 6356752.314245; // Неосновные полуоси 
	 e2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	 f = 0.003352810664747; // Выравнивание эллипсоида 

	 fdLambda = (StartLong - EndLong) * D2R; 
	 fdPhi = (StartLat - EndLat) * D2R; 
	 fPhimean = ((StartLat + EndLat) / 2.0) * D2R; 

	 // Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	 fTemp = 1 - e2 * (Pow(Sin(fPhimean), 2)); 
	 fRho = (a * (1 - e2)) / Pow(fTemp, 1.5); 
	 fNu = a / (Sqrt(1 - e2 * (Sin(fPhimean) * Sin(fPhimean)))); 

	 // Вычисляем угловое расстояние 
	 fz = Sqrt(Pow(Sin(fdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(fdLambda / 2.0), 2)); 

	 fz = 2 * ASin(fz); 

	 // Вычисляем смещение 
	 fAlpha = Cos(EndLat * D2R) * Sin(fdLambda) * 1 / Sin(fz);
	 
	Если fAlpha > 1 Тогда
		fAlpha = 1;
	ИначеЕсли fAlpha < -1 Тогда
		fAlpha = -1;
	КонецЕсли;
	
	 fAlpha = ASin(fAlpha); 

	 // Вычисляем радиус Земли 
	 fR = (fRho * fNu) / ((fRho * Pow(Sin(fAlpha), 2)) + (fNu * Pow(Cos(fAlpha), 2))); 

	 // Получаем смещение и расстояние 
	 Distance = (fz * fR); 
	 
	Возврат Distance;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочестьНастройкиИзХранилища()
	
	ТекОбъект = РеквизитФормыВЗначение(""Объект"");
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой
	СтррКонтекст.МаксимальноеРасстояниеОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки(""МаксимальноеРасстояниеОтТТ""); 
	
КонецПроцедуры
	
// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",11aafdb3-24f5-4e79-b06e-d7029a5a8b30}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,65,
{1,
{0,035519b6-283b-4d3d-888c-da4a85f7a2b2}
},
{1,
{0,073cef95-b9b8-47b8-90b8-f59ce4182680}
},
{1,
{0,0a2334cd-2ed8-4a84-9a18-be247e4c97e3}
},
{1,
{0,10806675-b00b-48c1-b847-ce028341a82a}
},
{1,
{0,12783d31-92f9-4f3b-a473-8bbfcad30e23}
},
{1,
{0,14c691f3-a1d2-46d3-ab9e-e76a894b3ab0}
},
{1,
{0,1a858bfa-f0e5-4feb-9af1-1d50c23561b4}
},
{1,
{0,1ae9fdbe-6908-4ce3-adb8-56af6b72b933}
},
{1,
{0,1e792d28-2d0f-4847-a27f-74f75b65d5de}
},
{1,
{0,20184aa3-39dc-48a7-b57d-a931cf59c167}
},
{1,
{0,22b6d096-e670-42a2-ae1f-e6813e84f186}
},
{1,
{0,251ea7e0-f540-4302-9b00-d2594c81c020}
},
{1,
{0,26cf86dd-ad5b-4e83-869d-f7353feb1a4e}
},
{1,
{0,27c34226-d4ef-4293-98ea-ac4f2dca4353}
},
{1,
{0,2f6b2397-be2c-4487-8c06-e5dfb211946d}
},
{1,
{0,2f7ae5d6-b8b2-4d77-a2e3-4f28531d1d12}
},
{1,
{0,3078f058-e12b-4dfa-b47e-5d8813c808ba}
},
{1,
{0,320386d8-c385-4598-9685-f7e85569e6ad}
},
{1,
{0,39550507-e8ae-476b-9775-0eb27ab08a9d}
},
{1,
{0,3b1b57da-4db5-49bc-9a2f-251bdd7fa0ae}
},
{1,
{0,4325c570-4315-41e6-89db-28df8d8b006e}
},
{1,
{0,4ed6d676-6837-4db7-8889-ed6ee00ab3bb}
},
{1,
{0,54fc2d57-8a97-4564-bdce-66bade42759b}
},
{1,
{0,54fc7ef9-671f-4f9e-a18a-c35f2b635028}
},
{1,
{0,66fb4c2f-5fb7-4793-81cd-710b48d1038c}
},
{1,
{0,6925324a-0291-4c1e-a4f0-005f571b01d3}
},
{1,
{0,70740ac1-7633-463b-95ab-9cd16042b244}
},
{1,
{0,7227e684-0794-40df-bcea-57ce762758fb}
},
{1,
{0,74391f21-1e5e-42ef-b5f7-ab1dfb82b6c7}
},
{1,
{0,75711610-a3a4-413f-bd31-c635e524e177}
},
{1,
{0,75a79cac-9e7d-4476-9fed-40d65cf88032}
},
{1,
{0,79ac3497-d3c9-4282-8847-8f7190d59d42}
},
{1,
{0,7be727dd-4b8a-491b-8f8e-6bfe8a46fc0f}
},
{1,
{0,7cfc0154-de3b-4084-8fe1-e0f1972369f5}
},
{1,
{0,812ac02d-7947-410f-a3b2-5f8317a6bf7b}
},
{1,
{0,8d864ce9-0f39-4a76-a2b3-3512e9b69b95}
},
{1,
{0,90d72e62-b9c2-47b2-80f2-e7eed804c796}
},
{1,
{0,9249e869-fdb3-4d1c-973d-58dfc7a37356}
},
{1,
{0,9339a4ee-50d9-4261-89c2-759634a6c406}
},
{1,
{0,9639b0b4-8104-4fdd-82cf-ef6ffdd6b285}
},
{1,
{0,976b280e-ddcf-40ba-9a73-cd5ccada983f}
},
{1,
{0,9e62c60d-159b-4fed-bfd6-57bb745602ae}
},
{1,
{0,a03e1128-9019-4942-a95e-cb65f8e7cd0d}
},
{1,
{0,a4f94e5b-c06b-488f-bf34-a49dc0fbb1a1}
},
{1,
{0,a55ac33b-9ca2-4bcd-ac1b-bf1be798fae5}
},
{1,
{0,a68c9552-6435-45d4-a979-44faf9355602}
},
{1,
{0,a75bbcf5-68ee-4be0-9c33-00a33403b18b}
},
{1,
{0,aeb7cd97-c195-457b-9f84-3df7dcc5ec0b}
},
{1,
{0,b4481d29-f3eb-4543-88eb-fdf4b9918367}
},
{1,
{0,b7917a79-589c-4106-8f45-34eb58e50c00}
},
{1,
{0,bea86450-82bc-4145-8dd4-75822c009143}
},
{1,
{0,c2805ff7-5548-4ac3-b452-40f3b79e1078}
},
{1,
{0,cb5cc66c-e803-4066-9438-936819a1a123}
},
{1,
{0,cb68c540-cf66-4803-8952-8f27a99b37b7}
},
{1,
{0,cc4013ba-44b2-484a-8cb9-28719d605a59}
},
{1,
{0,d7694143-d9e0-4563-9c49-1a8cf3c01040}
},
{1,
{0,d85735a0-8aba-4273-a6f7-6a5a6292fb8c}
},
{1,
{0,df3355b2-47ce-4a0f-b424-5cd4779f2338}
},
{1,
{0,e6586851-e94d-4ef7-a65e-927c998971b9}
},
{1,
{0,e86448f7-5c7f-422c-b34f-ab1d99174118}
},
{1,
{0,f080e1b9-fd16-47f6-b933-85081eccb617}
},
{1,
{0,f2adee0e-5005-49f9-9b77-2fb53d705ad1}
},
{1,
{0,f5cf4a9d-e3ba-4174-bad3-98c25ec1c796}
},
{1,
{0,f9311742-1b7d-46dc-b90a-c86c7c3b4b15}
},
{1,
{0,ff40b5cd-5a90-4ab4-a5cf-af0c756f2d83}
}
},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"СтррКонтекст",
{1,1,
{"ru","Стрр контекст"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}