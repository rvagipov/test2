{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,0,
{1,0},0,0,0,0,0,0,1,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,0},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},0,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
#Область ГлобальныеПеременные

&НаКлиенте
Перем гЭтоLinuxКлиент; // для ускорения работы функции ЭтоLinuxКлиент

// ГлобальныеПеременные
#КонецОбласти

#Область СовместимостьСПлатформой_8_3_5

&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррКонтекст = Новый Структура;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область Прочие

&НаКлиенте
Процедура ВывестиСообщение(стррРезультат, Текст, ЕстьОшибки = Неопределено, Путь = """")
	
	стррСообщение = Новый Структура(""Описание,Путь"", Текст, Путь);
	стррРезультат.Сообщения.Добавить(стррСообщение);
	Если ЕстьОшибки <> Неопределено Тогда
		стррРезультат.ЕстьОшибки = ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ЭтоLinuxКлиент() Экспорт
	
	Если гЭтоLinuxКлиент = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		гЭтоLinuxКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		             Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	КонецЕсли; 
				 
	Возврат гЭтоLinuxКлиент;
	
КонецФункции

// Прочие
#КонецОбласти 

#Область ФайловыеОперации

&НаКлиенте
Функция СоздатьПодкаталогиДанных(КаталогДанных) Экспорт

	СтррРезультат = Новый Структура(""ЕстьОшибки,Сообщения"", Ложь, Новый Массив);
	
	Если ПустаяСтрока(КаталогДанных) Тогда
		Текст = ""Не указан каталог в параметре """"Каталог данных""""."";
		ВывестиСообщение(СтррРезультат, Текст, Истина, ""Объект.КаталогДанных"");
		Возврат СтррРезультат;
	КонецЕсли;
	
	Каталог = СокрЛП(КаталогДанных);
	Если Не ПроверитьИСоздатьКаталог(Каталог) Тогда
		Текст = ""Не удалось создать каталог, указанный в параметре """"Каталог данных"""": "" + Каталог;
		ВывестиСообщение(СтррРезультат, Текст, Истина, ""Объект.КаталогДанных"");
		Возврат СтррРезультат;
	КонецЕсли;
	
	Результат = Истина;
	
	ПолучитьПодкаталогиДанныхСервер();
	
	КаталогСл = ДополнитьСлешВПуть(Каталог);
	
	Для Каждого Элемент Из СтррКонтекст.ПодкаталогиДанных Цикл
		ПодКаталог = КаталогСл + Элемент.Значение;
		Если Не ПроверитьИСоздатьКаталог(ПодКаталог) Тогда
			Текст = ""Не удалось создать подкаталог назначения """""" + Элемент.Ключ + """""": "" + ПодКаталог;
			ВывестиСообщение(СтррРезультат, Текст, Истина);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтррРезультат;
	
КонецФункции 

// Проверяет существование каталога, если он не существует, то создается новый.
&НаКлиенте
Функция ПроверитьИСоздатьКаталог(ПутьККаталогу)

	Если КаталогСуществует(ПутьККаталогу) Тогда
		Возврат Истина;
	Иначе
		СоздатьКаталог(ПутьККаталогу);
		Возврат КаталогСуществует(ПутьККаталогу);
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция КаталогСуществует(ПутьККаталогу)
	
	КаталогОбъект = Новый Файл(ПутьККаталогу);
	Возврат КаталогОбъект.Существует() И КаталогОбъект.ЭтоКаталог();
	
КонецФункции

&НаКлиенте
Функция ФайлСуществует(ПутьКФайлу) Экспорт
	
	ФайлОбъект = Новый Файл(ПутьКФайлу);
	Возврат ФайлОбъект.Существует();
	
КонецФункции

&НаКлиенте
Функция ДополнитьСлешВПуть(Каталог)

	Слеш = ?(ЭтоLinuxКлиент(), ""/"", ""\"");
	
	Если Прав(Каталог, 1) <> Слеш Тогда
		Возврат Каталог + Слеш;
	Иначе
		Возврат Каталог;		
	КонецЕсли;

КонецФункции 

&НаСервере
Процедура ПолучитьПодкаталогиДанныхСервер()
	
	Если Не СтррКонтекст.Свойство(""ПодкаталогиДанных"") Тогда
		СтррКонтекст.Вставить(""ПодкаталогиДанных"", РеквизитФормыВЗначение(""Объект"").ПодкаталогиДанных());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяПодкаталогаДанных(ИмяСвойства, Каталог = Неопределено) Экспорт
	
	Если Не СтррКонтекст.Свойство(""ПодкаталогиДанных"") Тогда
		ПолучитьПодкаталогиДанныхСервер();
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Не СтррКонтекст.ПодкаталогиДанных.Свойство(ИмяСвойства, Результат) Тогда
		ВызватьИсключение(""Функция ИмяПодкаталогаДанных(), неизвестный параметр ИмяСвойства = "" + ИмяСвойства);
	КонецЕсли;
	
	Если Каталог <> Неопределено Тогда
		Если ЭтоLinuxКлиент() Тогда
			Путь = СтрЗаменить(Каталог, ""\"", ""/"");
		Иначе
			Путь = СтрЗаменить(Каталог, ""/"", ""\"");
		КонецЕсли; 
		Результат = ДополнитьСлешВПуть(Путь) + Результат;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// ФайловыеОперации
#КонецОбласти 

#Область ОпределениеКонфигурации
// Аналогичные функции объявлены в модуле обработки (ПоколениеКонфигурации, СравнитьВерсии, ВерсияКонфигурацииСервер).

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной гБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// и операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: ""P_V1.V2.V3.V4"", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: ""УТ_11.1.15.120"", ""УТ_11.1""
// 	Параметры:
// 		СтрКонфигурация - Строка - операция сравнеия и идентификатор сравниваемой конфигурации.
// 		
&НаКлиенте
Функция ПоколениеКонфигурации(СтрКонфигурация) Экспорт 
	
	Если Не стррКонтекст.Свойство(""КэшСравненияКонфигураций"") Тогда
	    стррКонтекст.Вставить(""КэшСравненияКонфигураций"", Новый Соответствие);
		стррВерсияКонфигурации = ВерсияКонфигурацииСервер();
		стррКонтекст.Вставить(""БазоваяКонфигурация"", стррВерсияКонфигурации.БазоваяКонфигурация); 
	КонецЕсли; 
	
	КэшСравненияКонфигураций = стррКонтекст.КэшСравненияКонфигураций;	
	БазоваяКонфигурация 	 = стррКонтекст.БазоваяКонфигурация;	
	
	Значение = КэшСравненияКонфигураций.Получить(СтрКонфигурация);
	
	Если Значение = Неопределено Тогда
		
		Индекс1 = Найти(БазоваяКонфигурация, ""_"");
		Индекс2 = Найти(СтрКонфигурация, ""_"");
		
		Если Индекс2 = 0 Тогда
			ВызватьИсключение(""Функция ПоколениеКонфигурации(): указан параметр без префикса """"_""""! Параметр = """""" + СтрКонфигурация + """"""."");
		КонецЕсли; 
		
		Префикс1 = Лев(БазоваяКонфигурация, Индекс1);
		Префикс2 = Лев(СтрКонфигурация, Индекс2);
		
		ЗнакСравнения = """";
		Для Индекс = 1 По 2 Цикл
			Символ = Сред(Префикс2, Индекс, 1);
			Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда // знаки ""<=>""
				ЗнакСравнения = ЗнакСравнения + Символ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗнакСравнения = """" Тогда
			ЗнакСравнения = ""="";
		Иначе
			Префикс2 = Сред(Префикс2, СтрДлина(ЗнакСравнения) + 1);
		КонецЕсли;
		
		Если Префикс1 <> Префикс2 Тогда // сравниваем префиксы конфигураций
			
			Значение = Ложь;
			
		Иначе
			
			Сравнение = СравнитьВерсии(Сред(БазоваяКонфигурация, Индекс1+1), Сред(СтрКонфигурация, Индекс2+1));
			
			Если ЗнакСравнения = "">="" Тогда
				Значение = (Сравнение >= 0);
			ИначеЕсли ЗнакСравнения = ""<="" Тогда
				Значение = (Сравнение <= 0);
			ИначеЕсли ЗнакСравнения = ""<"" Тогда
				Значение = (Сравнение < 0);
			ИначеЕсли ЗнакСравнения = "">"" Тогда
				Значение = (Сравнение > 0);
			ИначеЕсли ЗнакСравнения = ""="" Тогда
				Значение = (Сравнение = 0);
			Иначе
				ВызватьИсключение(""Функция ПоколениеКонфигурации() - неизвестный оператор сравнения: "" + ЗнакСравнения);
			КонецЕсли;
			
		КонецЕсли;
		
		КэшСравненияКонфигураций.Вставить(СтрКонфигурация, Значение);
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
&НаКлиентеНаСервереБезКонтекста
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2)
	
	мВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), ""0.0.0.0"", СтрокаВерсии1), ""."");
	мВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), ""0.0.0.0"", СтрокаВерсии2), ""."");
	
	ВГраница = Мин(мВерсия1.Количество(), мВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(мВерсия1[Разряд]) - Число(мВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВерсияКонфигурацииСервер()
	
	Возврат РеквизитФормыВЗначение(""Объект"").ВерсияКонфигурации();
	
КонецФункции

// ОпределениеКонфигурации
#КонецОбласти 
",
{4,2,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",11aafdb3-24f5-4e79-b06e-d7029a5a8b30}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"СтррКонтекст",
{1,1,
{"ru","Стрр контекст"}
},
{"Pattern"},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}