
#Область ГлобальныеПеременные

	Перем гБазоваяКонфигурация;
	Перем гКонфигурация;
	Перем гТаблицыВидовОбъектов;	// структура с таблицами значений идентификаторов видов справочников и документов в МТ и соответствия им в УТ
	Перем гТаблицыПеречислений;		// структура с таблицами значений перечислений соответствий 
	Перем гСлужебныеДанныеВФайлах; 	// признак сохранения служебных данных модуля в файлах (если значение Истина) или в Хранилище (если Ложь)
	Перем гКэшЧтенияКонстант; 		// кэш для ускорения чтения констант из БД
	Перем гКэшСравненияКонфигураций;
	Перем гКэшРеквизитыОбъектов;
	Перем гКэшСпискиОбъектов;		// кэш списков объектов (для выгрузки и отборов, например, массив организаций)
	Перем гЭтоLinuxСервер; 			// для ускорения работы функции ЭтоLinuxСервер
	Перем гДанныеОДополнительныхСвойствахДокументаДляМУ; // для ускорения записи дополнительных свойств документов при загрузке документов из МУ
	Перем гОбновитьСпрХарактеристикиНоменклатурыСлужебный; // признак изменения временной таблицы характеристики номенклатуры.
	
// ГлобальныеПеременные
#КонецОбласти
	

#Область СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьНепечатаемыеСимволы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьНепечатаемыеСимволы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область ПрограммныйИнтерфейс

Процедура ИнициализироватьКонтекстФормы(СтррКонтекст, ПараметрыФормы) Экспорт
	
	Если СтррКонтекст = Неопределено Тогда
		СтррКонтекст = Новый Структура;
	КонецЕсли;
	
	СтррКонтекст.Вставить("ПутьКФорме", Метаданные().ПолноеИмя() + ".Форма.");
	СтррКонтекст.Вставить("Версия", 	ВерсияОбработки());
	СтррКонтекст.Вставить("Цвета", 		ВернутьЦветаОФормления());
	СтррКонтекст.Вставить("ВХОбщиеПараметры", Неопределено);
	Если СтррКонтекст.Свойство("РежимСовместимости") Тогда
		СтррКонтекст.РежимСовместимости = Метаданные.РежимСовместимости;
	КонецЕсли;
	
	Если СтррКонтекст.Свойство("Конфигурация") Тогда
	    стррВерсия = ВерсияКонфигурации();
		СтррКонтекст.Конфигурация = стррВерсия.Конфигурация;
	КонецЕсли; 
	
	Если СтррКонтекст.Свойство("СпрТоргТочки") Тогда
		флИспользоватьПунктыРазгрузки = ПрочитатьЗначениеНастройки("ИспользоватьПунктыРазгрузки");
		Если флИспользоватьПунктыРазгрузки = Неопределено Тогда
			ИспользоватьПунктыРазгрузки = Ложь;
		Иначе 
			ИспользоватьПунктыРазгрузки = флИспользоватьПунктыРазгрузки;
		КонецЕсли;
		стррТТ = Новый Структура("ВидСправочника, Синоним, Представление, тзИмяКолонки, тзИмяЭлемента, Адрес");
		Если ИспользоватьПунктыРазгрузки Тогда 
			стррТТ.ВидСправочника = "алкПунктыРазгрузки"; // указывается имя справочника объекта метаданных в конфигурации, который заменяет справочник 'Партнеры'.
			стррТТ.Синоним 		  = "Пункты разгрузки"; // указывается для вывода на форме списка торговых точек.
			стррТТ.Представление  = "Пункт разгрузки"; // указывается для вывода в информационных сообщениях пользователю.
			стррТТ.тзИмяКолонки	  = "ПунктРазгрузки"; // имя колонки в таблице значений 'Состав' в модуле формы 'СписокТорговыхТочек'.
			стррТТ.тзИмяЭлемента  = "СоставПунктРазгрузки"; // имя элемента таблицы значений 'Состав' на форме 'СписокТорговыхТочек'.
			стррТТ.Адрес 		  = Справочники.ВидыКонтактнойИнформации.АдресПунктаРазгрузки;
		Иначе // используется типовой справочник Партнеры
			стррТТ.ВидСправочника = "Партнеры";
			стррТТ.Синоним 		  = "Партнеры";
			стррТТ.Представление  = "Партнер (Клиент)";
			стррТТ.тзИмяКолонки	  = "Партнер";
			стррТТ.тзИмяЭлемента  = "СоставПартнер";
			стррТТ.Адрес		  = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		КонецЕсли;
		СтррКонтекст.СпрТоргТочки = стррТТ;		
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(СтррКонтекст, ПараметрыФормы);
	
КонецПроцедуры

Функция КонфигурацияРазмерностьЭлементовФормыДляТакси() Экспорт
	
	Возврат КонфигурацияРежимСовместимости(">=8.3.7");
	
КонецФункции

Функция КонфигурацияРежимСовместимости(строкаСравненияВерсии) Экспорт
	
	ТекущийРежим = Метаданные.РежимСовместимости;

	Если ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		СисИнфо = Новый СистемнаяИнформация;
		стрВерсияПлатформы = СисИнфо.ВерсияПриложения;
	Иначе
		стрВерсияПлатформы = ПолучитьВерисиюИзСтроки(СтрЗаменить(Строка(ТекущийРежим), "_", "."));
	КонецЕсли; 
	
	строкаСравнения = СтрЗаменить(строкаСравненияВерсии, " ", "");
	Длина = стрДлина(строкаСравнения);
	ЗнакСравнения = "";
	Для Индекс = 1 По 2 Цикл
		Символ = Сред(строкаСравнения, Индекс, 1);
		Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда
			ЗнакСравнения = ЗнакСравнения + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗнакСравнения = "" Тогда
		ЗнакСравнения = "=";
	Иначе
		стрОперации = ",<,=,>,<>,<=,>=,";
		Если Найти(стрОперации, "," + ЗнакСравнения + ",") = 0 Тогда
			Текст = "Функция КонфигурацияСравнитьРежимСовместимости(): неверное значение параметра ""строкаСравненияВерсии"" = ""%1""!" + Символы.ПС
				+ "Значение должно начинаться с операции сравнения (<, =, >, <>, <= или >=)!";
			ВызватьИсключение(СтрШаблон_(Текст, строкаСравненияВерсии));
		КонецЕсли;
	КонецЕсли;
	
	Сравнение = СравнитьВерсии(стрВерсияПлатформы, Сред(строкаСравнения, СтрДлина(ЗнакСравнения)+1));
	
	Если ЗнакСравнения = ">=" Тогда
		Значение = (Сравнение >= 0);
	ИначеЕсли ЗнакСравнения = "<=" Тогда
		Значение = (Сравнение <= 0);
	ИначеЕсли ЗнакСравнения = "<" Тогда
		Значение = (Сравнение < 0);
	ИначеЕсли ЗнакСравнения = ">" Тогда
		Значение = (Сравнение > 0);
	ИначеЕсли ЗнакСравнения = "=" Тогда
		Значение = (Сравнение = 0);
	ИначеЕсли ЗнакСравнения = "<>" Тогда
		Значение = (Сравнение <> 0);
	Иначе
		ВызватьИсключение("Функция КонфигурацияСравнитьРежимСовместимости() - неизвестный оператор сравнения: " + ЗнакСравнения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьВерисиюИзСтроки(Знач стрРежим) 
	
	стрВерсия = "";
	стрРежим = СтрЗаменить(стрРежим, "_", ".");
	Длина = СтрДлина(стрРежим);
	Для Индекс = 1 По Длина Цикл
		Символ = Сред(стрРежим, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код = 46 Или (Код >= 48 И Код <= 57) Тогда
		    стрВерсия = стрВерсия + Символ;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат стрВерсия;
	
КонецФункции

Функция ПодкаталогиДанных() Экспорт
	
	Возврат Новый Структура("КаталогОбмена,Логи,Треки,Входящие,Исходящие", 
							"Exchange", "Logs", "Tracks", "In", "Out");
							
КонецФункции

Функция ПодкаталогДанных(ИмяСвойства, НачальныйПуть = Неопределено) Экспорт
	
	Результат 		= Неопределено;	
	СтррПодкаталоги = ПодкаталогиДанных();
	
	Если Не СтррПодкаталоги.Свойство(ИмяСвойства, Результат) Тогда
		ВызватьИсключение("Функция ПодкаталогДанных(), неизвестный параметр ИмяСвойства = " + ИмяСвойства);
	КонецЕсли;
	
	Путь = ?(НачальныйПуть <> Неопределено, НачальныйПуть, КаталогДанных);
	Если ЭтоLinuxСервер() Тогда
		Путь = СтрЗаменить(Путь, "\", "/");
	КонецЕсли; 
	
	Возврат ДополнитьСлешВПуть(Путь) + ДополнитьСлешВПуть(Результат);
	
КонецФункции

// Процедура  заполняет значения структуры в соответствии со свойствами структуры. В качестве свойств структуры
// указываются виды объектов метаданных, например, "ЗаказКлиента".
Процедура ПолучитьПредставленияВидовОбъектов(стррВидыДокументов, ВидМетаданных = "Документы") Экспорт

	Для Каждого Элемент Из СтррВидыДокументов Цикл
		стррВидыДокументов[Элемент.Ключ] = Метаданные[ВидМетаданных][Элемент.Ключ].РасширенноеПредставлениеОбъекта;
	КонецЦикла;
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс_ОпределениеКонфигурации
// Аналогичные функции объявлены в клиентском модуле МодульОбщий (ПоколениеКонфигурации, СравнитьВерсии, ВерсияКонфигурации).

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной гБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: "P_V1.V2.V3.V4", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: "УТ_11.1.15.120", "УТ_11.1"
// 	Параметры:
// 		СтрКонфигурация - Строка - операция сравнеия и идентификатор сравниваемой конфигурации.
// 		
Функция ПоколениеКонфигурации(СтрКонфигурация) 
	
	Если гКэшСравненияКонфигураций = Неопределено Тогда
		гКэшСравненияКонфигураций = Новый Соответствие;
	КонецЕсли; 
	
	Значение = гКэшСравненияКонфигураций.Получить(СтрКонфигурация);
	
	Если Значение = Неопределено Тогда
		
		Индекс1 = Найти(гБазоваяКонфигурация, "_");
		Индекс2 = Найти(СтрКонфигурация, "_");
		
		Если Индекс2 = 0 Тогда
			ВызватьИсключение("Функция ПоколениеКонфигурации(): указан параметр без префикса ""_""! Параметр = """ + СтрКонфигурация + """.");
		КонецЕсли; 
		
		Префикс1 = Лев(гБазоваяКонфигурация, Индекс1);
		Префикс2 = Лев(СтрКонфигурация, Индекс2);
		
		ЗнакСравнения = "";
		Для Индекс = 1 По 2 Цикл
			Символ = Сред(Префикс2, Индекс, 1);
			Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда // знаки "<=>"
				ЗнакСравнения = ЗнакСравнения + Символ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗнакСравнения = "" Тогда
			ЗнакСравнения = "=";
		Иначе
			Префикс2 = Сред(Префикс2, СтрДлина(ЗнакСравнения) + 1);
		КонецЕсли;
		
		Если Префикс1 <> Префикс2 Тогда // сравниваем префиксы конфигураций
			
			Значение = Ложь;
			
		Иначе
			
			Сравнение = СравнитьВерсии(Сред(гБазоваяКонфигурация, Индекс1+1), Сред(СтрКонфигурация, Индекс2+1));
			
			Если ЗнакСравнения = ">=" Тогда
				Значение = (Сравнение >= 0);
			ИначеЕсли ЗнакСравнения = "<=" Тогда
				Значение = (Сравнение <= 0);
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Значение = (Сравнение < 0);
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Значение = (Сравнение > 0);
			ИначеЕсли ЗнакСравнения = "=" Тогда
				Значение = (Сравнение = 0);
			Иначе
				ВызватьИсключение("Функция ПоколениеКонфигурации() - неизвестный оператор сравнения: " + ЗнакСравнения);
			КонецЕсли;
			
		КонецЕсли;
		
		гКэшСравненияКонфигураций.Вставить(СтрКонфигурация, Значение);
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2)
	
	мВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1), ".");
	мВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(мВерсия1.Количество(), мВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(мВерсия1[Разряд]) - Число(мВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияКонфигурации() Экспорт
	
	стррРезультат = Новый Структура("Конфигурация,БазоваяКонфигурация");
	
	стррРезультат.Конфигурация  = "УТ";	
	
	Имя    = Метаданные.Имя;
	Версия = Метаданные.Версия;
	
	Если    Имя = "УправлениеТорговлей" 
		Или Имя = "УправлениеТорговлейБазовая" 
		Или Имя = "АгентПлюсУправлениеТорговлей" 
	Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_" + Версия;
	ИначеЕсли Имя = "УправлениеТорговлей_CRM_2" Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_11.2";
	ИначеЕсли Имя = "УправлениеТорговлейДляУкраины" Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_11.1.10";
		стррРезультат.Конфигурация  = "УТ_UA";
	ИначеЕсли Имя = "УправлениеТорговлейДляКазахстана" Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_11.1.10";
		стррРезультат.Конфигурация  = "УТ_KZ";
	ИначеЕсли Имя = "КомплекснаяАвтоматизация" Или Имя = "КомплекснаяАвтоматизацияДляКазахстана" Тогда
		стррРезультат.БазоваяКонфигурация = "УТ_11.2";
		стррРезультат.Конфигурация  = "КА";
	ИначеЕсли Имя = "KT2000_Alcohol_Trade" Тогда 
		стррРезультат.БазоваяКонфигурация = "УТ_" + Версия;
		стррРезультат.Конфигурация  = "УТ_АП";
	Иначе
		стррРезультат.БазоваяКонфигурация = "УТ_11.2"; // пока неизвестные конфигурации приравниваем к УТ 11.2
	КонецЕсли;
	
	Возврат стррРезультат;
	
КонецФункции

Процедура ОпределитьВерсиюКонфигурации()
	
	Если гБазоваяКонфигурация <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррВерсияКонфигурации = ВерсияКонфигурации();
	
	гБазоваяКонфигурация = стррВерсияКонфигурации.БазоваяКонфигурация;
	гКонфигурация  		 = стррВерсияКонфигурации.Конфигурация;
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ОпределениеКонфигурации
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ЧтениеЗаписьНастроекОбработки

// В качестве параметра передается структура, где Ключ - имя настройки, Значение - значение настройки
Процедура СохранитьЗначенияНастроекИзСтруктуры(СтррНастройки) Экспорт

	Для Каждого Элемент Из СтррНастройки Цикл
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), Элемент.Ключ, Элемент.Значение, , ПользовательНастроек());
	КонецЦикла;

КонецПроцедуры

// В качестве параметра передается строка с именами настроек через запятую.
Функция СохранитьЗначенияНастроекОбработки(ИменаНастроек, СохранитьВВХ = Ложь) Экспорт

	Результат = Истина;
	
	МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	
	Если Не СохранитьВВХ Тогда // запись в хранилище
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, ЭтотОбъект[ИмяНастройки], , ПользовательНастроек());
		КонецЦикла;
		
	Иначе // запись в XML-файл с последующей записью во временное хранилище
		
		СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,АдресВХ", Ложь, Новый Массив);
		
		ИмяФайла = КаталогВременныхФайлов() + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".xml";
		
		ДокXML = Новый ЗаписьXML();
		
		Попытка
			ДокXML.ОткрытьФайл(ИмяФайла);
			ДокXML.ЗаписатьОбъявлениеXML();	
			ДокXML.ЗаписатьНачалоЭлемента("Settings");

			ДокXML.ЗаписатьАтрибут("Generator", 		"Module1C");
			
			ДокXML.ЗаписатьАтрибут("ModuleVersion", 	ВерсияОбработки());
			ДокXML.ЗаписатьАтрибут("ModuleName", 		"APMTBase");
			
			ДокXML.ЗаписатьАтрибут("ProductName", 		Метаданные.Имя);
			ДокXML.ЗаписатьАтрибут("ProductVer", 	 	Метаданные.Версия); 
			ДокXML.ЗаписатьАтрибут("Compatibility", 	Строка(Метаданные.РежимСовместимости));
			ДокXML.ЗаписатьАтрибут("UICompatibility",	Строка(Метаданные.РежимСовместимостиИнтерфейса));
			//ДокXML.ЗаписатьАтрибут("PlatformVersion",	СистемнаяИнформация.ВерсияПриложения);
			//ДокXML.ЗаписатьАтрибут("OSVersion",		СистемнаяИнформация.ВерсияОС);
			//ДокXML.ЗаписатьАтрибут("OSType",			СистемнаяИнформация.ТипПлатформы);
			
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Ошибка создания файла настроек ""%1"". Причина: %2'"), ИмяФайла, ОписаниеОшибки());
			ВывестиСообщение(СтррРезультат, Текст, Истина);
			Возврат СтррРезультат;
		КонецПопытки;
		
		ДокXML.ЗаписатьНачалоЭлемента("Root");
		ДокXML.ЗаписатьНачалоЭлемента("Attributes");
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Item");
			ДобавитьПоле(ДокXML, "Name",  ИмяНастройки);
			ДобавитьПоле(ДокXML, "Value", ЗначениеВСтрокуДляXML(ЭтотОбъект[ИмяНастройки]));
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ДокXML.ЗаписатьКонецЭлемента(); // "Attributes"
		ДокXML.ЗаписатьКонецЭлемента(); // "Root"
		ДокXML.ЗаписатьКонецЭлемента(); // "Settings"
		
		ДокXML.Закрыть();
		
		СтррРезультат.АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		УдалитьФайлы(ИмяФайла);
		
		Результат = СтррРезультат;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура загружает реквизиты обработки значениями из хранилища системных настроек.
// 
// Параметры:
//	ИменаНастроек - Строка - строка с именами настроек через запятую.
//	ПеренестиТаблицыВоВременныеТаблицы - Булево - если Истина, то загружать таблицы значений в структуру ВременныеТаблицы (реквизит обработки).
//
Процедура ВосстановитьЗначенияНастроекОбработки(ИменаНастроек, ПеренестиТаблицыВоВременныеТаблицы = Ложь) Экспорт

	Имена = СтрЗаменить(ИменаНастроек, ",ВременныеТаблицы", "");
	
	СтррНастройки = ПрочитатьЗначенияНастроек(Имена);
	
	ТипТЗ = Тип("ТаблицаЗначений");	
	
	ВременныеТаблицы = Новый Структура;		

	Для Каждого Элемент Из СтррНастройки Цикл
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;
		Если ТипЗнч(Значение) = ТипТЗ Тогда
			Если ПеренестиТаблицыВоВременныеТаблицы Тогда
				ВременныеТаблицы.Вставить(Ключ, Значение);
			Иначе
				ЭтотОбъект[Ключ] = Значение.Скопировать();
			КонецЕсли;
		Иначе
			ЭтотОбъект[Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция загружает реквизиты обработки значениями из XML-файла из временного хранилища.
// 
// Параметры:
//	ИменаНастроек 	- Строка - строка с именами настроек через запятую.
//	АдресВХ 		- Строка - адрес XML-файла настроек во временном хранилище.
//
Функция ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресВХ) Экспорт

	Имена = "," + ВРег(ИменаНастроек) + ",";
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,ВсегоИзменений", Ложь, Новый Массив, 0);
	
	Данные = ПолучитьИзВременногоХранилища(АдресВХ);
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'В хранилище отсутствует XML-файл настроек.'"), Истина);
		Возврат СтррРезультат;
	КонецЕсли;
	
	ФайлНастроек = КаталогВременныхФайлов() + "apconfig.xml";
	Данные.Записать(ФайлНастроек);
	
	ДокXML = Новый ЧтениеXML;
    ДокXML.ОткрытьФайл(ФайлНастроек);
	
	ФайлКорректный 			 = Ложь;
	ЕстьТэгSettings 		 = Ложь;
	ВыведенЗаголовокЗагрузки = Ложь;		
 
    Пока ДокXML.Прочитать() Цикл
 
        Если ДокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
		 	ИмяУзла = ВРег(ДокXML.Name);
			
			Если ИмяУзла = "SETTINGS" Тогда
				
				ЕстьТэгSettings = Истина;
				
				ЦелевойМодуль = ДокXML.ЗначениеАтрибута("ModuleName");
				ЦелеваяВерсия = ДокXML.ЗначениеАтрибута("ModuleVersion");					
				
				Если ЦелевойМодуль = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Отсутствувет атрибут %1 узла ""Settings""!'"), "ModuleName");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелеваяВерсия = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Отсутствувет атрибут %1 узла ""Settings""!'"), "ModuleVersion");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелевойМодуль = Неопределено Или ЦелеваяВерсия = Неопределено Тогда 
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ВРег(ЦелевойМодуль) <> "APMTBASE" Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Настройки предназначены для другого модуля (ModuleName = %1, ожидаемое значение: %2)!'"), 
						ЦелевойМодуль, "APMTBase");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Сравнение = СравнитьВерсии(ВерсияОбработки(), ЦелеваяВерсия);
				Если Сравнение <> 0 Тогда
					Разница = ?(Сравнение < 0, НСтр("ru = 'более новой'"), НСтр("ru = 'более старой'"));
					Текст = СтрШаблон_(НСтр("ru = 'Получены настройки для обработки %1 версии (%2)!'"), Разница, ЦелеваяВерсия);
					ВывестиСообщение(СтррРезультат, Текст);
				КонецЕсли;
				
				ФайлКорректный = Истина;
				
			ИначеЕсли ИмяУзла = "ITEM" И ФайлКорректный Тогда
				
				Если Не ВыведенЗаголовокЗагрузки Тогда
					ВывестиСообщение(СтррРезультат,  НСтр("ru = 'Чтение значений настроек...'"));
					ВыведенЗаголовокЗагрузки = Истина;
				КонецЕсли;
				
				Имя = ДокXML.ЗначениеАтрибута("Name");
				Если 0 = Найти(Имена, "," + ВРег(Имя) + ",") Тогда
					// загружаем только реквизиты, указанные в параметре Имена
				ИначеЕсли Не ЕстьРеквизитОбъекта(Имя, ЭтотОбъект) Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Пропущен параметр (отсутствует в обработке): ""%1"".'"), Имя);
					ВывестиСообщение(СтррРезультат, Текст);
				Иначе
					Значение = ЗначениеИзСтрокиXML(ДокXML.ЗначениеАтрибута("Value"), ТипЗнч(ЭтотОбъект[Имя]));
					Если ЭтотОбъект[Имя] <> Значение Тогда // изменилось значение реквизита, загружаем новое значение
						ЭтотОбъект[Имя] = Значение;
						Если СтррРезультат.ВсегоИзменений = 0 Тогда
							ВывестиСообщение(СтррРезультат, НСтр("ru = 'Получены новые значения параметров настройки:'"));
						КонецЕсли;
						СтррРезультат.ВсегоИзменений = СтррРезультат.ВсегоИзменений + 1;
						Текст = СтрШаблон_(НСтр("ru = '%1. ""%2""'"), СтррРезультат.ВсегоИзменений, Имя);
						ВывестиСообщение(СтррРезультат, Текст);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;					
 
        КонецЕсли;
 
    КонецЦикла; 
 
    ДокXML.Закрыть();
	
	Если Не ЕстьТэгSettings Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Файл не является файлом настроек - ожидается тэг ""Settings"".'"), Истина);
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

// Возвращает структуру с прочитанными настройками или значение первого параметра из строки списка ИменаНастроек.
// В качестве параметра передается строка с именами настроек через запятую.
// Если параметр ВернутьТолькоЗначение = Истина, то возвращается только значение параметра.
Функция ПрочитатьЗначенияНастроек(ИменаНастроек, ВернутьТолькоЗначение = Ложь) Экспорт
	
	МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	
	Если ВернутьТолькоЗначение Тогда
		
		Результат = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), МассивИмен[0], , ПользовательНастроек());
		
	Иначе
		
		Результат = Новый Структура(ИменаНастроек);
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());
			Результат.Вставить(ИмяНастройки, ЗначениеНастройки);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Удаляет настройки из хранилища.
// В качестве параметра передается строка с именами настроек через запятую или массив имен настроек.
Процедура УдалитьЗначенияНастроек(ИменаНастроек)
	
	ТипПараметра = ТипЗнч(ИменаНастроек);
	Если ТипПараметра = Тип("Строка") Тогда
		МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивИмен = ИменаНастроек;
	Иначе
		ВызватьИсключение("Процедура УдалитьЗначенияНастроек() - неизвестный тип папаметра ИменаНастроек - " + Строка(ТипПараметра));
	КонецЕсли;
	
	Для Каждого ИмяНастройки Из МассивИмен Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить системную настройку: " + ИмяНастройки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение настройки, прочитанной из хранилища настроек.
// В параметре передается имя настройки.
Функция ПрочитатьЗначениеНастройки(ИмяНастройки) Экспорт
	
	Возврат ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());

КонецФункции

// В качестве параметра передается имя настройки (строка).
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение) Экспорт

	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, Значение, , ПользовательНастроек());
	
КонецПроцедуры

Процедура УдалитьЗначениеНастройки(ИмяНастройки)
	
	ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
	
КонецПроцедуры	

// Функция возвращает заполненную структуру объекта, прочитанного из хранилища.
// В структуре проставлены значения свойств в соответствии с данными в хранилище БД, найденными по ключу ID.
//
Функция ПолучитьОбъектИзХранилища(Префикс, ID) Экспорт

	Если ID = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПрочитатьЗначениеНастройки(Префикс + Строка(ID));
	КонецЕсли; 

КонецФункции 

// Процедура сохраняет заполненную структуру объекта в хранилище.
Процедура СохранитьОбъектВХранилище(Префикс, ID, СтррОбъект) Экспорт

	СохранитьЗначениеНастройки(Префикс + Строка(ID), СтррОбъект);

КонецПроцедуры

// Процедура удаляет объект из хранилища.
Процедура УдалитьОбъектИзХранилища(Префикс, ID) Экспорт
	
	УдалитьЗначениеНастройки(Префикс + Строка(ID));
	
КонецПроцедуры

// Процедура полностью удаляет все настройки модуля.
// Параметры:
// 	СтррРезультат - Структура - структура для возвращения результата. Свойства:
// 		ОшибокНет - Булево - Истина, если ошибок нет и Ложь, если есть ошибки удаления (сбросить настройки не удалось).
// 		Описание  - Строка - описание ошибки.
// 	
Процедура СброситьВсеНастройкиМодуля(СтррРезультат) Экспорт
	
	СтррРезультат.ОшибокНет = Ложь;
	СтррРезультат.Описание  = "Неизвестная ошибка.";
	
	Попытка
		ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), , ПользовательНастроек());
		Текст = СтрШаблон_("Настройки сброшены %1." + Символы.ПС + "Пользователь: %2.", ТекущаяДата(), Пользователи.ТекущийПользователь());
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), "НастройкиСброшены", Текст, , ПользовательНастроек());
		СтррРезультат.ОшибокНет = Истина;
	Исключение
		СтррРезультат.Описание = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Процедура загружает реквизиты объекта (модуля) с правильной обработкой значений типа ТаблицаЗначений
Процедура ЗаполнитьРеквизитыОбъектаИзСтруктуры(Модуль, СтррОбъект) Экспорт
	
	ТипТЗ = Тип("ТаблицаЗначений");
	стрРеквизитыТЗ = Неопределено;
	мРеквизитыТЗ = Новый Массив;
	Для Каждого Элемент Из СтррОбъект Цикл
		Если ТипЗнч(Элемент.Значение) = ТипТЗ Тогда
			стрРеквизитыТЗ = ?(стрРеквизитыТЗ = Неопределено, "", стрРеквизитыТЗ + ",") + Элемент.Ключ;
			мРеквизитыТЗ.Добавить(Элемент.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(Модуль, СтррОбъект,, стрРеквизитыТЗ);
	
	Стр1С = "";
	Для Каждого ИмяРеквизита Из мРеквизитыТЗ Цикл
		Стр1С = Стр1С + СтрЗаменить("Модуль.%1.Загрузить(СтррОбъект.%1); ", "%1", ИмяРеквизита);
	КонецЦикла;
	
	Если Стр1С <> "" Тогда
		Выполнить(Стр1С);
	КонецЕсли; 
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ЧтениеЗаписьНастроекОбработки
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм

Функция ВернутьЦветаОФормления() Экспорт
	
	стррРезультат = Новый Структура;
	стррРезультат.Вставить("Авто", 	 		 Новый Цвет);
	стррРезультат.Вставить("ТекстПояснение", Новый Цвет(70,130,180));
	стррРезультат.Вставить("ТекстВнимание",  Новый Цвет(255,0,0));
	стррРезультат.Вставить("ТекстОбычный", 	 ЦветаСтиля.ЦветТекстаФормы);
	стррРезультат.Вставить("ФонРаздела", 	 Новый Цвет(225, 222, 255));
	стррРезультат.Вставить("ПолеГлавноеОкно",Новый Цвет(249, 243, 209));
	стррРезультат.Вставить("ФонСостояние", 	 Новый Цвет(255, 250, 217));
	стррРезультат.Вставить("ФонЗеленый", 	 Новый Цвет(128, 255, 128));
	стррРезультат.Вставить("ФонВнимание",	 Новый Цвет(255, 255, 128));
	стррРезультат.Вставить("Белый", 	 	 Новый Цвет(255, 255, 255));
	
	Возврат стррРезультат;
	
КонецФункции

Процедура ЗаполнитьСпособыОбмена(Список) Экспорт

	Список.Очистить();
	Список.Добавить("КаталогОбмена", НСтр("ru='Каталог обмена'"));
	Список.Добавить("АПСОД",  		 НСтр("ru='Агент Плюс: СОД (служба обмена данными)'"));
	Список.Добавить("FTP", 			 НСтр("ru='FTP-сервер'"));

КонецПроцедуры

Функция ПолучитьВсеЗакладкиЖурналаДокументовДляМУ() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("Заказ", 		НСтр("ru='Заказы'"));
	Список.Добавить("Долг", 		НСтр("ru='Долги'"));
	Список.Добавить("Реализация", 	НСтр("ru='Реализация'"));
	Список.Добавить("ПКО", 			НСтр("ru='Касса'"));
	Список.Добавить("Поступление", 	НСтр("ru='Возврат'"));
	Список.Добавить("Перемещение", 	НСтр("ru='Перемещение'")); // sd_22082017
	
	Возврат Список;
	
КонецФункции

// Функция возвращает представление структуры в виде строки
Функция ПолучитьПредставлениеСтруктуры(Структура, ОграничениеДлиныПредставления = 100) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Структура) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Структура Цикл

			Тип = ТипЗнч(Элемент.Значение);
			Если Тип = Тип("Строка") Тогда
				ЗначениеСтр = "'" + СокрЛП(Элемент.Значение) + "'";
			ИначеЕсли Тип = Тип("СписокЗначений") Тогда
				ЗначениеСтр = "<Список N=" + Строка(Элемент.Значение.Количество()) + ">";
			ИначеЕсли Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив") Тогда
				ЗначениеСтр = "<Массив N=" + Строка(Элемент.Значение.Количество()) + ">";
			Иначе
				ЗначениеСтр = Строка(Элемент.Значение);
			КонецЕсли;
			
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли; 
			Результат = Результат + Элемент.Ключ + ": " + ЗначениеСтр;
			Если СтрДлина(Результат) >= ОграничениеДлиныПредставления Тогда
				Результат = Лев(Результат, ОграничениеДлиныПредставления - 3) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет наличие всех свойств структуры, названия свойств передаются в виде строки с разделителем ",".
Функция ЕстьСвойстваСтруктуры(Структура, СтрСвойства) Экспорт
	
	Результат = Истина;
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Результат = Ложь;
	Иначе
		МассивСвойств = СтрРазделить_(СтрСвойства, ",");
		Для Каждого Элемент Из МассивСвойств Цикл
			Если Не Структура.Свойство(Элемент) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет наличие колонок в таблице значений. Названия колонок передаются в виде строки с разделителем ",".
Функция ЕстьКолонкиТаблицыЗначений(ТЗ, СтрКолонки) Экспорт
	
	Результат = Истина;
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Тогда
		Результат = Ложь;
	Иначе
		мКолонки = СтрРазделить_(СтрКолонки, ",");
		Для Каждого ИмяКолонки Из мКолонки Цикл
			Если ТЗ.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строковое представление расписания трекинга
Функция ПредставлениеРасписанияТрекинга(СтррРасписание) Экспорт
	
	Если Не ЕстьСвойстваСтруктуры(СтррРасписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
		Возврат "";
	КонецЕсли;
	
	Дни = СтрЗаменить(СтррРасписание.ДниНедели, ",", "");
	Если Дни = ""  Тогда
		Возврат "";
	КонецЕсли;
	
	Если Дни = "1234567" Тогда
		СтрДни = НСтр("ru='все'");
	Иначе
		ДниНеделиСтр = НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'");
		Если Лев(Дни, 5) = "12345" Тогда
			СтрДни = НСтр("ru='по будням'");
			Если Число(Прав(Дни, 1)) > 5 Тогда
				СтрДни = СтрДни + ", " + СтрРазделить_(ДниНеделиСтр, ",")[Число(Прав(Дни, 1))-1];
			КонецЕсли;
		Иначе
			МассивДней = СтрРазделить_(ДниНеделиСтр, ",");
			СтрДни = ""; 
			Для Поз = 1 По МассивДней.Количество() Цикл	
				Если Найти(Дни, Строка(Поз)) <> 0 Тогда
					СтрДни = СтрДни + ?(СтрДни = "", "", ", ") + МассивДней[Поз-1];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = НСтр("ru='Дни недели:'") + " " + СтрДни + ". ";
	СтрВремя  = СтрШаблон_(НСтр("ru='Время с %1 по %2'"), СтррРасписание.ВремяНачала, СтррРасписание.ВремяОкончания) + ". ";
	Результат = Результат + СтрВремя;
	СтрИнтервал = НСтр("ru='Интервал: каждые'") + " ";
	Если СтррРасписание.ПериодЗаписи = 0 Или СтррРасписание.ПериодЗаписи % 60 <> 0 Тогда
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи) + " " + НСтр("ru='сек'");
	Иначе
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи / 60) + " " + НСтр("ru='мин'");
	КонецЕсли;
	Результат = Результат + СтрИнтервал + ".";

	Возврат Результат;

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

// Функция проверяет готовность справочника агентов к обмену данными.
//
// Параметры:
//  ОписаниеСтатуса - Строка - в параметре возвращается описание статуса готовности справочника.
//  КодСостояния - Строка - в параметре возвращается идентфикатор состояния справочника.
//
// Возвращаемое значение:
//   Истина - справочник готов к обмену данными, в параметре ОписаниеСтатуса возвращается пустая строка.
//   Ложь - не готов к обмену данными, в параметре ОписаниеСтатуса возвращается описание статуса.
//
Функция СправочникАгентовПроверитьГотовность(ТЗ)

	СтррРезультат = Новый Структура("Готов,КодСостояния,Описание,Количество");
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Или ТЗ.Количество() = 0 Тогда
		
		СтррРезультат.Готов = Ложь;		
		СтррРезультат.Описание = НСтр("ru = 'Не заполнены настройки агентов.'");
		СтррРезультат.КодСостояния = "СправочникПустой";
		СтррРезультат.Количество = 0;
		
	Иначе
		
		СтррРезультат.Количество = ТЗ.Количество(); // общее количество агентов (готовых и не готовых)
		
		ГотовыеАгенты 		 = 0;
		КритичныеЗамечания 	 = 0;
		НеКритичныеЗамечания = 0;
		
		Для Каждого СтрокаТ Из ТЗ Цикл
			Если СтрокаТ.СтатусНастроек = 1 Тогда // зеленая галка статуса агента
				ГотовыеАгенты = ГотовыеАгенты + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 2 Тогда
				КритичныеЗамечания = КритичныеЗамечания + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 3 Тогда
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			Иначе // неизвестный статус!
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КритичныеЗамечания > 0 Тогда
			ЧислоАгентов = ЧислоЦифрамиПредметИсчисленияПрописью(КритичныеЗамечания, НСтр("ru = 'агента, агентов, агентов'"));
			СтррРезультат.Готов = Ложь;			
			СтррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Не заполнены настройки у %1.'"), ЧислоАгентов);
			СтррРезультат.КодСостояния = "НеУВсехЗаполненыНастройки";
		ИначеЕсли ГотовыеАгенты > 0 Тогда
			СтррРезультат.Готов = Истина;
			СтррРезультат.Описание = "";
			СтррРезультат.КодСостояния = ?(НеКритичныеЗамечания > 0, "НеКритичныеЗамечания", "ЕстьГотовыеАгенты");
		Иначе
			СтррРезультат.Готов = Ложь;
			СтррРезультат.Описание = НСтр("ru = 'Нет торговых агентов готовых к обмену данными.'");
			СтррРезультат.КодСостояния = "НетГотовыхАгентов";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет готовность справочника МУ к обмену данными.
//
// Параметры:
//  ОписаниеСтатуса - Строка - в параметре возвращается описание статуса готовности справочника.
//  КодСостояния - Строка - в параметре возвращается идентфикатор состояния справочника.
//
// Возвращаемое значение:
//   Истина - справочник готов к обмену данными, в параметре ОписаниеСтатуса возвращается пустая строка.
//   Ложь - не готов к обмену данными, в параметре ОписаниеСтатуса возвращается описание статуса.
//
Функция СправочникМобильныхУстройствПроверитьГотовность(ТЗ)
	
	СтррРезультат = Новый Структура("Готов,КодСостояния,Описание", Истина, "", "");
	
	Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Или ТЗ.Количество() = 0 Тогда
		
		СтррРезультат.Описание 	   = НСтр("ru = 'Не заполнен справочник мобильных устройств.'");
		СтррРезультат.КодСостояния = "СправочникПустой";
		СтррРезультат.Готов 	   = Ложь;
		
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет готовность виртуальных справочников к обмену данными.
//
// Параметры:
//  ИменаСправочников - Строка - список названий виртуальных справочников через запятую.
//
// Возвращаемое значение:
//   Структура статусов в соответствии с переданным списком названий виртуальных справочников.
//   Если передано единственное название справочника, то возвращается структура статуса справочнкиа только для данного справочника.
//
Функция СправочникиГотовыКРаботе(ИменаСправочников) Экспорт

	СтррРезультат = Новый Структура(ИменаСправочников);
	СтррЗначения  = ПрочитатьЗначенияНастроек(ИменаСправочников);
	
	Для Каждого Элемент Из СтррЗначения Цикл
		ВидСправочника = Элемент.Ключ;
		Если ВидСправочника = "НастройкиАгентов" Тогда
			СтррРезультат[ВидСправочника] = СправочникАгентовПроверитьГотовность(Элемент.Значение);
		ИначеЕсли ВидСправочника = "МобильныеУстройства" Тогда
			СтррРезультат[ВидСправочника] = СправочникМобильныхУстройствПроверитьГотовность(Элемент.Значение);
		Иначе
			ВызватьИсключение("Передан неизвестный вид справочника для чтения из системных настроек: " + ВидСправочника);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтррРезультат.Количество() = 1, СтррРезультат[ВидСправочника], СтррРезультат);
	
КонецФункции

Функция НастройкиОбменаГотовыКРаботе() Экспорт

	СтррРезультат = Новый Структура("Готов,КодСостояния,Описание", Истина, "", "");
	СтррЗначения  = ПрочитатьЗначенияНастроек("КаталогДанных,КаталогОбмена,СпособОбмена,СОДАдрес,СОДПорт,FTPАдрес,FTPПароль,FTPПользователь");
	
	Если Не ЗначениеЗаполнено(СтррЗначения.КаталогДанных) Тогда
		
		СтррРезультат.Описание = НСтр("ru = 'Не указан каталог данных.'");
		СтррРезультат.КодСостояния = "НеУказанКаталогДанных";
		
	ИначеЕсли Не КаталогСуществует(СтррЗначения.КаталогДанных) Тогда
		
		СтррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Каталог данных не существует (%1).'"), СтррЗначения.КаталогДанных);
		СтррРезультат.КодСостояния = "НеСуществуетКаталогДанных";
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррЗначения.КаталогОбмена) Тогда
		
		СтррРезультат.Описание = НСтр("ru = 'Не указан каталог обмена.'");
		СтррРезультат.КодСостояния = "НеУказанКаталогОбмена";
		
	ИначеЕсли Не КаталогСуществует(СтррЗначения.КаталогОбмена) Тогда
		
		СтррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Каталог обмена не существует (%1).'"), СтррЗначения.КаталогОбмена);
		СтррРезультат.КодСостояния = "НеСуществуетКаталогОбмена";
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррЗначения.СпособОбмена) Тогда
		
		СтррРезультат.Описание = НСтр("ru = 'Не указан способ обмена.'");
		СтррРезультат.КодСостояния = "НеВыбранСпособ";
		
	Иначе
		
		НазванияРеквизитов = "";		
		
		Если СтррЗначения.СпособОбмена = "КаталогОбмена" Тогда // ничего не проверяем
		
		ИначеЕсли СтррЗначения.СпособОбмена = "АПСОД" Тогда 
			
			Если Не ЗначениеЗаполнено(СтррЗначения.СОДАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Адрес СОД'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.СОДПорт) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Порт СОД'") + """";
			КонецЕсли;
			
		ИначеЕсли СтррЗначения.СпособОбмена = "FTP" Тогда 
			
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPПользователь) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Пользователь FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Адрес FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPПароль) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Пароль FTP'") + """";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НазванияРеквизитов <> "" Тогда
			
			СтррРезультат.Описание = НСтр("ru = 'В настройках обмена не заполнены реквизиты:'") + " "
				+ Прав(НазванияРеквизитов, СтрДлина(НазванияРеквизитов) - 2) + ".";
			СтррРезультат.КодСостояния = "НеЗаполненыРеквизиты";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтррРезультат.Готов = ПустаяСтрока(СтррРезультат.Описание); // если нет описания, то ошибок нет
	
	Возврат СтррРезультат;
	
КонецФункции

// ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм
#КонецОбласти 

#Область ПрограммныйИнтерфейс_СпискиТорговыхТочек

// Функция возвращает параметры детализации списка торговых точек
Функция ПолучитьСписокДетализацииСписковТорговыхТочек() Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить("Организация", 	НСтр("ru = 'Организация'"));
	Список.Добавить("Контрагент", 	НСтр("ru = 'Контрагент'"));
	Список.Добавить("Соглашение", 	НСтр("ru = 'Соглашение'"));
	Список.Добавить("График", 		НСтр("ru = 'График'"));	
	Список.Добавить("ПланПосещений",НСтр("ru = 'План посещений'"));	
	
	Возврат Список;

КонецФункции

// Функция возвращает Истина, если список торговых точек используется для планирования посещений.
// В параметрах ИспользуетсяГрафик, ИспользуетсяПП возвращаются признаки - какой вариант планирования посещений задействован (через График или через ПланПосещений).
Функция СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик = Неопределено, ИспользуетсяПП  = Неопределено) Экспорт
	
	ИспользуетсяГрафик 	= стррОбъект.Детализация.НайтиПоЗначению("График") <> Неопределено;
	ИспользуетсяПП 	   	= стррОбъект.Детализация.НайтиПоЗначению("ПланПосещений") <> Неопределено;
	
	Возврат ИспользуетсяГрафик Или ИспользуетсяПП;
	
КонецФункции

// ПрограммныйИнтерфейс_СпискиТорговыхТочек
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбменДанными

Функция КонстантыПолучитьЗначение(ИмяКонстанты) 

	Перем Значение;
	
	Если Не гКэшЧтенияКонстант.Свойство(ИмяКонстанты, Значение) Тогда
		Значение = Константы[ИмяКонстанты].Получить();
		гКэшЧтенияКонстант.Вставить(ИмяКонстанты, Значение);
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции

Функция НужноПропуститьТекущегоАгента()
	
	Если ВыбНастройкиАгента.СтатусНастроек = 2 Тогда // для агента все настроено
		Текст = НСтр("ru='Пропущен агент по причине не заполненных настроек.'");
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Результат = Истина;
	ИначеЕсли ВыбНастройкиАгента.СтатусНастроек <> 1 Тогда // нет статуса готовности
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выгрузка данных по переданному агенту или по всем агентам.
Процедура ВыгрузитьДанные(Агент) Экспорт

	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.'"), "ОшибкаНастройки");
		Возврат;
	КонецЕсли;

	Если ИспользоватьХарактеристики И Не ВременныеТаблицы.Свойство("СпрХарактеристикиНоменклатурыСлужебный") Тогда
		тзДанные = Новый ТаблицаЗначений;
		тзДанные.Колонки.Добавить("Идентификатор");
		тзДанные.Колонки.Добавить("Номенклатура");
		тзДанные.Колонки.Добавить("Характеристика");
		ВременныеТаблицы.Вставить("СпрХарактеристикиНоменклатурыСлужебный", тзДанные);
	КонецЕсли;

	Если ЗначениеЗаполнено(Агент) Тогда // выгрузка данных для одного агента
		
		ВыгрузитьДанныеДляАгента(Агент);
		
	Иначе // выгрузка данных для всех агентов
		
		ТЗ = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗ Цикл
			ВыгрузитьДанныеДляАгента(СтрокаТ.Пользователь);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Формирование файла выгрузки для переданного агента.
Процедура ВыгрузитьДанныеДляАгента(Агент) Экспорт
	
	Если гКэшСравненияКонфигураций = Неопределено Тогда // используем переменную гКэшСравненияКонфигураций как признак, что нужно загрузить настройки обмена
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
	гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Неопределено); // списки организаций выгрузки от агента к агенту могут отличаться
	
	ВыбНастройкиАгента = ПолучитьНастройкиАгента(Агент);
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОСобытии("Выгрузка для агента: " + СокрЛП(Агент));	
	
	ИмяФайлаВыгрузки = КаталогВременныхФайловАгента() + "FromCDB.xml";
	ДокОбмена = СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки);

	МенеджерВТ = МенеджерВТПолучить();
	ВыгрузитьКонстанты(ДокОбмена);
	тзКартинки = Неопределено;
	ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, тзКартинки);
	ВыгрузитьДокументы(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИзображения(ДокОбмена, тзКартинки);
	
	ВыгрузитьПодтверждения(ДокОбмена);

	ЗакрытьФайлВыгрузки(ДокОбмена);
	
	СохранитьСпрХарактеристикиНоменклатурыСлужебный();
	
	ИмяФайлаАрхиваКартинок = СформироватьАрхивСКартинками(тзКартинки);
	
	ФайлОтправки = УпаковатьФайл(ИмяФайлаВыгрузки, ИмяФайлаАрхиваКартинок);
	
	ОтправитьФайлПоСпособуОбмена(ФайлОтправки);

КонецПроцедуры

// Загрузка данных по переданному агенту или по всем агентам.
// Функция возвращает количество агентов, по которым загружены данные.
Функция ЗагрузитьДанные(Агент) Экспорт

	Количество = 0;
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.'"), "ОшибкаНастройки");
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Агент) Тогда // загрузка данных для одного агента
		
		Если ЗагрузитьДанныеДляАгента(Агент) Тогда
			Количество = Количество + 1
		КонецЕсли;
		
	Иначе // загрузка данных для всех агентов
		
		ТЗ = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗ Цикл
			Если ЗагрузитьДанныеДляАгента(СтрокаТ.Пользователь) Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Количество;

КонецФункции

// Функция возвращает Истина, если данные от агента были успешно загружены.
Функция ЗагрузитьДанныеДляАгента(Агент)

	ВыбНастройкиАгента = ПолучитьНастройкиАгента(Агент);
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьАвтообмен Или СпособОбмена = "АПСОД" Тогда
		ОповеститьОСобытии("Загрузка для агента: " + СокрЛП(Агент));
	КонецЕсли;
	
	Каталог = ЗагрузитьФайлПоСпособуОбмена();
	Если Каталог = Неопределено Тогда // была ошибка копирования/скачивания
		Возврат Ложь;
	КонецЕсли;
	
	ФайлОбмена = ФайлОбменаРаспакованный(Каталог);
	Если ФайлОбмена = Неопределено Тогда
		ОповеститьОСобытии("В zip-архиве не найден файл загрузки.");
	Иначе
		Результат = ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена);
		УдалитьФайлы(ФайлОбмена.ПолноеИмя);
		Если Не Результат Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	ФайлТрека = ФайлОбменаТрек(Каталог);	
	Если ФайлТрека <> Неопределено Тогда
		ЗагрузитьТрек(ФайлТрека, ВыбНастройкиАгента.СсылкаМУ);
		УдалитьФайлы(ФайлТрека.ПолноеИмя);
	КонецЕсли;
	
	Если ОтветнаяВыгрузка Тогда
		ОповеститьОСобытии("Выгрузка ответных данных для агента: " + СокрЛП(Агент));
		ВыгрузитьДанныеДляАгента(Агент);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Возвращает папку, куда скопирован и распакован файл обмена,
// или Неопределено, если произошла ошибка.
//
Функция ЗагрузитьФайлПоСпособуОбмена()

	Если СпособОбмена = "АПСОД" Тогда
		Возврат СОДЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "FTP" Тогда	
		Возврат ФТПЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		Возврат КОЗагрузитьФайл();		
	Иначе
		ВызватьИсключение("Неизвестный способ обмена: " + СпособОбмена);
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция РаспаковатьФайлОбменаВПапку(Источник, КаталогНазначения, ИсточникЯвляетсяКаталогом)
	
	Попытка
		УдалитьФайлы(КаталогНазначения, "To*.*");
		УдалитьФайлы(КаталогНазначения, "gpstrack.txt");
	Исключение
	КонецПопытки;
	
	ФайлАрхив = ?(ИсточникЯвляетсяКаталогом, НайтиФайлОбменаВКаталоге(Источник), Новый Файл(Источник));
	
	Если ФайлАрхив = Неопределено Тогда
		
		Если ИсточникЯвляетсяКаталогом Тогда
			Текст = СтрШаблон_("Данные от агента отсутствуют в каталоге ""%1"".", Источник);
		Иначе
			Текст = "Данные от агента отсутствуют на сервере.";
		КонецЕсли;
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		
		Возврат Ложь;
		
	Иначе
		ПарольАрхива = СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
		АрхивОбмена = Новый ЧтениеZipФайла(ФайлАрхив.ПолноеИмя, ПарольАрхива);
		АрхивОбмена.ИзвлечьВсе(КаталогНазначения);
		АрхивОбмена.Закрыть();
		Попытка
			УдалитьФайлы(ФайлАрхив.ПолноеИмя);
		Исключение
			Текст = "Не удалось удалить файл загрузки: " + ФайлАрхив.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ОтправитьФайлПоСпособуОбмена(ФайлОтправки)

	ИмяФайлаНаСервере = "From1C.zip";
	КаталогАгента = Неопределено;
	
	Если СпособОбмена = "АПСОД" Тогда
		
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаАПС = КаталогАгента + ИмяФайлаНаСервере;
			КопироватьФайл(ФайлОтправки, ИмяФайлаАПС);
		КонецЕсли; 
		
	ИначеЕсли СпособОбмена = "FTP" Тогда
		
		ПодключениеFTP = ФТПСоздатьПодключение();
		Если ПодключениеFTP = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФТППапка = СтрЗаменить(ВыбНастройкиАгента.КаталогОбмена, "\", "/");
		
		ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
		Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
			Если ПодключениеFTP.НайтиФайлы(ФТППапкаСервера).Количество() = 0 Тогда
				ПодключениеFTP.СоздатьКаталог(ФТППапкаСервера);
			КонецЕсли;
			ПодключениеFTP.УстановитьТекущийКаталог(ФТППапкаСервера);
		КонецЕсли;
		
		Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
			ПодключениеFTP.СоздатьКаталог(ФТППапка);
		КонецЕсли;
		
		ИмяФайлаFTP = ФТППапка + "/" + ИмяФайлаНаСервере;
		
		Попытка
			ПодключениеFTP.Записать(ФайлОтправки, ИмяФайлаFTP);
			Текст = "Данные для агента успешно выгружены на FTP-сервер.";
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Исключение	
			Текст = "Данные для агента не отправлены! Причина: ";
			Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
				Текст = Текст + "не существует папка на FTP-сервере " + ФТППапка;
			Иначе
				Текст = Текст + ОписаниеОшибки();				
			КонецЕсли;
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгентСообщить");
		КонецПопытки;
		
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаКО = КаталогАгента + ИмяФайлаНаСервере;
			КопироватьФайл(ФайлОтправки, ИмяФайлаКО);
			Текст = СтрШаблон_("Данные для агента выгружены в файл ""%1"".", ИмяФайлаКО);
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение("Неизвестный способ обмена: " + СпособОбмена);
		
	КонецЕсли;

	Попытка
		УдалитьФайлы(ФайлОтправки);
	Исключение
	КонецПопытки;

КонецПроцедуры

#Область ПрограммныйИнтерфейс_ОбменДанными_ФТП

Функция ФТПСоздатьПодключение()
	
	Если ПустаяСтрока(FTPАдрес) Или ПустаяСтрока(FTPПользователь) Тогда
		Текст = "В настройках обмена заданы не все параметры соединения с FTP-сервером. Работа с FTP невозможна!";
		ОповеститьОСобытии(Текст, "ОшибкаНастройки");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПодключениеКФТП = Новый FTPСоединение(FTPАдрес,, FTPПользователь, FTPПароль,, FTPПассивныйРежим, 0);		
	Исключение
		ОповеститьОСобытии("Ошибка подключения. Причина: " + ОписаниеОшибки(), "ОшибкаОбмен");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ПодключениеКФТП;
	
КонецФункции //Функция СоздатьПодключениеКФТП()

// Возвращает папку, куда скопирован и распакован файл обмена, 
// или Неопределено, если произошла ошибка.
// 
Функция ФТПЗагрузитьФайл()
	
	ПодключениеКФТП = ФТПСоздатьПодключение();	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяФайла = "To1C.zip";
	
	ФТППапка = ВыбНастройкиАгента.КаталогОбмена;
	Если ПустаяСтрока(ФТППапка) Тогда
		Текст = "В ""Настройках агентов"" у агента не указана папка обмена!";
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;
	
	ФТППапка = ДополнитьСлешВПуть(ФТППапка, "/");
	
	ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
	Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
		ПодключениеКФТП.УстановитьТекущийКаталог(ФТППапкаСервера);
	КонецЕсли; 
	
	КаталогТ = КаталогВременныхФайловДляТранспорта(ВыбНастройкиАгента.КаталогОбмена);
	
	ИмяФайлаФТП   = ФТППапка + ИмяФайла;
	ФайлЛокальный = КаталогТ + ИмяФайла;
	
	// копируем файлы с данными с ФТП в каталог временных файлов
	Попытка    		
		Если ПодключениеКФТП.НайтиФайлы(ФТППапка, "To1C.*").Количество() = 0 Тогда
			ОповеститьОСобытии("Нет данных на FTP-сервере.",,, "ТекущийАгентСообщить");
			Возврат Неопределено;
		Иначе
			ПодключениеКФТП.Получить(ИмяФайлаФТП, ФайлЛокальный);				
		КонецЕсли;  		
	Исключение             
		Текст = "Ошибка при скачивании файла с FTP-сервера. Возможная причина: отсутсвует папка агента (%1) на FTP-сервере. Данные от агента не загружены!";
		ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
		Текст = "Папка на FTP-сервере будет создана автоматически при выгрузке данных из 1С:Предприятия на FTP-сервер.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Возврат Неопределено;			
	КонецПопытки;   	
	
	// удаляем файл с данными на ФТП-сервере
	Попытка
		ПодключениеКФТП.Удалить(ФТППапка, "To1C.*");
	Исключение
		Текст = "Не удалось удалить файл ""To1C.zip"" на FTP-сервере. Причина: " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
	КонецПопытки; 
	
	Каталог = КаталогВременныхФайловАгента();	
	Если Не РаспаковатьФайлОбменаВПапку(ФайлЛокальный, Каталог, Ложь) Тогда
		Каталог = Неопределено;
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции // ЗагрузитьФайлСФТП() 

// ПрограммныйИнтерфейс_ОбменДанными_ФТП
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбменДанными_СОД

// Возвращает папку, куда скопирован и распакован файл обмена,
// или Неопределено, если произошла ошибка.
// 
Функция СОДЗагрузитьФайл()

	Каталог = КаталогВременныхФайловАгента(); // функция всегда возвращает корректный результат
	
	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ФайлТрек = ФайлОбменаТрек(КаталогОбменаАгента);
	
	Если ФайлТрек <> Неопределено Тогда
		КопироватьФайл(ФайлТрек.ПолноеИмя, Каталог + ФайлТрек.Имя);
		Попытка
			УдалитьФайлы(ФайлТрек.ПолноеИмя);
		Исключение
			Текст = "Не удалось удалить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
	КонецЕсли;

	Если Не РаспаковатьФайлОбменаВПапку(КаталогОбменаАгента, Каталог, Истина) Тогда
		Каталог = Неопределено;
	КонецЕсли;
	
	Возврат Каталог;

КонецФункции


Функция КОЗагрузитьФайл()
	
	Каталог = КаталогВременныхФайловАгента(); // функция всегда возвращает корректный результат
	
	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаспаковатьФайлОбменаВПапку(КаталогОбменаАгента, Каталог, Истина) Тогда
		Каталог = Неопределено;
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

// Функция возвращает путь к каталогу обмена для агента, указанного в реквизите обработки ВыбНастройкиАгента.
// Если настройки не заданы или если не удалось создать каталог, возращает Неопределено.
// 
// Параметры:
//	СоздаватьКаталог - Булево - Если Истина, то каталог будет создан (если его нет), иначе каталог будет только проверен на существование.
//
Функция КаталогОбменаАгента(СоздаватьКаталог)

	Если ПустаяСтрока(КаталогОбмена) Тогда
		
		ОповеститьОСобытии("Не указан каталог обмена в ""Настройках обмена"".", "ОшибкаНастройки");
		Результат = Неопределено;
		
	ИначеЕсли ПустаяСтрока(ВыбНастройкиАгента.КаталогОбмена) Тогда
		
		Текст = "Не указан каталог обмена для агента в ""Настройках агентов"", агент: " + Строка(ВыбНастройкиАгента.Пользователь);
		ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
		Результат = Неопределено;
		
	ИначеЕсли Не СоздаватьКаталог Тогда // проверяем каталог на существование
		
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = "Не существует каталог """ + КаталогАгента + """, указанный в настройках агента. ";
			Если СпособОбмена = "АПСОД" Тогда
				Текст = Текст + "Обновите файл настроек службы СОД в ""Настройках обмена""."; 
			КонецЕсли;
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгентСообщить");
			Результат = Неопределено;			
		КонецЕсли;
		
	Иначе // пытаемся создать каталог, если его нет.
		
		ПроверитьИСоздатьКаталог(КаталогОбмена);
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		ПроверитьИСоздатьКаталог(КаталогАгента);
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = "Не удалось создать каталог обмена для агента, каталог: " + КаталогАгента; 
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
			Результат = Неопределено;
		КонецЕсли;			
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Процедура пытается получить каталог обмена данными для агента.
// Если попытка неудачная, то выводистя сообщение.
// Каталог вовзращается в параметре Каталог.
Процедура КаталогОбменаАгентаПолучитьИПроверить(Каталог)
	
	Каталог = КаталогОбменаАгента(Истина);
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Текст = "Данные для агента не выгружены - не задан каталог обмена агента.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгентСообщить");
	КонецЕсли; 
	
КонецПроцедуры

// Загружает данные из файла обмена по данным из внешнего события.
// Содержимое массива мПараметры:
//	0-й - идентификатор МУ
//	1-й - псевдоним торгвого агента (владельца КПК)
//	2-й - директория обмена данными 
//	3-й - имя полученного с КПК файла с директорией
//	4-й - время сеанса
//	5-й - контрольная сумма полученного файла
Функция СОДЗагрузитьДанныеПоВнешнемуСобытию(мПараметры, ЗагрузитьВсеНастройки = Ложь) Экспорт
	
	стрИдМУ 	= мПараметры[0];
	Псевдоним 	= мПараметры[1];
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения", Ложь, Новый Массив);
	
	Если ЗагрузитьВсеНастройки Тогда
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
#Область ПроверкаСправочников

	Если Не ВременныеТаблицы.Свойство("МобильныеУстройства") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Не заполнен справочник мобильных устройств.'"), Истина);
	КонецЕсли;
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда 
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Не заполнены настройки торговых агентов.'"), Истина);
	КонецЕсли;
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
	идМУ = Новый УникальныйИдентификатор(стрИдМУ);
	ЭлементМУ = ВременныеТаблицы.МобильныеУстройства.Найти(идМУ, "ИдентификаторМУ");
	Если ЭлементМУ = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не найдено мобильное устройство с идентификатором ""%1"".'"), стрИдМУ);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	ЭлементАгент = ВременныеТаблицы.НастройкиАгентов.Найти(ЭлементМУ.ID, "СсылкаМУ");
	Если ЭлементАгент = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не найден агент для мобильного устройства с идентификатором ""%1"" (%2).'"), стрИдМУ, ЭлементМУ.Наименование);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	КаталогОбменаИзСпрАгентов = СокрЛП(ЭлементАгент.КаталогОбмена);
	КаталогОбменаИзСОД = СокрЛП(мПараметры[2]);
	Если НРег(КаталогОбменаИзСпрАгентов) <> НРег(КаталогОбменаИзСОД) Тогда
		Текст = СтрШаблон_(НСтр("ru = 'По сведениям из настроек СОД поступили данные от агента ""%1"", папка: ""%2"".'"), Псевдоним, КаталогОбменаИзСОД);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		Текст = СтрШаблон_(НСтр("ru = 'По сведениям из настроек агентов указаны другие данные (агент ""%1"", папка: ""%2"")!'"), ЭлементАгент.Пользователь, КаталогОбменаИзСпрАгентов);
		ВывестиСообщение(СтррРезультат, Текст);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Папки обмена отличаются! Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;

// ПроверкаСправочников
#КонецОбласти 

	ЗагрузитьДанныеДляАгента(ЭлементАгент.Пользователь);
	
	Возврат СтррРезультат;
	
КонецФункции

Функция СОДПопыткаСгенерироватьФайлНастройки() Экспорт

	СпособОбмена = ПрочитатьЗначениеНастройки("СпособОбмена");
	
	Если СпособОбмена = "АПСОД" Тогда
		Возврат СОДСгенерироватьФайлНастройки();
	Иначе
		мЗамечания = Новый Массив;
		ДобавитьЗамечание(мЗамечания, НСтр("ru='В настройках выключен способ обмена через Агент Плюс СОД'"), "СпособОбмена");
		Возврат Новый Структура("Замечания", мЗамечания);
	КонецЕсли;

КонецФункции

// Добавляет сообщение в массив сообщений для будущего вывода на Клиенте.
Процедура ДобавитьЗамечание(мЗамечания, Описание, Реквизит)
	СтррЗамечание = Новый Структура("Описание,Реквизит", Описание, Реквизит);
	мЗамечания.Добавить(СтррЗамечание);
КонецПроцедуры

// Функция генерирует и возвращает текст файла настройки СОД.
// Предварительно проверяет зависимые настройки СОД.
// Фукнкция не проверяет существование папки обмена, т.к. запускается на Сервере.
Функция СОДСгенерироватьФайлНастройки() Экспорт
	
	СтррРезультат = Новый Структура;
	
	СтррЗначения = ПрочитатьЗначенияНастроек("НастройкиАгентов,МобильныеУстройства,СОДПорт,КаталогОбмена");
	
	ТЗНастройкиАгентов = СтррЗначения.НастройкиАгентов;
	ТЗМУ 			   = СтррЗначения.МобильныеУстройства;
	
#Область ПроверкаРеквизитовИСправочников
	// Проверяем значения настроек СОД и зависимых настроек
	мЗамечания = Новый Массив;
	
	Если ПустаяСтрока(СтррЗначения.КаталогОбмена) Тогда
		ДобавитьЗамечание(мЗамечания, НСтр("ru='Не указано значение настройки ""Каталог обмена""!'"), "КаталогОбмена");
	КонецЕсли;
	
	Если СтррЗначения.СОДПорт = 0 Тогда
		ДобавитьЗамечание(мЗамечания, НСтр("ru='Не указан порт службы Агент Плюс СОД'"), "СОДПорт");
	КонецЕсли;
	
	СтррСтатус = СправочникАгентовПроверитьГотовность(ТЗНастройкиАгентов);
	Если Не СтррСтатус.Готов Тогда
		ДобавитьЗамечание(мЗамечания, СтррСтатус.Описание, "НастройкиАгентов");
	КонецЕсли;
	
	СтррСтатус = СправочникМобильныхУстройствПроверитьГотовность(ТЗМУ);
	Если Не СтррСтатус.Готов Тогда
		ДобавитьЗамечание(мЗамечания, СтррСтатус.Описание, "МобильныеУстройства");
	КонецЕсли;
	
	СтррРезультат.Вставить("Замечания", мЗамечания);
	
	Если мЗамечания.Количество() > 0 Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
// ПроверкаРеквизитовИСправочников
#КонецОбласти 
	
	ИдКонфигурации = ВРег(Строка(Новый УникальныйИдентификатор));
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("<?xml version=""1.0"" encoding=""UTF-16""?>");
	Текст.ДобавитьСтроку("<APlusServer VERSION=""2.5"">");
	Текст.ДобавитьСтроку("<ServerConfig PortExternal=""" + Формат(СтррЗначения.СОДПорт, "ЧГ=0'") 
		+ """ ConfigID=""" + ИдКонфигурации + """ />");
	Текст.ДобавитьСтроку("<!-- PortExternal - номер порта для запросов от мобильного устройства -->");
	Текст.ДобавитьСтроку("<!-- Образец описания настроек для мобильного устройства: -->");
	Текст.ДобавитьСтроку("<!-- PPC DEVICE_ID=""00000000-0000-0000-0000-000000000000"" PSEUDONIM=""Agent1"" DIRECTORY=""PPC1"" -->");
	
	КоличествоАгентов  = 0;
	
	Для Каждого НастройкаАгента Из ТЗНастройкиАгентов Цикл
		
		Если НастройкаАгента.СтатусНастроек <> 1 Тогда // включаем только для агентов с зелеными галками - для неработающих агентов МУ от обмена отключаем
			Продолжить;
		КонецЕсли;
		
		СсылкаМУ = НастройкаАгента.СсылкаМУ;
		МУ = ТЗМУ.Найти(СсылкаМУ, "ID");
		
		Если МУ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдМУ 		= ВРег(Строка(МУ.ИдентификаторМУ));
		Псевдоним 	= СокрЛП(Строка(НастройкаАгента.Пользователь)) + " (" + СокрЛП(МУ.Наименование) + ")";
		Каталог		= НастройкаАгента.КаталогОбмена;
		
		Текст.ДобавитьСтроку("<PPC DEVICE_ID=""" + ИдМУ + """ PSEUDONIM=""" + Лев(Псевдоним, 60) + """ DIRECTORY=""" + Каталог + """ />");
		КоличествоАгентов = КоличествоАгентов + 1;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("</APlusServer>");
	
	ПолноеИмяФайла = ДополнитьСлешВПуть(СтррЗначения.КаталогОбмена) + "config.xml";
	
	СтррРезультат.Вставить("Текст", 			Текст);
	СтррРезультат.Вставить("Кодировка", 		КодировкаТекста.UTF16);
	СтррРезультат.Вставить("ПолноеИмяФайла", 	ПолноеИмяФайла);
	СтррРезультат.Вставить("КоличествоАгентов", КоличествоАгентов);
	
	Возврат СтррРезультат;
	
КонецФункции // СгенерироватьФайлНастройкиСОД

// ПрограммныйИнтерфейс_ОбменДанными_СОД
#КонецОбласти

// Преобразует исходную строку в транслит.
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	
	Результат = "";
	
	Буквы = "аa,бb,вv,гg,дd,еe,ёe,жzh,зz,иi,йy,кk,лl,мm,нn,оo,пp,рr,сs,тt,уu,фf,хkh,цts,чch,шsh,щshch,ъ,ыy,ь,эe,юyu,яya,";
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		Если КодСимвола(Символ) < 128 Тогда
			СимволЛатиницей = Символ;
		Иначе
			ПозНачала = Найти(Буквы, НРег(Символ)); // Поиск соответствия без учета регистра.			
			Если ПозНачала = 0 Тогда
				// Другие символы остаются "как есть".
				СимволЛатиницей = Символ;
			Иначе
				ПозНачала = ПозНачала + 1;
				ПозКонца = ПозНачала;
				Пока Сред(Буквы, ПозКонца, 1) <> "," Цикл
					ПозКонца = ПозКонца + 1;
				КонецЦикла;
				СимволЛатиницей = Сред(Буквы, ПозНачала, ПозКонца - ПозНачала);
				Если Символ = ВРег(Символ) Тогда
					СимволЛатиницей = ВРег(СимволЛатиницей); // восстанавливаем регистр
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция сокращает слово до N символов. Слово передается латиницей.
Функция СократитьСлово(Слово, МаксДлина)
	
	Длина = СтрДлина(Слово);
	Если Длина <= МаксДлина Тогда
		Возврат Слово;
	КонецЕсли;
	
	Результат = Лев(Слово, МаксДлина - 1); // пытаемся последним символом добавить согласную букву
	Для Поз = МаксДлина По Длина Цикл
		Символ = Сред(Слово, Поз, 1);
		Если 0 = Найти("aeiou", Символ) Тогда // согласная буква
			Результат = Результат + Символ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) <> МаксДлина Тогда
		Результат = Лев(Слово, МаксДлина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает уникальное название для имени файла на основе переданного имени.
// Если в переданном имени есть несколько слов, то функция стремится первые три слова включить в название по правилу:
// первые 4 символа - от первого слова + по одному символу от второго и третьего слова (т.е. сокращение от фамилии и инициалов).
// 
// Параметры:
//	Название - Строка - исходная строка, на основании которой генерировать название.
//	мЗапретныеНазвания - Массив - массив названий для проверки на уникальность.
//
Функция ПреобразоватьВНазваниеКаталога(Знач Название, мЗапретныеНазвания)
	
	Название = НРег(СтрокаЛатиницей(СокрЛП(Название)));
	
	ИсключаемыеСимволы = ",;:?!-+\/=<>~'""@#$%^&*()[]{}|&"; // запрещенные символы в названии имен файлов
	ВсегоИсключать = СтрДлина(ИсключаемыеСимволы);
	Для Поз = 1 По ВсегоИсключать Цикл // цикл исключения запрещенных символов
		ИсключитьСимвол = Сред(ИсключаемыеСимволы, Поз, 1);
		Название = СтрЗаменить(Название, ИсключитьСимвол, "");
	КонецЦикла;
	
	Название = СокрЛП(СтрЗаменить(Название, ".", " ")); // заменяем точки на пробелы
	
	// исключаем идущие подряд пробелы
	ПрежнееНазвание = Неопределено;
	Пока Название <> ПрежнееНазвание Цикл
		ПрежнееНазвание = Название;
		Название = СтрЗаменить(Название, "  ", " ");
	КонецЦикла;
	
	Если ПустаяСтрока(Название) Тогда
		Название = "folder";
	ИначеЕсли СтрДлина(Название) < 6 Тогда
		Название = Лев(Название + "_fldr", 6);
	Иначе
		мСлова = СтрРазделить_(Название, " ");
		Если мСлова.Количество() > 1 Тогда // название из 2 и более слов
			Название = СократитьСлово(мСлова[0], 4) + Лев(мСлова[1], 1) + ?(мСлова.Количество() > 2, Лев(мСлова[2], 1), "") + "_fldr";
		КонецЕсли;
		Название = Лев(Название, 6);		
	КонецЕсли;
	
	ПрежнееНазвание = Название;
	Номер = 1;
	Пока мЗапретныеНазвания.Найти(Название) <> Неопределено Цикл
		Название = ПрежнееНазвание + Строка(Номер);
		Номер = Номер + 1;
	КонецЦикла;
	
	Возврат Название;
	
КонецФункции

// Функция генерирует имя папки 
Функция ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СсылкаМУ, тзМУ)
	
	Результат = "";	
	Идентификатор = Неопределено;

	стзМУ = тзМУ.Найти(СсылкаМУ, "ID");
	Если стзМУ = Неопределено Тогда // ошибка - МУ с идентификатором СсылкаМУ не найдено
	ИначеЕсли ЗначениеЗаполнено(стзМУ.ИдентификаторМУ) Тогда
		Идентификатор = стзМУ.ИдентификаторМУ;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Результат = НРег(СтрЗаменить(Строка(Идентификатор), "-" ,""));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Название каталога, которое интерпретируется как автоматически генерируемое.
Функция НазваниеАвтоКаталога() Экспорт
	
	Возврат НСтр("ru = 'Авто'");
	
КонецФункции

// Процедура заполняет названия каталогов агентов уникальными значениями.
Процедура ЗаполнитьНазванияКаталоговАгентов() Экспорт

	мНазванияКаталогов = НастройкиАгентов.ВыгрузитьКолонку("КаталогОбмена");
	АвтоКаталог = НРег(НазваниеАвтоКаталога());
	ИменаПодкаталоговНаОсновеФИО = ПрочитатьЗначениеНастройки("ИменаПодкаталоговОбменаНаОсновеФИО");
	Если ИменаПодкаталоговНаОсновеФИО = Неопределено Тогда
		ИменаПодкаталоговНаОсновеФИО = Ложь;
	КонецЕсли; 
	
	Если Не ИменаПодкаталоговНаОсновеФИО Тогда
	    тзМУ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТипЗнч(тзМУ) <> Тип("ТаблицаЗначений") Тогда // МУ еще нет в БД, задать каталоги не можем
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТ Из НастройкиАгентов Цикл
		Если ПустаяСтрока(СтрокаТ.КаталогОбмена) Или СокрЛП(НРег(СтрокаТ.КаталогОбмена)) = АвтоКаталог Тогда
			Если ИменаПодкаталоговНаОсновеФИО Тогда // название каталога на основе ФИО
				СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталога(СтрокаТ.Пользователь.Наименование, мНазванияКаталогов);
			Иначе // 
			    СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СтрокаТ.СсылкаМУ, тзМУ);
			КонецЕсли; 
			мНазванияКаталогов.Добавить(СтрокаТ.КаталогОбмена);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ПрограммныйИнтерфейс_ОбменДанными
#КонецОбласти

// Возвращает настройки агента.
Функция ПолучитьНастройкиАгента(Агент)

	ТЗ = ВременныеТаблицы.НастройкиАгентов;
	СтрокаТ = ТЗ.Найти(Агент, "Пользователь");
	Если СтрокаТ = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;		
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция возвращает настройки агента. В отличии от функции ПолучитьНастройкиАгента() читает данные сразу из временного хранилища.
Функция ПолучитьНастройкиАгентаИзВХ(Агент, стрРеквизиты = Неопределено) Экспорт

	Результат = Неопределено;
	
	ТЗ = ПрочитатьЗначениеНастройки("НастройкиАгентов");
	Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		СтрокаТ = ТЗ.Найти(Агент, "Пользователь");
		Если СтрокаТ <> Неопределено Тогда
			Если стрРеквизиты = Неопределено Тогда
				Результат = Новый Структура;
				Для Каждого Колонка Из ТЗ.Колонки Цикл
					Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
				КонецЦикла;
			Иначе
				Результат = Новый Структура(стрРеквизиты);
				Для Каждого ЭлементСтруктуры Из Результат Цикл
					Результат[ЭлементСтруктуры.Ключ] = СтрокаТ[ЭлементСтруктуры.Ключ];
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция НастройкиДляТекущегоАгента() Экспорт
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	ВыбНастройкиАгента = ПолучитьНастройкиАгента(ВыбАгент);
	стррРезультат = Новый Структура("ВыбНастройкиАгента,Организации", ВыбНастройкиАгента, ОрганизацииВыгрузки());
	Возврат стррРезультат;
	
КонецФункции

Функция ЗапросыОбновления()

	Если Не ВременныеТаблицы.Свойство("ЗапросыМобильныхУстройств") Тогда // значит статусы партнеров не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.ЗапросыМобильныхУстройств;
	КонецЕсли;
	
КонецФункции // ЗапросыОбновления()

#Область ДополнительныеРеквизиты

Функция ИмяСвойстваДокументШирота()
	Возврат "АгентПлюсДокументШирота";
КонецФункции 

Функция ИмяСвойстваДокументДолгота() 
	Возврат "АгентПлюсДокументДолгота";
КонецФункции 

Функция ИмяСвойстваДокументВремяНачала()
	Возврат "АгентПлюсДокументВремяНачала";
КонецФункции 

Функция ИмяСвойстваДокументВремяОкончания()
	Возврат "АгентПлюсДокументВремяОкончания";
КонецФункции 

Функция ИмяСвойстваШиротаПартнер() Экспорт
	Возврат "АгентПлюсШиротаПартнер";
КонецФункции 

Функция ИмяСвойстваДолготаПартнер() Экспорт
	Возврат "АгентПлюсДолготаПартнер";
КонецФункции 

Функция ИмяСвойстваАдресИзСервисаПартнер() Экспорт
	Возврат "АгентПлюсАдресИзСервиса";
КонецФункции 

Функция ДополнительноеСвойствоПоНаименованию(ИмяСвойства) Экспорт

	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
	Возврат Свойство;
	
КонецФункции 

Функция ТипСвойстваКоординатыGPS()
	Возврат Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
КонецФункции 

Функция ПроверитьДополнительныеРеквизитыСправочникаПартнеры() Экспорт

	ствРеквизиты = Новый Соответствие;
	ствРеквизиты.Вставить(ИмяСвойстваШиротаПартнер(), 0);
	ствРеквизиты.Вставить(ИмяСвойстваДолготаПартнер(), 0);
	ствРеквизиты.Вставить(ИмяСвойстваАдресИзСервисаПартнер(), 0);
	
	//НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие; в УТ общие наборы хранятся с пустым значением реквизита "НаборСвойств"

	Выборка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.НаборСвойств) Тогда
			Наименование = Выборка.Наименование;
			Значение = ствРеквизиты.Получить(Наименование);
			Если Значение <> Неопределено Тогда
				ствРеквизиты[Наименование] = Значение + 1;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	СтрДубли  = "";	
	СтрПустые = "";

	Для каждого Элемент Из ствРеквизиты Цикл
		Если Элемент.Значение > 1 Или Элемент.Значение = 0 Тогда
			Если Элемент.Значение > 1 Тогда
				СтрДубли  = СтрДубли  + ?(СтрДубли  = "", "", ", ") + Элемент.Ключ + " (" + Строка(Элемент.Значение) + ")";
			Иначе
				СтрПустые = СтрПустые + ?(СтрПустые = "", "", ", ") + Элемент.Ключ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	мСообщения = Новый Массив;
	
	Если Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() = Ложь Тогда
		Текст = "Выключен режим ""Использовать дополнительные реквизиты и сведения"" - координаты партнеров не сохранятся. Перейдите в ""Общие настройки"" 1С:Предприятия и выберите флажок ""Использовать дополнительные реквизиты и сведения"".";
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрДубли <> "" Тогда
		Текст = "В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" указаны дубли названий реквизитов:";
		Текст = Текст + ?(СтрДлина(СтрДубли) > 30, Символы.ПС, " ") + СтрДубли + "." + Символы.ПС + "Удалите лишние реквизиты!";
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрПустые <> "" Тогда
		Текст = "В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" не указаны реквизиты:";
		Текст = Текст + ?(СтрДлина(СтрПустые) > 30, Символы.ПС, " ") + СтрПустые + "." + Символы.ПС + "Создайте недостающие реквизиты!";
		мСообщения.Добавить(Текст);
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОшибки,Сообщения", мСообщения.Количество() <> 0, мСообщения);

КонецФункции

Процедура СоздатьДополнительныеРеквизитыДокументов() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	ИмяСвойства = ИмяСвойстваДокументШирота();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Широта", 
			ТипСвойстваКоординатыGPS(), НСтр("ru = 'Географическая широта места создания документа'"));
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДокументДолгота();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Долгота", 
			ТипСвойстваКоординатыGPS(), НСтр("ru = 'Географическая долгота места создания документа'"));
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДокументВремяНачала();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Время начала", 
			ТипСвойства, НСтр("ru = 'Время начала работы с документом в МУ'"));
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДокументВремяОкончания();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, "МУ: Время окончания", 
			ТипСвойства, НСтр("ru = 'Время окончания работы с документом в МУ'"));
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДополнительныеРеквизитыСправочников() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	ИмяСвойства = ИмяСвойстваШиротаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru = 'Географическая широта местоположения (в формате NMEA)'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Широта", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДолготаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru = 'Географическая долгота местоположения (в формате NMEA)'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Долгота", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваАдресИзСервисаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(128));
		Подсказка = НСтр("ru = 'Адрес, полученный из веб-сервиса определения координат'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Адрес из веб-сервиса", ТипСвойства, Подсказка);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДополнительноеСведениеДляДокументов(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)

	НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Истина, Подсказка);
	
	мНаборы = Новый Массив;
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента);
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ПриходныйКассовыйОрдер);
	мНаборы.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РасходныйКассовыйОрдер);
	
	Для Каждого НаборСсылка Из мНаборы Цикл
		ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент);
	КонецЦикла;

КонецПроцедуры

Процедура СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)

	НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Ложь, Подсказка);
	НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие;
	ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент)

КонецПроцедуры

Процедура ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, Элемент)

	НаборОбъект = НаборСсылка.ПолучитьОбъект();
	
	Если Элемент.ЭтоДополнительноеСведение Тогда
		
		НовоеСвойство = НаборОбъект.ДополнительныеСведения.Добавить();
		НовоеСвойство.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоСведений, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоСведений = Число(СтароеКоличество) + 1;
		
	Иначе	
		
		НовыйРеквизит = НаборОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйРеквизит.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоРеквизитов, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоРеквизитов = Число(СтароеКоличество) + 1;
		
	КонецЕсли; 
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		НаборОбъект.Используется = Истина;	
	КонецЕсли; 
	
	НаборОбъект.Записать();

КонецПроцедуры

Функция ДанныеОДополнительныхСвойствахДокументаДляМУ()

	Если гДанныеОДополнительныхСвойствахДокументаДляМУ = Неопределено Тогда
	
		стррДанные = Новый Структура("тзРеквизиты,стзШирота,стзДолгота,стзВремяНачала,стзВремяОкончания");
		
		тзРеквизиты = Новый ТаблицаЗначений;
		тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		тзРеквизиты.Колонки.Добавить("Значение");
		
		стррДанные.тзРеквизиты = тзРеквизиты;
		
		СтрокаТ = тзРеквизиты.Добавить();	
		СтрокаТ.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());
		стррДанные.стзШирота = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
		стррДанные.стзДолгота = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
		стррДанные.стзВремяНачала = СтрокаТ;
		
		СтрокаТ = тзРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
		стррДанные.стзВремяОкончания = СтрокаТ;
		
		гДанныеОДополнительныхСвойствахДокументаДляМУ = стррДанные;
		
	КонецЕсли; 
	
	Возврат гДанныеОДополнительныхСвойствахДокументаДляМУ;

КонецФункции  

// Запись дополнительных свойств документа.
Процедура ЗаписатьДополнительныеСвойстваДокумента(ДокументСсылка, стррДокумент)

	стррДанные = ДанныеОДополнительныхСвойствахДокументаДляМУ();
	
	стррДокумент.Свойство("Широта", 		стррДанные.стзШирота.Значение);
	стррДокумент.Свойство("Долгота", 		стррДанные.стзДолгота.Значение);
	стррДокумент.Свойство("ДатаНачала", 	стррДанные.стзВремяНачала.Значение);
	стррДокумент.Свойство("ДатаОкончания", 	стррДанные.стзВремяОкончания.Значение);
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокументСсылка, стррДанные.тзРеквизиты);	

КонецПроцедуры

// ДополнительныеРеквизиты
#КонецОбласти

Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт

	Попытка
		Возврат ПолучитьМакет(ИмяМакета);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#Область ВнешняяОбработка

Функция СведенияОВнешнейОбработке() Экспорт

	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Обмен даннми с приложением 'Агент плюс'");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", ВерсияОбработки());
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Обработка обмена данными с приложением 'Агент плюс: Мобильная торговля'");

	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор");
	тзКоманд.Колонки.Добавить("Представление");
	тзКоманд.Колонки.Добавить("Модификатор");
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение");
	тзКоманд.Колонки.Добавить("Использование");

	стзКоманд = тзКоманд.Добавить();
	стзКоманд.Идентификатор = "ОткрытьОтчет";
	стзКоманд.Представление = "Открыть";
	стзКоманд.Использование = "ОткрытиеФормы";
	стзКоманд.ПоказыватьОповещение = Истина;	
	
	//стзКоманд = тзКоманд.Добавить();
	//стзКоманд.Идентификатор = "Загрузить";
	//стзКоманд.Представление = "Загрузить данные";
	//стзКоманд.Использование = "ВызовСерверногоМетода";
	//стзКоманд.ПоказыватьОповещение = Истина;	

	//стзКоманд = тзКоманд.Добавить();
	//стзКоманд.Идентификатор = "Выгрузить";
	//стзКоманд.Представление = "Выгрузить данные";
	//стзКоманд.Использование = "ВызовСерверногоМетода";
	//стзКоманд.ПоказыватьОповещение = Истина;	

	РегистрационныеДанные.Вставить("Команды", тзКоманд);

	Возврат РегистрационныеДанные;
	
КонецФункции

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения = Неопределено) Экспорт

	// Общие действия перед началом выполнения команд.
	УстановитьПривилегированныйРежим(Истина);

	//Диспетчеризация обработчиков команд.
	Если ИмяКоманды = "Загрузить" Тогда
		ЗагрузитьДанные(Неопределено);
	ИначеЕсли ИмяКоманды = "Выгрузить" Тогда
		ВыгрузитьДанные(Неопределено);
	КонецЕсли;

КонецПроцедуры

// Возвращает номер версии обработки. Номер версии обработки указывается в синониме обработки в круглых скобках.
Функция ВерсияОбработки() Экспорт
	
	Комментарий = Метаданные().Комментарий;
	ПозНачала = Найти(Комментарий, "(");
	ПозКонца  = Найти(Комментарий, ")");
	
	Если ПозНачала = 0 Или ПозКонца = 0 Тогда
		ВызватьИсключение("В Комментарии обработки в метаданных не указана версия обработки! Версия должна указываться в круглых скобках!");
	КонецЕсли;
	
	Результат = ИзвлечьВерсию(Сред(Комментарий, ПозНачала+1, ПозКонца - ПозНачала - 1));
	
	Возврат Результат;
	
КонецФункции

Функция ИзвлечьВерсию(стрВерсия)
	
	Результат = "";
	МаксИндекс = стрДлина(стрВерсия);
	
	Для Индекс = 1 По МаксИндекс Цикл
		Символ = Сред(стрВерсия, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код > 45 И Код < 58 И Код <> 47  Тогда
			Результат = Результат + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Пока Лев(стрВерсия, 1) = "."  Цикл
		Результат = Сред(стрВерсия, 2);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// ВнешняяОбработка
#КонецОбласти

#Область ПрограммныйИнтерфейс_ПланПосещений

Функция ПланПосещенийНомерПунктаВнеПлана() Экспорт
	Возврат 99999;
КонецФункции

// Функция возвращает таблицу плана посещений, сгенерированную из "Cписка торговых точек", переданного в параметре.
// 
// Параметры:
// 
//	стррПараметры - Структура - структура со свойствами:
//  	Период - СтандартныйПериод - период отчета
//  	СсылкаСписокТТ  - Строка или УникальныйИдентификатор - идентификатор списка торговых точек
//  
// Возвращаемое значение:
//  ТаблицаЗначений, в структуре стррПараметры возвращается свойство "ВсегоДней" - сколько дней в таблице плана посещений.
//  
Функция ПолучитьПланПосещенийДляОтчета(стррПараметры) Экспорт

	стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", стррПараметры.СсылкаСписокТТ);
	
	ИспользуетсяГрафик = Неопределено;
	ИспользуетсяПП 	   = Неопределено;
	
	Если Не стррПараметры.Свойство("ИгнорироватьОтсутствиеПлана") Или стррПараметры.ИгнорироватьОтсутствиеПлана = Ложь Тогда
		Если стррОбъект = Неопределено Тогда
		    ВызватьИсключение("Не найден список торговых точек с идентификатором: " + стррПараметры.СсылкаСписокТТ);
		КонецЕсли; 
	КонецЕсли; 
	
	Период = стррПараметры.Период;	
	ВсегоДней = (НачалоДня(Период.ДатаОкончания) - НачалоДня(Период.ДатаНачала)) / 86400 + 1;			
	
	Если стррОбъект <> Неопределено Тогда 
		
		СписокБезПланаИГрафика = Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик, ИспользуетсяПП);
		
		ПериодПлана = стррОбъект.ПериодГрафикаПлана;
		
		ПромДатаНачала = ?(ПериодПлана = 7, НачалоНедели(Период.ДатаНачала), стррОбъект.ДатаНачала); // дата начала плана посещений
		РазницаДней = (Период.ДатаНачала - ПромДатаНачала) / 86400;
		
	КонецЕсли;
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(5, 0);
	ТипЧисло  = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Партнер", 	Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗРезультат.Колонки.Добавить("Адрес", 		ТипСтрока);
	ТЗРезультат.Колонки.Добавить("НомерВПлане",	ТипЧисло); // номер строки в ТЗ "Состав" списка ТТ
	
	стррПараметры.Вставить("ВсегоДней", ВсегоДней);
	
	Для День = 1 По ВсегоДней Цикл
		ТЗРезультат.Колонки.Добавить("Д" + День, ТипСтрока);  // факт посещения
		ТЗРезультат.Колонки.Добавить("П" + День, ТипЧисло); // план посещения (порядковые номера посещения, если заданы)
	КонецЦикла;
	
	Если стррОбъект = Неопределено Тогда
		
		Возврат ТЗРезультат;
		
	КонецЕсли; 
	
	НомерВнеПлана = ПланПосещенийНомерПунктаВнеПлана();
	
	тзСостав = стррОбъект.Состав;	
	
	Если ИспользуетсяПП Тогда // Детализация списка ТТ по плану посещения
		
		СмещениеОтНачалаПлана = РазницаДней % ПериодПлана; // количество дней от начала плана для вывода первого дня в отчете		
		
		тзПланПосещений = стррОбъект.ПланПосещений;
		тзПланПосещений.Сортировать("Партнер,День");

		ТекПартнер = Неопределено;
		
		Для каждого СтрокаТ Из тзПланПосещений Цикл
			Если СтрокаТ.День > ПериодПлана Тогда // Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен 
				Продолжить; 					  // на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
			КонецЕсли; 
			Если СтрокаТ.Партнер <> ТекПартнер Тогда
				ТекПартнер = СтрокаТ.Партнер;				
				стзРезультат = ТЗРезультат.Добавить();
				стзРезультат.Партнер = ТекПартнер;
				стзСостав = тзСостав.Найти(ТекПартнер, "Партнер");
				стзРезультат.НомерВПлане = ?(стзСостав = Неопределено, НомерВнеПлана, тзСостав.Индекс(стзСостав));
			КонецЕсли;
			НомерДня = СтрокаТ.День - СмещениеОтНачалаПлана;
			НормироватьПоМодулю(НомерДня, ПериодПлана);
			Пока НомерДня <= ВсегоДней Цикл // цикл занесения дней в план с учетом, что период отчета может быть больше циклического периода плана
				стзРезультат["П" + НомерДня] = СтрокаТ.Порядок;
				НомерДня = НомерДня + ПериодПлана;
			КонецЦикла; 
		КонецЦикла;
		
		ТЗРезультат.Сортировать("НомерВПлане,Партнер");		
		
	ИначеЕсли ИспользуетсяГрафик Тогда // Детализация списка ТТ по графику посещения
		  // Графики указаны в таблице тзСостав
		Пункт = Неопределено;
		Для каждого стзСостав Из тзСостав Цикл
			стррГрафик = стзСостав.График;
			Если стррГрафик = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			стррПункты = стррГрафик.Пункты;
			Если стррПункты = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			ПериодГрафика = стррГрафик.ПериодГрафика;
			СмещениеОтНачалаГрафика = РазницаДней % ПериодГрафика; // количество дней от начала графика для вывода первого дня в отчете					
			стзРезультат = ТЗРезультат.Добавить();
			стзРезультат.Партнер = стзСостав.Партнер;
			стзРезультат.НомерВПлане = тзСостав.Индекс(стзСостав);
			Для НомерДня = 1 По ВсегоДней Цикл
				ДеньГрафика = НомерДня + СмещениеОтНачалаГрафика;
				НормироватьПоМодулю(ДеньГрафика, ПериодГрафика);
				Если стррПункты.Свойство("П"+Строка(ДеньГрафика-1), Пункт) И Пункт.Выбран Тогда // пункты в графике нумеруются с 0
					стзРезультат["П" + НомерДня] = 1000; // признак включения дня в план посещений
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла
		
	Иначе // список ТТ без плана и графика, просто переносим партнеров
		
		Для каждого стзСостав Из тзСостав Цикл
			стзРезультат = ТЗРезультат.Добавить();
			стзРезультат.Партнер = стзСостав.Партнер;
		КонецЦикла
		
	КонецЕсли;
	
	Возврат ТЗРезультат;
	
КонецФункции

// Функция возвращает факты посещений (т.е. документы, созданные при посещении ТТ) в виде таблицы значений.
// 
// Параметры:
// 
//	стррПараметры - Структура - структура со свойствами:
//  	Агент - СправочникСсылка.Пользователи - агент, документы которого считать фактами посещений.
//  	Период - СтандартныйПериод - период отчета
//		День - ДатаВремя - дата формирования отчета (указывается, если нет свойства "Период").
//		ТолькоПроведенныеДокументы - Булево - признак включать / не включать проведенные документы в таблицу.
//		списокВидыДокументов - СписокЗначений - список видов документов для получения фактов.
//  
// Возвращаемое значение:
//  ТаблицаЗначений.
//  
Функция ПолучитьФактПосещенийДляОтчета(стррПараметры) Экспорт

		Текст = "
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект
		|ПОМЕСТИТЬ ДокументыСоСведениями
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СвойствоВремяНачала
		|	И ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК ДАТА) МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Агент КАК Агент,
		|	ВложенныйЗапрос.Партнер КАК Партнер,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Дата КАК Дата
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриходныйКассовыйОрдер.Кассир КАК Агент,
		|		ПриходныйКассовыйОрдер.Контрагент.Партнер КАК Партнер,
		|		ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,
		|		ПриходныйКассовыйОрдер.Дата КАК Дата
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ПриходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ПриходныйКассовыйОрдер И ПриходныйКассовыйОрдер.Кассир = &Агент
		//|		ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ПриходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдер.Кассир,
		|		РасходныйКассовыйОрдер.Контрагент.Партнер,
		|		РасходныйКассовыйОрдер.Ссылка,
		|		РасходныйКассовыйОрдер.Дата
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РасходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РасходныйКассовыйОрдер И РасходныйКассовыйОрдер.Кассир = &Агент 
		//|		РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РасходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Менеджер,
		|		РеализацияТоваровУслуг.Партнер,
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.Дата
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РеализацияТоваровУслуг.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РеализацияТоваровУслуг И РеализацияТоваровУслуг.Менеджер = &Агент
		//|		РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РеализацияТоваровУслуг.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВозвратТоваровОтКлиента.Менеджер,
		|		ВозвратТоваровОтКлиента.Партнер,
		|		ВозвратТоваровОтКлиента.Ссылка,
		|		ВозвратТоваровОтКлиента.Дата
		|	ИЗ
		|		Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ВозвратТоваровОтКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ВозвратТоваровОтКлиента И ВозвратТоваровОтКлиента.Менеджер = &Агент 
		//|		ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ВозвратТоваровОтКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказКлиента.Менеджер КАК Агент,
		|		ЗаказКлиента.Партнер,
		|		ЗаказКлиента.Ссылка,
		|		ЗаказКлиента.Дата
		|	ИЗ
		|		Документ.ЗаказКлиента КАК ЗаказКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ЗаказКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ЗаказКлиента И ЗаказКлиента.Менеджер = &Агент 
		//|		ЗаказКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ЗаказКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ЗаказКлиента.ПометкаУдаления
		|	) КАК ВложенныйЗапрос
		|; 
		|	
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Агент,
		|	Документы.Партнер,
		|	Документы.Дата,
		|	Документы.Ссылка КАК Ссылка,
		|	СведенияШирота.Значение КАК Широта,
		|	СведенияДолгота.Значение КАК Долгота,
		|	СведенияВремяНачала.Значение КАК ВремяНачала,
		|	СведенияВремяОкончания.Значение КАК ВремяОкончания
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияШирота
		|		ПО Документы.Ссылка = СведенияШирота.Объект	И СведенияШирота.Свойство = &СвойствоШирота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияДолгота
		|		ПО Документы.Ссылка = СведенияДолгота.Объект И СведенияДолгота.Свойство = &СвойствоДолгота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяНачала
		|		ПО Документы.Ссылка = СведенияВремяНачала.Объект И СведенияВремяНачала.Свойство = &СвойствоВремяНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяОкончания
		|		ПО Документы.Ссылка = СведенияВремяОкончания.Объект И СведенияВремяОкончания.Свойство = &СвойствоВремяОкончания
		|УПОРЯДОЧИТЬ ПО
		|	Документы.Партнер
		|";
		
	Если стррПараметры.Свойство("ДобавитьВремяПосещения") И стррПараметры.ДобавитьВремяПосещения = Истина Тогда
		Текст = Текст + ", СведенияВремяНачала.Значение";
	КонецЕсли; 
		   
	Запрос = Новый Запрос(Текст);			   
	Запрос.УстановитьПараметр("Агент", 					 	стррПараметры.Агент);
	Запрос.УстановитьПараметр("ТолькоПроведенныеДокументы", стррПараметры.ТолькоПроведенныеДокументы);
	Если стррПараметры.Свойство("Период") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", 	стррПараметры.Период.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода",  	стррПараметры.Период.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(стррПараметры.Дата));
		Запрос.УстановитьПараметр("КонецПериода",  	КонецДня(стррПараметры.Дата));
	КонецЕсли; 
	
	СвойствоШирота  		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());	
	СвойствоДолгота 		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
	СвойствоВремяНачала    	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
	СвойствоВремяОкончания	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
	
	Запрос.УстановитьПараметр("СвойствоШирота",  		СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота",  		СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоВремяНачала", 	СвойствоВремяНачала);
	Запрос.УстановитьПараметр("СвойствоВремяОкончания", СвойствоВремяОкончания);
	
	мВидыДокументов = СтрРазделить_("ПриходныйКассовыйОрдер,РасходныйКассовыйОрдер,РеализацияТоваровУслуг,ВозвратТоваровОтКлиента,ЗаказКлиента");
	списокВидыДокументов = стррПараметры.СписокВидыДокументов;
	Для Каждого ВидДокумента Из мВидыДокументов Цикл
		Запрос.УстановитьПараметр(ВидДокумента, списокВидыДокументов.НайтиПоЗначению(ВидДокумента) <> Неопределено);
	КонецЦикла;

	тзФакт = Запрос.Выполнить().Выгрузить();
	
	Возврат тзФакт;
		   
КонецФункции

// Функция возвращает таблицу значений плана-факта посещений.
//	
//	Параметры:
//	
//	стррПараметры - Структура - структура со свойствами:
//  	Агент, Период, СсылкаСписокТТ, ТолькоПроведенныеДокументы, списокВидыДокументов, ПронумероватьФактыПосещений - описание см. в комментариях 
//		к функциям ПолучитьПланПосещенийДляОтчета() и ПолучитьФактПосещенийДляОтчета().
//		
Функция ПолучитьПланФактПосещений(стррПараметры) Экспорт
	
	тзПланПосешений = ПолучитьПланПосещенийДляОтчета(стррПараметры); // используются свойства: Период, СсылкаСписокТТ, создается свойство ВсегоДней 
	тзФактПосещений = ПолучитьФактПосещенийДляОтчета(стррПараметры); // используются свойства: Период, Агент, ТолькоПроведенныеДокументы, списокВидыДокументов
	
	НомерВнеПлана = ПланПосещенийНомерПунктаВнеПлана();
	
	ДатаНачала = стррПараметры.Период.ДатаНачала;
	
	ТекПартнер = Неопределено;
	
	Для каждого стзФакт Из тзФактПосещений Цикл
		ТекПартнер = стзФакт.Партнер;
		стзПлан = тзПланПосешений.Найти(ТекПартнер, "Партнер");
		Если стзПлан = Неопределено Тогда
			стзПлан = тзПланПосешений.Добавить();
			стзПлан.Партнер 	= ТекПартнер;
			стзПлан.НомерВПлане = НомерВнеПлана;
		КонецЕсли;
		ВремяНачала = ?(ЗначениеЗаполнено(стзФакт.ВремяНачала),	стзФакт.ВремяНачала, стзФакт.Дата);
		НомерДня = (НачалоДня(ВремяНачала) - ДатаНачала) / 86400 + 1;
		стрВремяНачала    = Формат(ВремяНачала, "ДФ=""HH:mm""");
		стрВремяОкончания = Формат(?(ЗначениеЗаполнено(стзФакт.ВремяОкончания), стзФакт.ВремяОкончания, ВремяНачала), "ДФ=""HH:mm""");
		стрТекИнтервал = стзПлан["Д" + НомерДня];
		Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
			стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
			стрТекВремяОкончания = Прав(стрТекИнтервал, 5);
			стзПлан["Д" + НомерДня] = 
				?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) 
				+ " - " 
				+ ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания);
		Иначе
			стзПлан["Д" + НомерДня] = стрВремяНачала + " - " + стрВремяОкончания;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если стррПараметры.Свойство("ПронумероватьФактыПосещений") И стррПараметры.ПронумероватьФактыПосещений = Истина Тогда
		ДобавитьНомераФактовПосещений(тзПланПосешений, стррПараметры.ВсегоДней);
	КонецЕсли;
	
	тзПланПосешений.Сортировать("НомерВПлане,Партнер");
	
	ДобавитьАдресаПартнеров(тзПланПосешений);
	
	Если стррПараметры.Свойство("ДобавитьКоординатыПартнеров") И стррПараметры.ДобавитьКоординатыПартнеров = Истина Тогда
		ДобавитьКоординатыПартнеров(тзПланПосешений);
	КонецЕсли; 
	
	Если стррПараметры.Свойство("ВернутьФактПосещений") И стррПараметры.ВернутьФактПосещений = Истина Тогда
		стррПараметры.Вставить("тзФактПосещений", тзФактПосещений);
	КонецЕсли; 

	Возврат тзПланПосешений;
	
КонецФункции

// Функция циклически приводит число Значение в число в диапазоне [1; Модуль]
Процедура НормироватьПоМодулю(Значение, Модуль)
	Если Значение < 1 Тогда
		Значение = Значение + Модуль * Цел((Модуль - Значение) / Модуль);
	ИначеЕсли Значение > Модуль Тогда
		Значение = Значение % Модуль;
		Если Значение = 0 Тогда
			Значение = Модуль;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Функция возвращает структуру с основными свойствами списка торговых точек, закрепленного за агентом.
// В свойстве ТекстОшибки возвращается описание ошибки (если возникла ошибка).
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент, ДляПоляВыбора = Истина) Экспорт 

	стррРезультат = Новый Структура("ТекстОшибки,КодОшибки,НаименованиеСписокТТ,СсылкаСписокТТ,ИспользуетсяДляПланированияСписокТТ,ИспользоватьПорядокСписокТТ");
	
	стррРезультат.НаименованиеСписокТТ = "";
	стррРезультат.ИспользоватьПорядокСписокТТ = Ложь;
	
	стррРеквизиты = ПолучитьНастройкиАгентаИзВХ(Агент, "СсылкаСписокТТ");
	Если стррРеквизиты = Неопределено Тогда
		
		стррРезультат.КодОшибки = "НетНастроекАгента";		
		Текст = НСтр("ru = 'Не найдено настроек для торгового агента. Проверьте настройки агента [подсказка].'");
		
	ИначеЕсли Не ЗначениеЗаполнено(стррРеквизиты.СсылкаСписокТТ) Тогда
		
		стррРезультат.КодОшибки = "НеУказанСТТ";		
		Текст = НСтр("ru = 'У торгового агента не указан ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].'");
		
	Иначе
		стррРезультат.СсылкаСписокТТ = стррРеквизиты.СсылкаСписокТТ;
		стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", стррРеквизиты.СсылкаСписокТТ);
		Если стррОбъект = Неопределено Тогда
			
			стррРезультат.КодОшибки = "ОшибкаСсылкиСТТ";			
			Текст = НСтр("ru = 'У торгового агента указан несуществующий ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].'");
			
		Иначе
			стррРезультат.НаименованиеСписокТТ = стррОбъект.Наименование;
			Если стррОбъект.Состав.Количество() = 0 Тогда
				
				стррРезультат.КодОшибки = "УказанПустойСТТ";				
				Текст = НСтр("ru = 'У торгового агента указан пустой ""Список торговых точек"". Укажите заполненный список торговых точек для агента [подсказка].'");
				
			Иначе
				стррРезультат.ИспользуетсяДляПланированияСписокТТ = СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект);
				Если стррРезультат.ИспользуетсяДляПланированияСписокТТ Тогда
					
					стррРезультат.ИспользоватьПорядокСписокТТ = стррОбъект.ИспользоватьПорядок;
					
				Иначе
					
					стррРезультат.КодОшибки = "ДетализацияСТТБезПланаГрафика";
					Текст = НСтр("ru = 'У торгового агента указан ""Список торговых точек"" без детализации по ""Графику"" или ""Плану посещений"". Укажите для агента список торговых точек с одним из указанных вариантов детализации [подсказка].'");
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Текст <> "" Тогда
		Если ДляПоляВыбора Тогда
			стррРезультат.ТекстОшибки = СтрЗаменить(Текст, "[подсказка]", НСтр("ru = '(для этого нажмите кнопку ""Открыть"" справа от агента)'"));
		Иначе
			стррРезультат.ТекстОшибки = СтрЗаменить(Текст, " [подсказка]", "");
		КонецЕсли; 
	КонецЕсли; 
	 
	Возврат стррРезультат;

КонецФункции

Процедура ДобавитьАдресаПартнеров(ТЗ)
	
	мПартнеры = ТЗ.ВыгрузитьКолонку("Партнер");
	Если мПартнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	мВидыКИ = Новый Массив;
	мВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	
	тзАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мПартнеры,, мВидыКИ);
	
	Для каждого СтрокаТ Из ТЗ Цикл
		
		стзАдреса = тзАдреса.Найти(СтрокаТ.Партнер, "Объект");
		Если стзАдреса <> Неопределено Тогда
			СтрокаТ.Адрес = стзАдреса.Представление;
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет номер факта посещений. Сортировка ТЗ меняется!
// В таблицу добавляются колонки вида НФ<N>, где N - номер дня в плане. В колонках указываются порядковые номера посещений ТТ.
Процедура ДобавитьНомераФактовПосещений(ТЗ, ВсегоДней)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(5, 0);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	Для Индекс = 1 По ВсегоДней Цикл
		ТЗ.Колонки.Добавить("НФ" + Строка(Индекс), ТипЧисло);
	КонецЦикла; 		

	Для Индекс = 1 По ВсегоДней Цикл
		стрИндекс = Строка(Индекс);
		КолонкаФакта = "Д" + Строка(Индекс);
		КолонкаНФ = "НФ" + Строка(Индекс);
		НомерФакта = 0;
		ТЗ.Сортировать(КолонкаФакта);
		Для каждого СтрокаТ Из ТЗ Цикл
			Если Не ПустаяСтрока(СтрокаТ[КолонкаФакта]) Тогда
				НомерФакта = НомерФакта + 1;
				СтрокаТ[КолонкаНФ] = НомерФакта;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьКоординатыПартнеров(ТЗ)
	
	мПартнеры = ТЗ.ВыгрузитьКолонку("Партнер");
	тзКоординаты = ПолучитьТЗКоординатПартнеров(мПартнеры);
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 4);
	ТипЧисло  = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	ТЗ.Колонки.Добавить("Широта", ТипЧисло);
	ТЗ.Колонки.Добавить("Долгота", ТипЧисло);
	Для Каждого СтрокаТ Из тзКоординаты Цикл
		сТЗ = ТЗ.Найти(СтрокаТ.Ссылка, "Партнер");
		Если сТЗ <> Неопределено Тогда
			сТЗ.Широта  = СтрокаТ.Широта;
			сТЗ.Долгота = СтрокаТ.Долгота;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ПланПосещений
#КонецОбласти 


#Область ПрограммныйИнтерфейс_КартыСервер

Функция ПолучитьКоординатыПартнера(Партнер, стррКоординаты) Экспорт
	
	мПартнеры = Новый Массив;
	мПартнеры.Добавить(Партнер);
	тз = ПолучитьТЗКоординатПартнеров(мПартнеры);
	Если тз.Количество() = 0 Тогда
		стррКоординаты.Широта  = 0;
		стррКоординаты.Долгота = 0;
		Возврат Ложь;
	Иначе
		стррКоординаты.Широта  = тз[0].Широта;
		стррКоординаты.Долгота = тз[0].Долгота;
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьТЗКоординатПартнеров(мПартнеры) Экспорт
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка,
		|	СвойстваДолготы.Долгота,
		|	СвойстваШироты.Широта,
		|	СвойстваАдреса.Адрес
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Широта
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоШирота) КАК СвойстваШироты
		|	ПО (СвойстваШироты.Партнер = Партнеры.Ссылка)
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Долгота
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоДолгота) КАК СвойстваДолготы
		|	ПО (СвойстваДолготы.Партнер = Партнеры.Ссылка)
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Адрес
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоАдрес) КАК СвойстваАдреса
		|	ПО (СвойстваАдреса.Партнер = Партнеры.Ссылка)
		|ГДЕ 
		|	Партнеры.Ссылка В (&мПартнеры)";
		
	СвойствоШирота  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер());	
	СвойствоДолгота = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер());
	СвойствоАдрес   = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваАдресИзСервисаПартнер());
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("СвойствоШирота",  СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота", СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоАдрес",   СвойствоАдрес);
	Запрос.УстановитьПараметр("мПартнеры", 		 мПартнеры);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьВебКаталогИконок() Экспорт

	Возврат "http://www.agentplus.ru/tmp/configs/map/"; //"http://www.agentplus.ru/download/1CModules/8/8.2/11/icons/";

КонецФункции
 
// ПрограммныйИнтерфейс_КартыСервер
#КонецОбласти 


#Область ПрограммныйИнтерфейс_ГруппаПользователей

Функция ПолучитьГруппуПользователейТорговыеАгенты() Экспорт

	ИмяГруппы = "Торговые агенты (Агент Плюс)";
	
	Результат = Справочники.ГруппыПользователей.НайтиПоНаименованию(ИмяГруппы, Истина); 
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Элемент = Справочники.ГруппыПользователей.СоздатьЭлемент();
		Элемент.Наименование = ИмяГруппы;
		Элемент.Комментарий  = НСтр("ru = 'Группа пользователей, использующих ПО ""Агент Плюс: Мобильная торговля"". Создана автоматически.'");
		Элемент.Записать();
		Результат = Элемент.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// ПрограммныйИнтерфейс_ГруппаПользователей
#КонецОбласти 

// ПрограммныйИнтерфейс
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ХарактеристикиНоменклатуры

Функция ПолучитьХарактеристикуНоменклатуры(ИдХарактеристики)
	
	Если ИспользоватьХарактеристики Тогда
		
		Если ИдХарактеристики = Неопределено Или ЭтоПустойИдентификатор(ИдХарактеристики) Тогда
			Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе 		
			НайденнаяСтрока = ВременныеТаблицы.СпрХарактеристикиНоменклатурыСлужебный.Найти(Новый УникальныйИдентификатор(ИдХарактеристики));
			Характеристика = ?(НайденнаяСтрока = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), НайденнаяСтрока.Характеристика);
		КонецЕсли;
		
	Иначе 
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
	Возврат Характеристика;
	
КонецФункции

Функция ИдентификаторХарактеристикиНоменклатуры(Номенклатура, Характеристика)
	
	Если Не ИспользоватьХарактеристики Или Не ЗначениеЗаполнено(Характеристика) Тогда 
		Возврат ""; // Gri++ 20.07.17 !!! правильно возвращать характеристику? возникает "плавающее" поведение функции - возвращает результат разных типов
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура", Номенклатура);
	Отбор.Вставить("Характеристика", Характеристика);
	
	Результат = ВременныеТаблицы.СпрХарактеристикиНоменклатурыСлужебный.НайтиСтроки(Отбор);	
	
	Если Результат.Количество() = 0 Тогда 
		НоваяСтрока = ВременныеТаблицы.СпрХарактеристикиНоменклатурыСлужебный.Добавить();
		НоваяСтрока.Номенклатура 	= Номенклатура;
		НоваяСтрока.Характеристика 	= Характеристика;
		НоваяСтрока.Идентификатор 	= Новый УникальныйИдентификатор;
		Результат = НоваяСтрока.Идентификатор;
		гОбновитьСпрХарактеристикиНоменклатурыСлужебный = Истина;
	Иначе 
		Результат = Результат[0].Идентификатор;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ХарактеристикиНоменклатуры
#КонецОбласти 

#Область РеквизитыОбъекта

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
	
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1");
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Возврат ПроверкаРеквизита[ИмяРеквизита] <> "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1";
	
КонецФункции

// Функция возвращает название реквизита, найденного среди реквизитов метаданных объекта.
// Ищутся названия реквизитов, указанных в параметре стрРеквизиты.
// Если ни один из реквизитов не найден, возвращается Неопределено.
Функция РеквизитОбъектаИзСписка(МетаданныеОбъекта, стрРеквизиты) Экспорт
	
	Результат = Неопределено;
	
	мРеквизиты = СтрРазделить_(стрРеквизиты);
	мтдРеквизиты = МетаданныеОбъекта.Реквизиты;
	Для Каждого стрРеквизит Из мРеквизиты Цикл
		Если мтдРеквизиты.Найти(стрРеквизит) <> Неопределено Тогда
			Результат = стрРеквизит;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция РеквизитОбъекта(ИмяРеквизита)
	
	Значение = гКэшРеквизитыОбъектов.Получить(ИмяРеквизита);
	
	Если Значение = Неопределено Тогда
		
		Если ИмяРеквизита = "Спр_Пользователи_Подразделение" Тогда
			Реквизиты = Метаданные.Справочники.Пользователи.Реквизиты;
			Если Реквизиты.Найти("ТекущееПодразделение") <> Неопределено Тогда
				Значение = "ТекущееПодразделение";
			ИначеЕсли Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				Значение = "Подразделение";
			Иначе
				ВызватьИсключение("Не удалось найти реквизит для объекта: " + ИмяРеквизита);
			КонецЕсли;
		Иначе
			ВызватьИсключение("Функция РеквизитОбъекта(), неизвестный параметр = " + ИмяРеквизита);
			
		КонецЕсли;
		
		гКэшРеквизитыОбъектов.Вставить(ИмяРеквизита, Значение);		
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// РеквизитыОбъекта
#КонецОбласти 

#Область ПреобразованияЦветСтрока

Функция ЦветВСтроку(Цвет)
	
	Возврат СтрЗаменить(Строка(Цвет), " ", "");
	
КонецФункции

Функция ЦветИзСтроки(Знач СтрЦвет)
	
	Если СтрЧислоВхождений(СтрЦвет, ",") <> 2 Тогда // неверный формат значения в СтрЦвет
		СтрЦвет = "0,0,0";
	КонецЕсли;
	
	мЦвета = СтрРазделить_(СтрЦвет, ",");
	
	Красный = СтрокуВЧислоЦвета(мЦвета[0]);
	Зеленый = СтрокуВЧислоЦвета(мЦвета[1]);
	Синий   = СтрокуВЧислоЦвета(мЦвета[2]);
	
	Возврат Новый Цвет(Красный, Зеленый, Синий);
	
КонецФункции

Функция СтрокуВЧислоЦвета(Строка)
	
	СтрРезультат = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда
			СтрРезультат = СтрРезультат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат) % 256);
	
КонецФункции

// ПреобразованияЦветСтрока
#КонецОбласти 

#Область ПроверкаФайлов

Функция КаталогСуществует(ПутьККаталогу)
	
	ОбъектКаталог = Новый Файл(ПутьККаталогу);
	Возврат ОбъектКаталог.Существует() И ОбъектКаталог.ЭтоКаталог();
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу)
	
	ФайлОбъект = Новый Файл(ПутьКФайлу);
	Возврат ФайлОбъект.Существует();
	
КонецФункции

// Проверяет существование каталога, если он не существует, то создается новый.
Функция ПроверитьИСоздатьКаталог(ПутьККаталогу, ПроверитьПослеСоздания = Ложь)

	Если Не КаталогСуществует(ПутьККаталогу) Тогда
		СоздатьКаталог(ПутьККаталогу);
		Если ПроверитьПослеСоздания Тогда
			Возврат КаталогСуществует(ПутьККаталогу);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Применяется только для сервера.
Функция ДополнитьСлешВПуть(Каталог, Слеш = Неопределено) Экспорт

	Если Слеш = Неопределено Тогда
		Слеш = ?(ЭтоLinuxСервер(), "/", "\");
	КонецЕсли; 
	
	Если Прав(Каталог, 1) <> Слеш Тогда
		Возврат Каталог + Слеш;
	Иначе
		Возврат Каталог;		
	КонецЕсли;

КонецФункции 

// ПроверкаФайлов
#КонецОбласти

Функция НайтиПоЗначению(Коллекция, Значение)

	Результат = Неопределено;
	
	Для Каждого Элемент Из Коллекция Цикл
		Если Элемент.Значение = Значение Тогда
			Результат = Элемент;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ЭтоLinuxСервер() Экспорт
	
	Если гЭтоLinuxСервер = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		гЭтоLinuxСервер = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		             Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	КонецЕсли; 
				 
	Возврат гЭтоLinuxСервер;
	
КонецФункции

Функция ЭтоСсылкаНаНайденныйОбъект(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Стр = НРег(Строка(Ссылка));
		Если Лев(Стр, 1) = "<" И 0 <> Найти(Стр, ">") И 0 <> Найти(Стр, "объект") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПользовательНастроек()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции // ПользовательНастроек()

Функция КлючНастроекОбмена()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции // ПользовательНастроек()

Функция КомпоновщикНастроекАгента(СхемаКомпоновки) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	// Добавим выбранные поля
	Для Каждого Элемент из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;

	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	Возврат КомпоновщикНастроек.Настройки;
КонецФункции

Функция ЭлементОтбораПоЛевомуЗначению(стрЛевоеЗначение, стрНазванияДополнительныхЭлементов = Неопределено )

	ЭлементОтбора = Неопределено;
	ОтборыАгента = ВыбНастройкиАгента.ВыгружаемыеОбъекты;
	
	// gi_170902 {
	Если ТипЗнч(ОтборыАгента) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Текст = НСтр("ru = 'Агент: ""%1"", не заполнены ""Выгружаемые данные""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	// gi_170902 }
	
	Для Каждого Элемент Из ОтборыАгента.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = стрЛевоеЗначение Тогда
			ЭлементОтбора = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда // не найден элемент отбора с представлением ПредставлениеОтбора
		Текст = НСтр("ru = 'Агент: ""%1"", не найдено поле СКД ""%2""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, стрЛевоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	// проверяем существование ссылки в отборе
	Если ЭлементОтбора.Использование И Не ЭтоСсылкаНаНайденныйОбъект(ЭлементОтбора.ПравоеЗначение) Тогда
		Текст = НСтр("ru = 'Агент: ""%1"", параметр отбора: %2. Найдена ссылка на несуществующий объект: %3!Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, стрЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	// Значения дополнительных элементов отбора ищем когда найдено значение основного элемента отбора 
	Если стрНазванияДополнительныхЭлементов <> Неопределено Тогда 
		
		мОтборы = ПолучитьОтборыДляДополнительныхЭлементов(стрЛевоеЗначение, ОтборыАгента, стрНазванияДополнительныхЭлементов);
		
		Если мОтборы.Количество() <> 0 Тогда
			мОтборы.Вставить(0, ЭлементОтбора);
			Возврат мОтборы;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЭлементОтбора;		
	
КонецФункции

Функция ПолучитьОтборыДляДополнительныхЭлементов(стрЛевоеЗначение, ОтборыАгента, НазванияДополнительныхЭлементов)

	мНазвания = СтрРазделить_(НазванияДополнительныхЭлементов);
	мРезультат = Новый Массив;	
	
	Для Каждого Название Из мНазвания Цикл
		
		ВРегНазвание = ВРег(Название);
		ДопЭлементОтбора = Неопределено;
		
		Для Каждого Элемент Из ОтборыАгента.Элементы Цикл // ищем элемент отбора среди элементов отбора в СКД
			Если ВРег(Элемент.ЛевоеЗначение) = ВРегНазвание Тогда
				ДопЭлементОтбора = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПодготовитьДополнительныйЭлементОтбора(ДопЭлементОтбора, ОтборыАгента, стрЛевоеЗначение, Название);
		
		Если ДопЭлементОтбора <> Неопределено И ДопЭлементОтбора.Использование И ДопЭлементОтбора.ПравоеЗначение <> Неопределено Тогда
			мРезультат.Добавить(ДопЭлементОтбора);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат мРезультат;
	
КонецФункции

Процедура ДобавитьУсловиеВключенияПартнера(стрУсловие, ПравоеЗначение, мРеквизиты, ОперацияСравнения, ОперацияСоединения)
	
	ЭтоСписокЗначений = (ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений"));
	Для Каждого ИмяРеквизита Из мРеквизиты Цикл
		ВключатьВУсловие = Ложь;
		Если ЭтоСписокЗначений И ПравоеЗначение.НайтиПоЗначению(ИмяРеквизита) <> Неопределено Тогда
			ВключатьВУсловие = Истина;
		ИначеЕсли ИмяРеквизита = ПравоеЗначение Тогда
			ВключатьВУсловие = Истина;
		КонецЕсли; 
		Если ВключатьВУсловие Тогда
			стрУсловие = стрУсловие + ?(ПустаяСтрока(стрУсловие), "", " " + ОперацияСоединения + " ")
				+ "Партнеры." + ИмяРеквизита + " " + ОперацияСравнения + " ИСТИНА ";
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Функция ПартнерыПоТипу(ВидСравнения, ПравоеЗначение)
	
	Если Не ЗначениеЗаполнено(ПравоеЗначение) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мРеквизиты = СтрРазделить_("Клиент,Поставщик,Конкурент");
	
	стрУсловие = "";
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		ДобавитьУсловиеВключенияПартнера(стрУсловие, ПравоеЗначение, мРеквизиты, "=", "ИЛИ");
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		ДобавитьУсловиеВключенияПартнера(стрУсловие, ПравоеЗначение, мРеквизиты, "<>", "И");
	Иначе
		Возврат Неопределено; 
	КонецЕсли;
	
	Если ПустаяСтрока(стрУсловие) Тогда
		Возврат Неопределено; 
	КонецЕсли; 
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ 
		|	Партнеры.ПометкаУдаления = ЛОЖЬ
		|	И ([Условие])";
		
	Текст = СтрЗаменить(Текст, "[Условие]", стрУсловие);
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Пользователь", ВыбНастройкиАгента.Пользователь);
	мПартнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мПартнеры;
	
КонецФункции	

Процедура ПодготовитьДополнительныйЭлементОтбора(ЭлементОтбора, ОтборыАгента, стрЛевоеЗначение, НазваниеДополнительногоЭлемента)
	
	Если ЭлементОтбора = Неопределено Тогда // значит правое значение отбора должны взять из настроек агента 
		Если Не ВыбНастройкиАгента.Свойство(НазваниеДополнительногоЭлемента) Тогда // такой реквизит в настройках агента отсутствует
			Возврат;
		КонецЕсли; 
		ЗначениеНастройки = ВыбНастройкиАгента[НазваниеДополнительногоЭлемента];
		Если Не ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Возврат;
		КонецЕсли;
	Иначе // элемент отбора найден в СКД
		Если Не ЭлементОтбора.Использование Тогда
			ЭлементОтбора = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если НазваниеДополнительногоЭлемента = "СсылкаСписокТТ" 
		Или НазваниеДополнительногоЭлемента = "ТолькоПартнерыОсновногоМенеджера"  
		Или НазваниеДополнительногоЭлемента = "ТипПартнера"  
	Тогда
		
		мПартнеры = Неопределено;
		
		Если НазваниеДополнительногоЭлемента = "СсылкаСписокТТ" Тогда // ЗначениеНастройки - это GUID списка ТТ
			СтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ЗначениеНастройки);
			Если СтррОбъект <> Неопределено Тогда
				мПартнеры = СтррОбъект.Состав.ВыгрузитьКолонку("Партнер");
			КонецЕсли; 
			
		ИначеЕсли НазваниеДополнительногоЭлемента = "ТолькоПартнерыОсновногоМенеджера" Тогда // булево значение - признак отбора партнеров по атрибуту ОсновнойМенеджер
			// проверяем условие отбора для этого элемента
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина Тогда // используем отбор
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь Тогда // используем отбор
			Иначе
				Возврат; // не используем отбор партнеров по полю "ОсновнойМенеджер"
			КонецЕсли; 
			Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Партнеры.Ссылка
				|ИЗ
				|	Справочник.Партнеры КАК Партнеры
				|ГДЕ 
				|	Партнеры.ПометкаУдаления = ЛОЖЬ
				|	И Партнеры.ОсновнойМенеджер = &Пользователь");
			Запрос.УстановитьПараметр("Пользователь", ВыбНастройкиАгента.Пользователь);
			мПартнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		ИначеЕсли НазваниеДополнительногоЭлемента = "ТипПартнера" Тогда // строковое значение: "Клиент", "Поставщик" или "Конкурент"

			мПартнеры = ПартнерыПоТипу(ЭлементОтбора.ВидСравнения, ЭлементОтбора.ПравоеЗначение);			
			
		Иначе
			ВызватьИсключение("Процедура ПодготовитьДополнительныйЭлементОтбора() - Неизвестное значение параметра НазваниеДополнительногоЭлемента = """ 
				+ НазваниеДополнительногоЭлемента + """");
		КонецЕсли; 
		
		Если мПартнеры = Неопределено Или мПартнеры.Количество() = 0 Тогда
			ЭлементОтбора = Неопределено;
			Возврат;
		КонецЕсли; 
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(мПартнеры);
		
		ЭлементОтбора = ОтборыАгента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); // всегда создаем новый элемент отбора, т.к. используем новое стрЛевоеЗначение
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(стрЛевоеЗначение);
		ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
		
		ЭлементОтбора.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = Список;
		ЭлементОтбора.Использование  = Истина;				
		
	Иначе // используем найденный элемент отбора 
		// пока таких примеров нет
	КонецЕсли; 

КонецПроцедуры

Функция СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса) Экспорт

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;

	Возврат СхемаКомпоновки;
КонецФункции

// Функция возвращает массив элементов справочника в соответствии с текстом запроса.
// 
// Параметры:
//	ТекстЗапроса - Строка - текст запроса выборки из справочника;
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - элемент (условия) отбора.
//  
// Возвращаемое значение:
//  Массив - элементы справочника.
//
Функция ВыборкаИзСправочника(ТекстЗапроса, ЭлементОтбора = Неопределено)

	Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда // задействован ЭлементОтбораКомпоновкиДанных
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ЭлементОтбора, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		Возврат ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	Иначе // условие без отбора данных
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	
КонецФункции

Функция РезультатЗапросаВВидеТЗ(ТекстЗапроса, ОтборыСКД = Неопределено)
	
	Если ОтборыСКД <> Неопределено И ОтборыСКД.Использование Тогда
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСсылки(ОбъектСсылка)

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Строка(ОбъектСсылка.Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции 
 
Функция КаталогВременныхФайловАгента()

	Результат = КаталогВременныхФайлов() + "AP20TMP";
	ПроверитьИСоздатьКаталог(Результат);
	
	Результат = ДополнитьСлешВПуть(Результат) + ВыбНастройкиАгента.КаталогОбмена;
	ПроверитьИСоздатьКаталог(Результат);
	
	Возврат ДополнитьСлешВПуть(Результат);
	
КонецФункции

Функция КаталогВременныхФайловДляТранспорта(Подкаталог = "") Экспорт
	
	Каталог = КаталогВременныхФайлов() + "APtmp";
	Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
	Если Не Результат Тогда
		ВызватьИсключение("Не удалось создать временный каталог для обмена данными: " + Каталог);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Подкаталог) Тогда
		Каталог = ДополнитьСлешВПуть(Каталог) + Подкаталог;
		Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
		Если Не Результат Тогда
			ВызватьИсключение("Не удалось создать временный подкаталог для обмена данными: " + Каталог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(Каталог);
	
КонецФункции

Функция КаталогФайловТрековАгента()

	КаталогТреков = ПодкаталогДанных("Треки");
	Если Не ПроверитьИСоздатьКаталог(КаталогТреков, Истина) Тогда
	    ВызватьИсключение("Не удалось создать каталог хранения треков """ + КаталогТреков + """!");
	КонецЕсли; 
	
	КаталогТрековАгента = ДополнитьСлешВПуть(КаталогТреков) + ВыбНастройкиАгента.КаталогОбмена;
	Если Не ПроверитьИСоздатьКаталог(КаталогТрековАгента, Истина) Тогда
		Текст = "Не удалось создать каталог хранения треков для агента ""%1"", каталог - ""%2""!";
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, КаталогТрековАгента);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(КаталогТрековАгента);
	
КонецФункции // КаталогФайловТрекинга()

// Функция упаковывает файл выгрузки в архив.
// Возвращает полный путь к архиву, 
// или Неопределено, если архив не удалось создать.
// 
Функция УпаковатьФайл(ИмяФайлаВыгрузки, ИмяАрхиваСКартинками)

	ПарольАрхива  = ""; // СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
	ПутьИмяАрхива = Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 3) + "zip";

	Архив = Новый ЗаписьZipФайла(ПутьИмяАрхива, ПарольАрхива,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяФайлаВыгрузки);


	Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
		Архив.Добавить(ИмяАрхиваСКартинками);
	КонецЕсли;
	
#Область ПокаУбрано	

	//Если Не ПустаяСтрока(ПапкаСОтчетом) Тогда
	//	Архив.Добавить(ПапкаСОтчетом, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Истина;
	//Иначе
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Ложь;
	//КонецЕсли;

	//СписокБазДанных = Новый СписокЗначений;

	//// Сформируем файл-манифест
	//ДопНастройкиАгента = ВыбАгент.апНастройкиПриложения.Настройки.Получить();
	//
	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (Не ДопНастройкиАгента = Неопределено) Тогда
	//	
	//	Для Каждого ВеткаДерева Из ДопНастройкиАгента.Строки Цикл 
	//		//Идентификатор     = ВеткаДерева.Идентификатор;
	//		//ЗначениеКонстанты = ВеткаДерева.Значение;
	//		Ключ			  = ВеткаДерева.Ключ;
	//		
	//		Если Ключ = "Общие" Тогда
	//			Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл
	//				ЗначениеКонстанты = ВеткаДерева.Значение;
	//				Ключ			  = ВеткаДерева.Ключ;
	//				
	//				Если Ключ = "СписокБазДанных" Тогда
	//					МассивПодстрок = РазложитьСтрокуНаМассивПодстрок(ЗначениеКонстанты, ";");
	//					Для Сч = 0 По МассивПодстрок.Количество()-1 Цикл
	//						СписокБазДанных.Добавить(МассивПодстрок[Сч]);	
	//					КонецЦикла;
	//				КонецЕсли; //Если Ключ = "СписокБазДанных" Тогда					
	//			КонецЦикла; //Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл				
	//		КонецЕсли; //Если Ключ = "Общие" Тогда			
	//	КонецЦикла; //Для Каждого ВеткаДерева Из ДопНастройкиАгента Цикл
	//	
	//КонецЕсли; //Если ДопНастройкиАгента <> Неопределено Тогда

	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (СписокБазДанных.Количество() > 1) Тогда
	//	
	//	ПутьКФайлуМанифест = ВернутьКаталогВременныхФайлов(ПараметрыОбмена) + "manifest";
	//	
	//	Текст = Новый ЗаписьТекста(ПутьКФайлуМанифест, КодировкаТекста.ANSI);
	//	
	//	Текст.ЗаписатьСтроку("<manifest version=""1"">");
	//	
	//	Для Каждого ТекСтрока Из СписокБазДанных Цикл				
	//		Текст.ЗаписатьСтроку("<import db=" + """" + ТекСтрока + """" + " file=" + """" + "FromCDB.xml""" + " />");				
	//	КонецЦикла;
	//	
	//	Текст.ЗаписатьСтроку("</manifest>");
	//	
	//	Текст.Закрыть();
	//	
	//	Архив.Добавить(ПутьКФайлуМанифест);
	//	
	//КонецЕсли;
	
// ПокаУбрано
#КонецОбласти
	
	Архив.Записать();
	
	Если ФайлСуществует(ПутьИмяАрхива) Тогда
		Результат = ПутьИмяАрхива;
		Попытка
			Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
				УдалитьФайлы(ИмяАрхиваСКартинками);
			КонецЕсли; 
			УдалитьФайлы(ИмяФайлаВыгрузки);
		Исключение
		КонецПопытки; 
	Иначе
		Результат = Неопределено;
		ОповеститьОСобытии("Ошибка создания архива: " + ПутьИмяАрхива, "ОшибкаОбмен",, "ТекущийАгент");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область ВыводСообщений

Функция ВывестиИнформацию(СтррИнформация)

	// Заносим в журнал только ошибки
	Если Найти(СтррИнформация.ТипСобытия, "Ошибка") <> 0 Тогда
		Текст = ?(ЗначениеЗаполнено(СтррИнформация.Агент), СокрЛП(СтррИнформация.Агент) + ": ", "") + СтррИнформация.ТекстСообщения;
		ЗаписьЖурналаРегистрации(СтррИнформация.ТипСобытия, УровеньЖурналаРегистрации.Ошибка, Неопределено, СтррИнформация.СсылкаНаОбъект, Текст);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррИнформация.ТекстСообщения);

КонецФункции 

Функция ОповеститьОСобытии(Текст, ТипСобытия = "АПИнформация", СсылкаНаОбъект = Неопределено, Агент = Неопределено)
	
	ТекстСообщения = Текст;
	Если Агент = "ТекущийАгент" Тогда
		Агент = ВыбНастройкиАгента.Пользователь;
	ИначеЕсли Агент = "ТекущийАгентСообщить" Тогда
		Агент = ВыбНастройкиАгента.Пользователь;
		ТекстСообщения = "Агент " + Строка(Агент) + ": " + Текст;
	ИначеЕсли ТипЗнч(Агент) = Тип("Строка") Тогда
		ВызватьИсключение("Функция ОповеститьОСобытии() - неизвестное значение параметра Агент = " + Агент);
	КонецЕсли;
	
	СтррИнформация = Новый Структура("ТекстСообщения,ТипСобытия,СсылкаНаОбъект,Агент", ТекстСообщения, ТипСобытия, СсылкаНаОбъект, Агент);
	ВывестиИнформацию(СтррИнформация);

КонецФункции 

Процедура ВывестиСообщение(СтррРезультат, Текст, ЕстьОшибки = Неопределено)
	
	СтррСообщение = Новый Структура("Описание", Текст);
	СтррРезультат.Сообщения.Добавить(СтррСообщение);
	Если ЕстьОшибки <> Неопределено Тогда
		СтррРезультат.ЕстьОшибки = ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

// ВыводСообщений
#КонецОбласти 

#Область ИдентификаторыПеречислений

Функция ПолучитьЗначениеПеречисленияПоИдентификатору(ВидПеречисления, Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда 	//++{20.01.17
		Возврат Неопределено;
	КонецЕсли; 										//++}

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = гТаблицыПеречислений[ВидПеречисления].Найти(НРег(Идентификатор), "Идентификатор");
	Если СтрокаТ = Неопределено Тогда
		ВызватьИсключение("Функция ПолучитьЗначениеПеречисленияПоИдентификатору(), неизвестный Идентификатор = " + Идентификатор);
	КонецЕсли;
	
	Возврат СтрокаТ.Значение;
	
КонецФункции

Функция ПолучитьИдентификаторПеречисленияПоЗначению(ВидПеречисления, Значение)

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = гТаблицыПеречислений[ВидПеречисления].Найти(Значение, "Значение");
	Если СтрокаТ = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаТ.Идентификатор;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗначениеПеречисления(ТЗ, Идентификатор, Значение)
	
	СтрокаТ = ТЗ.Добавить();
	СтрокаТ.Идентификатор = Идентификатор;
	СтрокаТ.Значение 	  = Значение;
	
КонецПроцедуры

Процедура ПопыткаСоздатьТаблицыПеречислений()
	
	Если гТаблицыПеречислений <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	гТаблицыПеречислений = Новый Структура("ТипыКонтактнойИнформации,ФормыОплаты");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
		
	Для Каждого Элемент Из гТаблицыПеречислений Цикл
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока); //идентификатор значения перечисления в МТ
		ТЗ.Колонки.Добавить("Значение"); 						  //значение перечисления в УТ
		гТаблицыПеречислений[Элемент.Ключ] = ТЗ;
	КонецЦикла;
	
	ТЗ = гТаблицыПеречислений.ТипыКонтактнойИнформации;
	ДобавитьЗначениеПеречисления(ТЗ, "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ДобавитьЗначениеПеречисления(ТЗ, "52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ДобавитьЗначениеПеречисления(ТЗ, "2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ДобавитьЗначениеПеречисления(ТЗ, "e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	ДобавитьЗначениеПеречисления(ТЗ, "8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	// Для видов оплаты использованы случайные идентификаторы, т.к. в мобильном приложении это справочник.
	// Это же соответствие используется при выгрузке видов оплат в мобильное приложение в процедуре "Выгрузка дополнительной информации"
	ТЗ = гТаблицыПеречислений.ФормыОплаты;
	ДобавитьЗначениеПеречисления(ТЗ, "4a73372b-48e3-4874-8b87-b964d5782e25", Перечисления.ФормыОплаты.Наличная);
	ДобавитьЗначениеПеречисления(ТЗ, "7e6a8955-0b5b-4a3d-9446-acce667ed741", Перечисления.ФормыОплаты.Безналичная);
	ДобавитьЗначениеПеречисления(ТЗ, "f2cf11e4-d6cc-4986-a5a2-0a440301876c", Перечисления.ФормыОплаты.Взаимозачет);
	ДобавитьЗначениеПеречисления(ТЗ, "bd9e3958-1e52-4d37-9685-6083e249702f", Перечисления.ФормыОплаты.ПлатежнаяКарта);
	
КонецПроцедуры

// ИдентификаторыПеречислений
#КонецОбласти 

#Область ИдентификаторыВидовСправочниковИДокументов

// Процедура создает таблицы соответствия видов документов и справочников между МТ и УТ.
// Таблицы соответствий используются в процедурах ПолучитьВсеВидыОбъектовДляМУ(), ПолучитьВсеВидыОбъектовДля1С(), ВидОбъектаПоИдентификатору()...
Процедура ПопыткаСоздатьТаблицыВидовОбъектов()

	Если гТаблицыВидовОбъектов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	стррТаблицы = Новый Структура("Документ,Справочник");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // sd_24082017
		
	Для Каждого Элемент Из стррТаблицы Цикл
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ВидДляМТ",  	 ОписаниеТипаСтрока); //вид документа/справочника в МТ	
		ТЗ.Колонки.Добавить("Представление", ОписаниеТипаСтрока); //представление вида документа/справочника в МТ		
		ТЗ.Колонки.Добавить("Вид",  		 ОписаниеТипаСтрока); //вид документа/справочника в УТ
		ТЗ.Колонки.Добавить("ИдентификаторВида", 	ОписаниеТипаИдентификатор); // sd_24082017 //идентификатор вида документа/справочника в МТ // gi_170902 - изменено название колокни с "Идентификатор" на "ИдентификаторВида"
		ТЗ.Колонки.Добавить("ИнтерактивноОчищать", 	ОписаниеТипаБулево); //признак интерактивного выбора флага "Очищать перед загрузкой"
		стррТаблицы[Элемент.Ключ] = ТЗ;
	КонецЦикла;
	
	ТЗ = стррТаблицы.Документ; // виды документов в МТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Заказ",, 			"ЗаказКлиента", 		   "e01e1f5c-d6e4-46e8-b923-3758b0d79bde");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ПКО",, 			"ПриходныйКассовыйОрдер",  "749be2e0-9b00-4d7b-9d4d-88ca53327511");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "РКО",, 			"РасходныйКассовыйОрдер",  "3890d435-96ba-4481-abc0-23782e15b32f");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Реализация",,		"РеализацияТоваровУслуг",  "7ffb418c-73c9-4883-91c5-827fa5145a3a");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Перемещение",,		"ПеремещениеТоваров",	   "77525c87-cb2f-405e-a92e-6f373edeece7"); // sd_22082017
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ВозвратТоваров", 	"Возврат товаров", "ВозвратТоваровОтКлиента", "4971b041-beab-4fa6-b1e8-10138f04fe44");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Посещение",, 		"*Посещение",  			   "9f147c59-5ee8-4550-8289-12ecfe5d0617"); // знак "*" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Мерчендайзинг",, 	"*Мерчендайзинг",  		   "61dee5fe-d0a8-4842-a6af-a8d33f298845"); // знак "*" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Долг",, 			"*Взаиморасчеты",		   "a93aadfa-2a35-40fe-b88a-3768825cdd31", Ложь); // знак "*" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Маршрут",, 		"*Маршрут",		   		   "43920fa1-745d-4499-84af-7000672ceeff", Ложь); // знак "*" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ВнеплановыйМаршрут",,"*ВнеплановыйМаршрут",   "27205d6e-e956-4c06-aa21-9b573f5d752f", Ложь); // знак "*" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)

	ТЗ = стррТаблицы.Справочник; // виды справочников в МТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Организации",,,									"0e3cbaea-5467-45cd-8c86-fb1777da435b");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ТипыЦен","Типы цен","ВидыЦен", 					"00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Склады",,, 										"2516ffce-f46f-4326-be00-438ef0871d30");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Договоры",,"СоглашенияСКлиентами",					"735a9ce5-dcc1-4d1a-8f8d-643a50a6befc"); // sd_10082017 переименовал видспр для 1С СоглашенияСКлиентами
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Номенклатура",,, 									"d6d52ada-0f38-4112-af3c-2f1e425a43d1");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ХарактеристикиНоменклатуры", "Характеристики номенклатуры",, 	"cc552c31-f7de-4259-a6e3-66ef765d3b43");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ЕдиницыИзмерения","Единицы измерения",,			"80452c60-b442-4da9-a048-42f63270ca14");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "КатегорииДокументов","Категории документов", "*", 	"f997f837-8721-4896-8fe8-3497c6c38206"); // знак "*" в параметре Вид - признак отсутствующего аналогичного справочника в УТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "СтатусыКонтрагентов","Статусы контрагентов", "*", 	"74046d94-b25d-4f3a-b553-27b7fdd3c60c"); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Запросы",,"*", 									"cc458719-5078-4dc8-9a0c-fa19e3904f39"); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ИсторияПродаж","История продаж","*", 				"af9faa26-9638-41c5-bfce-9514e670ef2e", Ложь); 
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ТорговыеТочки","Торговые точки","Контрагенты",		"d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "Контрагенты",,"Партнеры",							"9450980f-fb59-47e3-bae2-aa3c58441b1a");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "КонтактныеЛица","Контактные лица","КонтактныеЛицаПартнеров", 	"cf387a58-4655-41b5-a460-85884d1f20d0");
	//ДобавитьСвойстваВидаОбъекта(ТЗ, "КонтактнаяИнформация","Контактная информация","Партнеры.КонтактнаяИнформация",	"85b62882-0156-4881-85ba-b8fef05c867b");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "КонтактнаяИнформация","Контактная информация","ВидыКонтактнойИнформации",	"85b62882-0156-4881-85ba-b8fef05c867b"); // sd_10082017 для загрузки в УТ имя спр ВидыКонтактнойИнформации, загружаются отдельно
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ВидыКонтактнойИнформации","Виды контактной информации",, 		"564e0eca-c498-4d28-83d7-4bdeaec558e2"); // sd_10082017 для выгрузки в МТ
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ФотоСправочников","Фото справочников","*",			"e01cf3a3-6765-4fd3-801c-ccdbf85c78fc");
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ПечатныеФормыДокументов",,,						"17b09c65-5b6c-40d1-8616-3a655b99da8d", Ложь); // sd_10082017
	ДобавитьСвойстваВидаОбъекта(ТЗ, "ПечатныеФормыОрганизаций",,,						"c7b2883c-d872-4d19-8b32-e7cefaaceaca", Ложь); // sd_10082017
	ДобавитьСвойстваВидаОбъекта(ТЗ, "НастройкиОбмена",,,								"b20a258f-ffb6-49b4-b0fd-9853760cf70c", Ложь); // sd_10082017
	
	гТаблицыВидовОбъектов = стррТаблицы;
	
КонецПроцедуры

// Фунция возвращает вид объекта в УТ 11 в соответствии с идентификатором вида объекта в МТ.
//
// Параметры:
//	ИдентификаторВида - УникальныйИдентификатор - (GUID) идентификатор вида документа в МТ. // gi_170902: изменен тип из "Строка" на "УникальныйИдентификатор".
//	Для1С		  	- Булево - Указывается для какой системы необходимо определить вид объекта, если значение Ложь то будет возвращен вид объекта для МТ.
//	КорневойВид   	- Строка - К какому типу метаданных принадлежит идентификатор вида объекта в МТ, "Справочник" или "Документ".
//	
Функция ВидОбъектаПоИдентификатору(ИдентификаторВида, Для1С = Истина, КорневойВид = "Справочник") Экспорт // sd_20082017 Добавил описание параметров и третий входящий параметр
	
	СвойстваВида = СвойстваВидаОбъекта(ИдентификаторВида, "ИдентификаторВида", КорневойВид); // sd_24082017 (ИдентификаторВида); // sd_24082017 // gi_170902 изменено значение параметра с "Идентификатор" на "ИдентификаторВида"
	Если СвойстваВида <> Неопределено Тогда
		СвойстваВида = ?(Для1С, СвойстваВида.Вид, СвойстваВида.ВидДляМТ);
	КонецЕсли;
	
	Возврат СвойстваВида;
	
КонецФункции

// Функция вовзращает представдение вида Документа или Справочника для указания в комментарии в файле выгрузки
//
// Параметры:
//	КорневойВид - Строка - значения "Документ" или "Справочник".
//	СвойстваВида - СтрокаТаблицыЗначений - строка ТЗ объекта гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник.
//
Функция ПредставлениеВида(КорневойВид, СвойстваВида)
	
	Результат = КорневойВид + "." + СвойстваВида.ВидДляМТ;
	Если СвойстваВида.ВидДляМТ <> СвойстваВида.Вид Тогда
		Результат = Результат + " (" + СвойстваВида.Вид + ")";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Фунция возвращает строку ТЗ гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник, 
// найдя ее по заданным значению и имени колонки.
//
// Параметры:
//	Значение - Строка, УникальныйИдентификатор - искомое значение.
//	Имя - Строка - название свойства (колонки) таблицы для поиска значения.
//	КорневойВид - Строка - значения Неопределено, или "Документ", или "Справочник". 
//						   Если указано Неопределено, то в параметре возвращается строка "Документ" или "Справочник".
//	
Функция СвойстваВидаОбъекта(Значение, Имя, КорневойВид = Неопределено)
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Если КорневойВид = Неопределено Тогда // Значит в параметре Значение передана строка вида "Документ.X" или "Справочник.X"
		Поз = Найти(Значение, ".");
		Если Поз <> 0 Тогда
			КорневойВид 	= Лев(Значение, Поз-1);
			ИскатьЗначение 	= Сред(Значение, Поз+1);
		КонецЕсли;
	Иначе 							// Значит в параметре КорневойВид передана строка "Документ" или "Справочник",
		ИскатьЗначение = Значение; 	// а в параметре Значение - название вида документа или справочника.
	КонецЕсли;
		
	Если КорневойВид <> "Справочник" И КорневойВид <> "Документ" Тогда
		ВызватьИсключение("Процедура СвойстваВидаОбъекта() - неверный параметр Значение = " + Значение + " - "
			+ Символы.ПС + "Значение должно начинаться с ""Документ."" или ""Справочник.""!");
	КонецЕсли;
	
	// sd_25082017 Перенес условие ниже, чтобы не перезаписывалось значение перем "ИскатьЗначение", когда передается другое значение.
	Если Имя = "ИдентификаторВида" Тогда // в колонке "ИдентификаторВида" хранятся значения типа УникальныйИдентификатор // gi_170902 изменено значение переменной с "Идентификатор" на "ИдентификаторВида"
		ИскатьЗначение = ?(ТипЗнч(Значение) = Тип("Строка"), Новый УникальныйИдентификатор(Значение), Значение);
	КонецЕсли;
	
	СтрокаТ = гТаблицыВидовОбъектов[КорневойВид].Найти(ИскатьЗначение, Имя);
	Если СтрокаТ = Неопределено Тогда
		ВызватьИсключение("Функция СвойстваВидаОбъекта(), неизвестное Значение = " + Значение);
	КонецЕсли;
	
	Возврат СтрокаТ;	
	
КонецФункции

// Процедура добавляет свойства в таблицу соответствия видов документов и справочников между МТ и УТ.
//
// Параметры:
//	ТЗ 					- Таблица значений 	- таблица соответствий для документов или справочников.
//	ВидДляМТ			- Строка			- вид справочника/документа в МТ.
//	ПредставлениеДляМТ  - Строка			- представление справочника/документа в МТ.
//	Вид					- Строка			- вид справочника/документа в УТ.
//	Идентификатор		- Строка			- уникальный идентификатор справочника/документа в МТ.
//	ИнтерактивноОчищать	- Булево			- признак интерактивного выбора флага "Очищать перед загрузкой". 
//
Процедура ДобавитьСвойстваВидаОбъекта(ТЗ, ВидДляМТ, ПредставлениеДляМТ = "", Вид = "", ИдентификаторВида, ИнтерактивноОчищать = Истина)
	
	СтрокаТ = ТЗ.Добавить();
	СтрокаТ.ВидДляМТ 	  = ВидДляМТ;
	СтрокаТ.Представление = ?(ПредставлениеДляМТ = "", ВидДляМТ, ПредставлениеДляМТ);	
	СтрокаТ.Вид 		  = ?(Вид = "", ВидДляМТ, Вид);	
	СтрокаТ.ИдентификаторВида 	= Новый УникальныйИдентификатор(ИдентификаторВида); // sd_24082017 // gi_170902 изменено название свойства с "Идентификатор" на "ИдентификаторВида"
	СтрокаТ.ИнтерактивноОчищать = ИнтерактивноОчищать;
	
КонецПроцедуры

Функция ПолучитьВсеВидыОбъектовДляМУ(КорневойВид, ИнтерактивноОчищать = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗ = гТаблицыВидовОбъектов[КорневойВид];
	Для Каждого СтрокаТ Из ТЗ Цикл
		Если ИнтерактивноОчищать = Неопределено Или ИнтерактивноОчищать = СтрокаТ.ИнтерактивноОчищать Тогда
			Список.Добавить(СтрокаТ.ВидДляМТ, СтрокаТ.Представление);
		КонецЕсли; 
	КонецЦикла;

	Возврат Список;
	
КонецФункции

Функция ПолучитьВсеВидыОбъектовДля1C(КорневойВид) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗ = гТаблицыВидовОбъектов[КорневойВид];
	Для Каждого СтрокаТ Из ТЗ Цикл
		Если Лев(СтрокаТ.Вид, 1) <> "*" Тогда
			Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
		КонецЕсли;
	КонецЦикла;

	Возврат Список;
	
КонецФункции

// ИдентификаторыВидовСправочниковИДокументов
#КонецОбласти

#Область СоответствияКонстант_МТ_УД

Функция КонстантыМТПолучитьСоответствие()

	ствРезультат = Новый Соответствие; // GUID считываемых констант и их названия
	ствРезультат.Вставить("79c698db-3c55-465e-acfe-4741acdd5655", "АгентЗагрузки");
	ствРезультат.Вставить("cf41ba05-a4ee-4492-9a2c-c96394c4864a", "КодЗапроса");
	
	Возврат ствРезультат;
	
КонецФункции 

Функция КонстантыМТПолучитьGUID(ИмяКонстанты)

	ствКонстанты = КонстантыМТПолучитьСоответствие();
	Элемент = НайтиПоЗначению(ствКонстанты, "АгентЗагрузки");
	Если Элемент = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Элемент.Ключ;
	КонецЕсли; 

КонецФункции 

// СоответствияКонстант_МТ_УД
#КонецОбласти

#Область СлужебныеДанные

Функция СДИмяФайлаДляМУ(СсылкаМУ)
	
	Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_data.txt";
	
КонецФункции

// Чтение служебных данных
Функция СДПрочитать(Имя, СоздатьЕслиНетДанных = Ложь)
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902
		стррДанные = СДОткрытьФайл(ПодкаталогДанных("Входящие") + Имя);
	Иначе
		стррДанные = ПрочитатьЗначениеНастройки(Имя);
	КонецЕсли;
	
	Если ТипЗнч(стррДанные) <> Тип("Структура") И СоздатьЕслиНетДанных Тогда
		стррДанные = Новый Структура;
	КонецЕсли; 
	
	Возврат стррДанные;
	
КонецФункции

// Сохранение служебных данных
Функция СДЗаписать(Имя, Данные)
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902	
		ИмяФайла = ПодкаталогДанных("Входящие") + Имя;
		Попытка
			ЗначениеВФайл(ИмяФайла, Данные);
		Исключение
			Текст = "Не удалось сохранить служебные данные в файл. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(Имя, Данные);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает прочитанные служебные данные.
Функция СДОткрытьФайл(ИмяФайла)
	
	Результат = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    Данные = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = "Ошибка чтения файла служебных данных. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Результат = Данные;			
		Иначе
			Текст = "Файл служебных данных поврежден. Будет создан новый файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СДИдентификаторВИмяФайла(Идентификатор)
	
	Возврат СтрЗаменить(НРег(Строка(Идентификатор)), "-", "");
	
КонецФункции

Процедура СохранитьСпрХарактеристикиНоменклатурыСлужебный()
	
	Если ИспользоватьХарактеристики И гОбновитьСпрХарактеристикиНоменклатурыСлужебный Тогда 
		СохранитьЗначениеНастройки("СпрХарактеристикиНоменклатурыСлужебный", ВременныеТаблицы.СпрХарактеристикиНоменклатурыСлужебный);
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеДанные
#КонецОбласти 

#Область ПодтвержденияСправочников
// { sd_10082017
Функция ИмяФайлаПодтвержденийСправочников(СсылкаМУ)
	
	Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_ctlg.txt";
	
КонецФункции

Функция СДСохранитьПодтвержденияСправочников(СсылкаМУ, ТЗ)
	
	ИмяФайла = ИмяФайлаПодтвержденийСправочников(СсылкаМУ);
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902		
		Попытка
			ЗначениеВФайл(ПодкаталогДанных("Входящие") + ИмяФайла, ТЗ);
		Исключение
			Текст = "Не удалось сохранить файл подтверждений. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(ИмяФайла, ТЗ);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СДОткрытьПодтвержденияСправочников(СсылкаМУ, ДляЧтения) Экспорт
	
	ИмяФайла = ИмяФайлаПодтвержденийСправочников(СсылкаМУ);
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902
		Результат = ОткрытьФайлПодтверждений(ПодкаталогДанных("Входящие") + ИмяФайла, ДляЧтения);
	Иначе
		Результат = ПрочитатьЗначениеНастройки(ИмяФайла);
	КонецЕсли;
	
	Если Результат = Неопределено И Не ДляЧтения Тогда // создаем пустую ТЗ
		
		//ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()); // gi_170830 убрал
		ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // sd_24082017
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Дата", ОписаниеТипаДата);
		ТЗ.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор); // GUID подтверждаемого элемента справочника
		ТЗ.Колонки.Добавить("ИдВидСправочникаМТ",	ОписаниеТипаИдентификатор); // gi_170830 идентификатор (GUID) справочника в МТ
		Результат = ТЗ;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПодтвержденияСправочников(мСсылкиМУ = Неопределено) Экспорт
	
	Если мСсылкиМУ = Неопределено Тогда
		ТЗ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТЗ = Неопределено Тогда
			Возврат;
		Иначе
			мСсылкиМУ = ТЗ.ВыгрузитьКолонку("ID");
		КонецЕсли;
	КонецЕсли;
	
	мИмена = Новый Массив;	
	
	Для Каждого СсылкаМУ Из мСсылкиМУ Цикл
		мИмена.Добавить(ИмяФайлаПодтвержденийСправочников(СсылкаМУ));
	КонецЦикла;
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902	
		
		Каталог = ПодкаталогДанных("Входящие");
		Для Каждого ИмяФайла Из мИмена Цикл
			ПолныйПуть = Каталог + ИмяФайла;
			Попытка
				УдалитьФайлы(ПолныйПуть);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		УдалитьЗначенияНастроек(мИмена);	
		
	КонецЕсли;
	
КонецПроцедуры
// } sd_10082017
// ПодтвержденияСправочников
#КонецОбласти 

#Область ПодтвержденияДокументов

Функция ИмяФайлаПодтвержденийДокументов(СсылкаМУ)
	
	Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_doc.txt";
	
КонецФункции

// Функция возвращает таблицу значений с подтверждениями.
// Если параметр ДляЧтения = Истина и если файл подтверждений не существует или недоступен, то возвращается Неопределено.
// Если параметр ДляЧтения = Ложь и если файл подтверждений не существует или недоступен, то возвращается пустая таблица значений.
Функция ОткрытьФайлПодтверждений(ИмяФайла, ДляЧтения)
	
	Результат = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    ТЗ = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = "Ошибка чтения файла подтверждений. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		ТекстСоздание = ?(ДляЧтения, "", "Будет создан новый файл.") + " Файл: ";
		
		Если ТипЗнч(ТЗ) <> Тип("ТаблицаЗначений") Тогда
			Текст = "Файл подтверждений поврежден. " + ТекстСоздание + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		Иначе
			Колонки = "Дата,Идентификатор,ВидДокумента";
			Если ЕстьКолонкиТаблицыЗначений(ТЗ, Колонки) Тогда
				Результат = ТЗ;
			Иначе
				Текст = "Таблица в файле подтверждений не содержит колонок: " + Колонки + ". " + ТекстСоздание + ИмяФайла;
				ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Служебные данные (СД). Сохранить подтверждения агента в файл или хранилище.
Функция СДСохранитьПодтвержденияДокументов(СсылкаМУ, ТЗ)
	
	ИмяФайла = ИмяФайлаПодтвержденийДокументов(СсылкаМУ);
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902		
		Попытка
			ЗначениеВФайл(ПодкаталогДанных("Входящие") + ИмяФайла, ТЗ);
		Исключение
			Текст = "Не удалось сохранить файл подтверждений. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(ИмяФайла, ТЗ);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Служебные данные (СД). Загрузить подтверждения агента из файла или хранилища в таблицу значений.
// Функция возвращает таблицу значений с подтверждениями.
// Если параметр ДляЧтения = Ложь и данные подтверждений отсутствуют, то возвращается пустая таблица подтверждений.
Функция СДОткрытьПодтвержденияДокументов(СсылкаМУ, ДляЧтения) Экспорт
	
	ИмяФайла = ИмяФайлаПодтвержденийДокументов(СсылкаМУ);
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902	
		Результат = ОткрытьФайлПодтверждений(ПодкаталогДанных("Входящие") + ИмяФайла, ДляЧтения);
	Иначе
		Результат = ПрочитатьЗначениеНастройки(ИмяФайла);
	КонецЕсли;
	
	Если Результат = Неопределено И Не ДляЧтения Тогда // создаем пустую ТЗ
		
		ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
		ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // sd_24082017
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Дата", ОписаниеТипаДата);
		ТЗ.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого документа
		ТЗ.Колонки.Добавить("ВидДокумента",  	ОписаниеТипаСтрока);
		ТЗ.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // gi_170830 идентификатор (GUID) вида документа в МТ
		Результат = ТЗ;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодтвержденияСохранить(СсылкаМУ, ЗагружаемыеОбъекты)
	
	МаксКоличествоСтрок = 200; // максимальное количество документов в буфере перед добавлением новых документов.
	
	ТЗ = СДОткрытьПодтвержденияДокументов(СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	
	ТЗ.Сортировать("Дата");  // сначала будут идти самые ранние документы, их и будем удалять.
	УдалитьСтрок = ТЗ.Количество() - МаксКоличествоСтрок;
	Если УдалитьСтрок > 0 Тогда
		Для Поз = 1 По УдалитьСтрок Цикл
			ТЗ.Удалить(ТЗ.Получить(0));
		КонецЦикла;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	тзДокументы = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы;
	
	Для Каждого стзДокументы Из тзДокументы Цикл
		ИдДокумента = стзДокументы.Идентификатор; // gi_170830 это GUID
		СтрокаТ = ТЗ.Найти(ИдДокумента, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = ТЗ.Добавить();
			СтрокаТ.Идентификатор 	 = ИдДокумента; // gi_170830 это GUID
			СтрокаТ.ВидДокумента  	 = стзДокументы.ВидДокумента;
			СтрокаТ.ИдВидДокументаМТ = стзДокументы.ИдВидДокументаМТ; // gi_170830 это GUID
		КонецЕсли;
		СтрокаТ.Дата = ТекДата;	// Если документ выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
	КонецЦикла;
	
	СДСохранитьПодтвержденияДокументов(СсылкаМУ, ТЗ);
	
	// sd_10082017 {
	ТЗ = СДОткрытьПодтвержденияСправочников(СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	
	ТЗ.Сортировать("Дата");  // сначала будут идти самые ранние справочники, их и будем удалять.
	УдалитьСтрок = ТЗ.Количество() - МаксКоличествоСтрок;
	Если УдалитьСтрок > 0 Тогда
		Для Поз = 1 По УдалитьСтрок Цикл
			ТЗ.Удалить(ТЗ.Получить(0));
		КонецЦикла;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	
	тзСправочники = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники;
	
	Для Каждого стзСправочники Из тзСправочники Цикл
		ИдЭлементаСправочника = стзСправочники.Идентификатор; // gi_170902
		СтрокаТ = ТЗ.Найти(ИдЭлементаСправочника, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = ТЗ.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
			СтрокаТ.ИдВидСправочникаМТ 	= сТЗСправочники.ИдВидСправочникаМТ;
		КонецЕсли;
		СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
	КонецЦикла;
	
	СДСохранитьПодтвержденияСправочников(СсылкаМУ, ТЗ);
	// } sd_10082017
	
КонецПроцедуры

// Процедура удаляет подтверждения документов.
Процедура УдалитьПодтвержденияДокументов(мСсылкиМУ = Неопределено) Экспорт
	
	Если мСсылкиМУ = Неопределено Тогда
		ТЗ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТЗ = Неопределено Тогда
			Возврат;
		Иначе
			мСсылкиМУ = ТЗ.ВыгрузитьКолонку("ID");
		КонецЕсли;
	КонецЕсли;
	
	мИмена = Новый Массив;	
	
	Для Каждого СсылкаМУ Из мСсылкиМУ Цикл
		мИмена.Добавить(ИмяФайлаПодтвержденийДокументов(СсылкаМУ));
	КонецЦикла;
	
	Если ХранитьСлужебныеДанныеВФайлах() Тогда // gi_170902
		
		Каталог = ПодкаталогДанных("Входящие");
		Для Каждого ИмяФайла Из мИмена Цикл
			ПолныйПуть = Каталог + ИмяФайла;
			Попытка
				УдалитьФайлы(ПолныйПуть);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		УдалитьЗначенияНастроек(мИмена);	
		
	КонецЕсли;
	
КонецПроцедуры

// ПодтвержденияДокументов
#КонецОбласти 

#Область ВыгрузкаДанных

Функция СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки)

	ДокОбмена = Новый ЗаписьXML();
	Попытка
		ДокОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
		ДокОбмена.ЗаписатьОбъявлениеXML();	
		ДокОбмена.ЗаписатьНачалоЭлемента("DATA");

		ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
		
		ДокОбмена.ЗаписатьАтрибут("DATASOURCENAME", "МобильнаяТорговля");
		ДокОбмена.ЗаписатьАтрибут("DATASOURCEVERSION", "1.0.1"); // Ратмир

		ДокОбмена.ЗаписатьАтрибут("CONFIG1CNAME", СокрЛП(Метаданные.Имя));
		ДокОбмена.ЗаписатьАтрибут("CONFIG1CVERSION", СокрЛП(Метаданные.Версия));

		Возврат ДокОбмена;
	Исключение
		Текст = НСтр("ru = 'Ошибка создания файла выгрузки по причине:'") + " " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", , "ТекущийАгент");
		Возврат Неопределено;
	КонецПопытки;

КонецФункции 

Процедура ЗакрытьФайлВыгрузки(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.Закрыть();

КонецПроцедуры

Процедура ВыгрузитьКонстанты(ДокОбмена)

	ДокОбмена.ЗаписатьНачалоЭлемента("CONSTANTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Константы");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Агент = ВыбНастройкиАгента.Пользователь;

	// НаименованиеАгента
	ДобавитьКонстанту(ДокОбмена, "a2e1cc68-0624-45a6-8057-efd35259b9fe", СокрЛП(Агент)); 
	
	// ИдентификаторАгента
	ДобавитьКонстанту(ДокОбмена, "79c698db-3c55-465e-acfe-4741acdd5655", Агент.УникальныйИдентификатор());
	
	// Дата последней выгрузки данных из ЦБД
	ДобавитьКонстанту(ДокОбмена, "d0604fdf-b2a5-44b7-b84d-db2a9a691918", Формат(ТекущаяДата(), "ДФ=гггг-ММ-дд'T'ЧЧ:мм:сс"));

	// Константа измененной нумерации - только для УТ 8, ред. 11
	ДобавитьКонстанту(ДокОбмена, "c186c395-658c-4b42-b007-f50da543a9d8", "1");
	
	// Константа ТорговляСКолес, при включенной настройке документ "Реализация" будет доступным для редактирования.  
	ДобавитьКонстанту(ДокОбмена, "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c", ТорговляСКолес);
	
	// Основная организация
	ДобавитьКонстанту(ДокОбмена, "13faf2a0-3d1e-469e-bc53-cdada6ac1375", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнаяОрганизация)); 
	
	// Основной склад
	ДобавитьКонстанту(ДокОбмена, "86ba5dad-16d0-46b8-9d8d-3eab2cf08685", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойСклад));
	
	// Мобильный склад
	ДобавитьКонстанту(ДокОбмена, "448b6fab-5e21-479c-9a9a-63e8eced59b9", 
			?(ТорговляСКолес И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), ИдентификаторСсылки(ВыбНастройкиАгента.МобильныйСклад), ""));
	
	// Основной тип цены
	ДобавитьКонстанту(ДокОбмена, "7bc85296-f536-411e-aaa9-74ad5c7adea2", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойТипЦены)); 

	ВалютаУчета = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Если ВалютаУчета.Пустая() Тогда
		ВалютаУчета = КонстантыПолучитьЗначение("ВалютаУправленческогоУчета");
	КонецЕсли;
	ДобавитьКонстанту(ДокОбмена, "d2b5508c-7453-4a52-b803-a846992a485d", ВалютаУчета.Наименование);
	
	// Значение надписи поля "Код" в МУ
	ДобавитьКонстанту(ДокОбмена, "7268af8a-6532-4ad0-bc63-3832f3c0d96f", 
			?(РежимВыгрузкиКодовНоменклатуры = "АРТИКУЛ", "Артикул", "Код"));
	
	// 	Константа ЕдиницаИзмеренияВеса
	ДобавитьКонстанту(ДокОбмена, "13af34a5-664d-4aad-a29c-eefc04fefca9", КонстантыПолучитьЗначение("ЕдиницаИзмеренияВеса").Наименование);
	
	// Константа ИспользоватьХарактеристикиНоменклатуры
	ДобавитьКонстанту(ДокОбмена, "6e9470db-c618-4bf8-b510-d1e39e2217f6", 
			ЗначениеВСтрокуДляXML(КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики));
	
	// Пересчет в базовые единицы 
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		ДобавитьКонстанту(ДокОбмена, "0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", "0");
	КонецЕсли;
	
	// Точность цены, количества и скидки
	ДобавитьКонстанту(ДокОбмена, "27952ab3-1365-4b56-a0ef-34ec0133e5d3", "2");
	ДобавитьКонстанту(ДокОбмена, "5d54ed85-fdea-4027-8ecd-129c27bdbf64", "2");
	ДобавитьКонстанту(ДокОбмена, "a978f039-3f17-4705-b7f6-16c580c9ac5f", "2");
	
	ДобавитьКонстанту(ДокОбмена, "8c52bbbf-8bbb-447d-b18b-06860d372818", ИспользоватьКонтрагентов);	// В МТ - это константа "ИспользоватьТорговыеТочки"
	ДобавитьКонстанту(ДокОбмена, "b201164e-e265-4c1d-b3d0-0579bcd1fda6", ИспользоватьСоглашения);
	
	// Фактический адрес
	ДобавитьКонстанту(ДокОбмена, "1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.АдресПартнера));
	ДобавитьКонстанту(ДокОбмена, "0270b3d5-4213-419b-9e3a-48cba4caec04", ВыгружатьИсториюПродаж);

	Если ВыделятьЦветомПросроченныеДолги Тогда
		стрЦвет = ЦветВСтроку(ЦветПросроченныхДолгов);
		Если стрЦвет = "0,0,0" Тогда // Если не указан для агента определенный цвет, то по умолчанию выделяем красным
			стрЦвет = "255,0,0";
		КонецЕсли;
		// Цвет выделения просроченных долгов
		ДобавитьКонстанту(ДокОбмена, "9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f", стрЦвет); // цвета передаем в виде строки R,G,B
	КонецЕсли;

	Если ИспользоватьПунктыРазгрузки Тогда 
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Пункт разгрузки";
		НадписьТорговыеТочки = "Пункты разгрузки";
	Иначе 
		// Значения надписи поля "Контрагент" в МУ
		ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", "Партнер");
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Контрагент";
		НадписьТорговыеТочки = "Контрагенты";
	КонецЕсли;

	ДобавитьКонстанту(ДокОбмена, "5728ed47-0dbc-48a9-b37c-e7808766c48c", НадписьТорговаяТочка);
	ДобавитьКонстанту(ДокОбмена, "bcca6cef-853c-42f4-9b10-2ca02b1a5556", НадписьТорговыеТочки);
	
	// Служебные данные для МУ - в них хранится дата и время конца загруженного трека
	стррЗначения = СДПрочитать(СДИмяФайлаДляМУ(ВыбНастройкиАгента.СсылкаМУ)); // служебные данные для МУ
	Если Тип(стррЗначения) = Тип("Структура") И стррЗначения.Свойство("ПоследнееВремяТрека") Тогда
		ДобавитьКонстанту(ДокОбмена, "df297ad7-e2ce-478a-974e-fb399239e23e", стррЗначения.ПоследнееВремяТрека);
	КонецЕсли; 

	ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена);

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONSTANTS

КонецПроцедуры

Процедура ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена)

	Если Не ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) Тогда
		
		ОповеститьОСобытии("Не указаны настройки мобильного приложения.");
		
	Иначе
		
		Для Каждого ЭлементНастройки Из ВыбНастройкиАгента.НастройкиМобильногоПриложения Цикл
			ЭлементНастройки = ЭлементНастройки.Значение;
			Если Не ПустаяСтрока(ЭлементНастройки.Идентификатор) Тогда
				ДобавитьКонстанту(ДокОбмена, ЭлементНастройки.Идентификатор, ЗначениеВСтрокуДляXML(ЭлементНастройки.Значение));
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	ДобавитьКонстанту(ДокОбмена, "c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", ВыбНастройкиАгента.Префикс);
	ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена)

	Если ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) И 
		ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("РасписаниеВеденияТрека") Тогда 
		Расписание = ВыбНастройкиАгента.НастройкиМобильногоПриложения.РасписаниеВеденияТрека.Значение;
		Если ЕстьСвойстваСтруктуры(Расписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
			РабочееВремя = Расписание.ВремяНачала + "-" + Расписание.ВремяОкончания;
			ДобавитьКонстанту(ДокОбмена, "1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);
			ДобавитьКонстанту(ДокОбмена, "428f867c-0bf1-45b2-b812-ef1d284d3e3f", Расписание.ДниНедели);
			ДобавитьКонстанту(ДокОбмена, "e38fe34e-f36a-44c9-9dbd-a29f7c925940", Расписание.ПериодЗаписи);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ВыгрузкаПодтверждений

Процедура ВыгрузитьПодтверждения(ДокОбмена) 
	// sd_10082017 немного переделал данную процедуру, разбив на две соответственно.
	ВыгрузитьПодтвержденияСправочников(ДокОбмена);
	ВыгрузитьПодтвержденияДокументов(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияСправочников(ДокОбмена)
	
	// sd_10082017 { выгрузка подтверждений для справочников
	ТЗ = СДОткрытьПодтвержденияСправочников(ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если ТЗ = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;
	
	ТЗ.Сортировать("Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочников");
		
		СтррЗапись = Новый Структура("GUID");
		
		ИдВидСправочникаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из ТЗ Цикл
			
			Если СтрокаТ.ИдВидСправочникаМТ <> ИдВидСправочникаМТ Тогда
				
				Если ИдВидСправочникаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
				КонецЕсли;
				ИдВидСправочникаМТ = СтрокаТ.ИдВидСправочникаМТ;
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
				ДобавитьПоле(ДокОбмена, "GUID", ИдВидСправочникаМТ);
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочников " + ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Ложь, "Справочник"));
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				
				СтррЗапись.GUID = СтрокаТ.Идентификатор;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИдВидСправочникаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS
	// } sd_10082017 выгрузка подтверждений для справочников
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияДокументов(ДокОбмена)
	
	ТЗ = СДОткрытьПодтвержденияДокументов(ВыбНастройкиАгента.СсылкаМУ, Истина);

	Если ТЗ = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;
	
	ТЗ.Сортировать("ВидДокумента,Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов");
		
		СтррЗапись = Новый Структура("GUID");
		
		ИдВидДокументаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из ТЗ Цикл
			
			Если СтрокаТ.ИдВидДокументаМТ <> ИдВидДокументаМТ Тогда
				
				Если ИдВидДокументаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
				КонецЕсли;
				ИдВидДокументаМТ = СтрокаТ.ИдВидДокументаМТ;
				ДокМенеджер = Документы[СтрокаТ.ВидДокумента];
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
				ДобавитьПоле(ДокОбмена, "GUID", ИдВидДокументаМТ);
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов " + ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Ложь, "Документ"));
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				
			КонецЕсли;
			
			Если ПодтвержденияТолькоДляПроведенных Тогда
				СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
				Если Не ЭтоСсылкаНаНайденныйОбъект(СсылкаДок) Тогда 
					Продолжить; // не выгружаем, документ удален в ЦБД
				ИначеЕсли Не СсылкаДок.Проведен Тогда
					Продолжить; // не выгружаем, документ не проведен
				КонецЕсли;
			КонецЕсли;
			
			СтррЗапись.GUID = СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
			
		КонецЦикла;
		
		Если ИдВидДокументаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры

// ВыгрузкаПодтверждений
#КонецОбласти

#Область ВыгрузкаСправочников

// В параметре тзКартинки из процедуры возвращается ТЗ свойств картинок, 
// которые нужно выгрузить в МУ.
Процедура ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, тзКартинки)

	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	ДобавитьПоле(ДокОбмена, "Comment", "Справочники");

	ВыгрузитьОрганизации(ДокОбмена);
	ВыгрузитьВидыКонтактнойИнформации(ДокОбмена);
	ВыгрузитьВидыЦен(ДокОбмена);
	ВыгрузитьСклады(ДокОбмена, МенеджерВТ);
	ВыгрузитьКатегорииДокументов(ДокОбмена);
	ВыгрузитьСтатусыПартнеров(ДокОбмена);
	ВыгрузитьЗапросыОбновления(ДокОбмена);

	ВыгрузитьКлиентов(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтактныхЛицПартнеров(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ);
	ВыгрузитьСоглашения(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ);

	ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ);
	ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ);
	ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьПечатныеФормы(ДокОбмена); // sd_10082017
	
	тзКартинки = ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ);

	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS

КонецПроцедуры

Процедура ВыгрузитьОрганизации(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Организации");
	стррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A09,A010,A017");
		
	тзОрганизации = ТЗОрганизацииВыгрузки();

	Для Каждого СтрокаТ Из тзОрганизации Цикл
		
		Ссылка = СтрокаТ.Ссылка;
		
		КонтактнаяИнформация = КонтактнаяИнформацияОрганизации(Ссылка);
		
		стррПоля.GUID 	= Ссылка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Ссылка.Наименование;
		стррПоля.A02	= УчетнаяПолитикаПереопределяемый.ПлательщикНДС(Ссылка, ТекущаяДата()) И НЕ УчетнаяПолитикаПереопределяемый.ПрименяетсяОсвобождениеОтУплатыНДС(Ссылка, ТекущаяДата());
		стррПоля.A03	= КонтактнаяИнформация.ЮрАдрес;
		стррПоля.A04	= КонтактнаяИнформация.Телефон;
		стррПоля.A05	= СтрокаТ.ИНН;
		стррПоля.A06	= СтрокаТ.КПП;
		стррПоля.A07	= СтрокаТ.ОГРН;
		стррПоля.A09	= КонтактнаяИнформация.ФактАдрес;
		стррПоля.A010	= ПрефиксОрганизацииИБ(СтрокаТ.Префикс);
		стррПоля.A017	= СокрЛП(СтрокаТ.НаименованиеПолное);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыКонтактнойИнформации(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыКонтактнойИнформации");

	ТипыКИ = ТипыКонтактнойИнформации();
	ВидыКИ = ВидыКонтактнойИнформацииВыгрузки();
	СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
	стррПоля = Новый Структура("GUID,Name,A02,A03");
	
	Для Каждого Элемент Из ВидыКИ Цикл
		стррПоля.GUID 	= Элемент.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Элемент.Наименование;
		стррПоля.A02	= ТипыКИ.Получить(Элемент.Тип);
		Если Элемент.Родитель = СправочникВидыКИ.СправочникПартнеры И Не ИспользоватьПунктыРазгрузки Тогда
			стррПоля.A03 = "Контрагенты";
		ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтактныеЛицаПартнеров Тогда
			стррПоля.A03 = "КонтактныеЛица";
		ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтрагенты Тогда 
			стррПоля.A03 =  ?(ИспользоватьПунктыРазгрузки, "Контрагенты", "ТорговыеТочки");
		ИначеЕсли ИспользоватьПунктыРазгрузки И Элемент.Родитель = СправочникВидыКИ.СправочникАлкПунктыРазгрузки Тогда
			стррПоля.A03 = "ТорговыеТочки";
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыЦен(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТипыЦен");

	мЭлементы = ВидыЦенВыгрузки();
	стррПоля = Новый Структура("GUID,Name,Code,A02");
	Сч = 0;
	
	Для Каждого Элемент Из мЭлементы Цикл
		стррПоля.GUID = Элемент.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = Элемент.Наименование;
		стррПоля.Code = Сч;
		стррПоля.A02  = Элемент.ЦенаВключаетНДС;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		Сч = Сч + 1;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСклады(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Склады");

	ВыгружаемыеСклады = СкладыВыгрузки(МенеджерВТ);
	Сч = 0;
	Для Каждого ЭлементСписка Из ВыгружаемыеСклады Цикл
		СтруктураПолей = ПредопределенныеПоляСправочника(ЭлементСписка);
		СтруктураПолей.Вставить("Code", Сч);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей);
		Сч = Сч + 1;
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКатегорииДокументов(ДокОбмена)
	
	Если Не ВременныеТаблицы.Свойство("КатегорииДокументов") Тогда // значит категории документов не задавались
		Возврат;
	КонецЕсли;
	
	Категории = ВременныеТаблицы.КатегорииДокументов;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КатегорииДокументов");
	
	СтррПоля = Новый Структура("GUID,Name,A02,A03");

	Для Каждого ЭлементКатегории Из Категории Цикл
		СтррПоля.GUID = ЭлементКатегории.Идентификатор;
		СтррПоля.Name = ЭлементКатегории.Наименование;
		СтррПоля.A02  = ЦветВСтроку(ЭлементКатегории.Цвет);
		СтррПоля.A03  = СтрСоединить_(ЭлементКатегории.СписокДокументов.ВыгрузитьЗначения(), ",");
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСтатусыПартнеров(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.СтатусыКонтрагентов");
	стррПоля = Новый Структура("GUID,Name,A02,A03"); // gi_170902 объявление структуры вынесено за цикл

	ВыгружаемыеСтатусы = СтатусыПартнеровВыгрузки();
	Для Каждого ЭлементСтатуса Из ВыгружаемыеСтатусы Цикл
		стррПоля.GUID = ЭлементСтатуса.Идентификатор;
		стррПоля.Name = ЭлементСтатуса.Наименование;
		стррПоля.A02  = ЭлементСтатуса.Предупреждение;
		стррПоля.A03  = ЦветВСтроку(ЭлементСтатуса.Цвет);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьЗапросыОбновления(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Запросы");
	стррПоля = Новый Структура("GUID,Name"); // gi_170902 объявление структуры вынесено за цикл

	ВыгружаемыеЗапросы = ЗапросыОбновления();
	Для Каждого ЭлементЗапроса Из ВыгружаемыеЗапросы Цикл
		стррПоля.GUID = ЭлементЗапроса.Идентификатор;
		стррПоля.Name = ЭлементЗапроса.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКлиентов(ДокОбмена, МенеджерВТ)
	
	Если гКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда
		ВыгрузитьКонтрагентов_УТАП(ДокОбмена, МенеджерВТ);
	Иначе 
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ);
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты"); // в МТ этот справочник называется "Контрагенты"
	
	РезультатВыборкиПартнеров = ДанныеПоПартнерамДляВыгрузки(МенеджерВТ);
	Выборка = РезультатВыборкиПартнеров.Выбрать();
	
	стррПоля = Новый Структура("GUID,Name,GrpId0,A06,A012,A023");
	
	Пока Выборка.Следующий() Цикл
		ВыборкаСсылка = Выборка.Ссылка;
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаСсылка.Наименование;
		стррПоля.A06  = Выборка.Статус;
		стррПоля.A012 = СокрЛП(ВыборкаСсылка.НаименованиеПолное);
		стррПоля.A023 = ВыборкаСсылка.Комментарий;
		стррПоля.GrpId0 = ВыборкаСсылка.ГруппаДоступа; 
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ДокОбмена.ЗаписатьКонецЭлемента(); 
	ВыгрузитьГруппировкиПартнеров(ДокОбмена, МенеджерВТ);
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ)

	Если гКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда 
		ВыгрузитьПунктыРазгрузки_УТАП(ДокОбмена, МенеджерВТ);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки"); // в МТ этот справочник называется "ТорговыеТочки"

	стррПоля = Новый Структура("GUID,Name,A02,A07");	
	
	РезультатВыборки = ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ);
	Выборка = РезультатВыборки.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID 	= Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Выборка.Наименование;
		стррПоля.A02	= Выборка.Партнер;
		стррПоля.A07	= Выборка.ДополнительнаяИнформация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКонтактныхЛицПартнеров(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактныеЛица");

	РезультатВыборкиКонтактныхЛиц = ДанныеПоКонтактнымЛицамПартнеровВыгрузки(МенеджерВТ);
	ВыгружаемыеКонтактныеЛица = РезультатВыборкиКонтактныхЛиц.Выбрать();
	Пока ВыгружаемыеКонтактныеЛица.Следующий() Цикл
		СтруктураПолей = ПредопределенныеПоляСправочника(ВыгружаемыеКонтактныеЛица.Ссылка);
		СтруктураПолей.Вставить("A03", ВыгружаемыеКонтактныеЛица.Партнер);
		СтруктураПолей.Вставить("A05", ВыгружаемыеКонтактныеЛица.Комментарий);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ)
	
	Если гКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда 
		ВыгрузитьКонтактнуюИнформацию_УТАП_ПунктыРазгрузок(ДокОбмена, МенеджерВТ);
	Иначе 
		ВыгрузитьКонтактнуюИнформацию_УТ(ДокОбмена, МенеджерВТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию_УТ(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация");

	ствТипыКИ = ТипыКонтактнойИнформации();
	стррПоля = Новый Структура("GUID,A01,A02,A03,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамПартнеровИКонтактныхЛицВыгрузки(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Новый УникальныйИдентификатор();
		стррПоля.A01 = Выборка.Партнер;
		стррПоля.A02 = ?(ИспользоватьКонтрагентов, Выборка.Контрагент, "");
		стррПоля.A03 = Выборка.КонтактноеЛицо;
		стррПоля.A04 = ствТипыКИ[Выборка.Тип];
		стррПоля.A05 = Выборка.Вид;
		стррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСоглашения(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Договоры");
	
	ПродажаОблагаетсяНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	стррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A010");

	РезультатВыборкиСоглашений = ДанныеПоСоглашениямВыгрузки(МенеджерВТ);
	Выборка = РезультатВыборкиСоглашений.Выбрать();
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID 	= Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Выборка.Наименование;
		стррПоля.A02	= Выборка.Партнер;
		стррПоля.A03	= Выборка.Дата;
		стррПоля.A04	= Выборка.ДатаОкончанияДействия;
		стррПоля.A05	= Выборка.Организация;
		стррПоля.A06	= Выборка.ВидЦен;
		стррПоля.A07	= (Выборка.НалогообложениеНДС = ПродажаОблагаетсяНДС);
		Если ИспользоватьКонтрагентов Тогда
			стррПоля.A010	= Выборка.Контрагент;
		КонецЕсли;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ)
	
	ВыгружатьХарактеристики 				  = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
	КонстантаИспользоватьУпаковкиНоменклатуры = КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры");
	СчЭлементов = 0;
	ДоступныеВидыЦен = ВидыЦенВыгрузки();
	ДоступныеСклады  = СкладыВыгрузки(МенеджерВТ);

	КоличествоРеквизитовЦен = 10;
	КоличествоРеквизитовОстатков = 5;
	ВсегоВидовЦен = ДоступныеВидыЦен.Количество();
	ВсегоСкладов = ДоступныеСклады.Количество();
	
	СтрокВТабличнойЧасти = Цел(ВсегоСкладов/КоличествоРеквизитовОстатков); // первая строка выгружается в заголовке 
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧОстатки = Неопределено;
	Иначе
		стррТЧОстатки = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧОстатки.GUID	   		   	= "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d";
		стррТЧОстатки.Comment	   	   	= "Остатки";	
		стррТЧОстатки.КоличествоСтрок  	= СтрокВТабличнойЧасти;
		стррТЧОстатки.ПолеВыгрузки 	   	= "A06";
		стррТЧОстатки.КоличествоРеквизитов = КоличествоРеквизитовОстатков;
		стррТЧОстатки.ИмяПоля 		   	= "Остаток";
	КонецЕсли;
	
	СтрокВТабличнойЧасти = Цел(ВсегоВидовЦен/КоличествоРеквизитовЦен);
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧЦены = Неопределено;
	Иначе
		стррТЧЦены = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧЦены.GUID	   		   	  	= "7f72aed2-94f7-4165-b112-c7a69fea70cc";
		стррТЧЦены.Comment	   	   		= "Цены";
		стррТЧЦены.КоличествоСтрок 		= СтрокВТабличнойЧасти;
		стррТЧЦены.ПолеВыгрузки 	  	= "A011";
		стррТЧЦены.КоличествоРеквизитов = КоличествоРеквизитовЦен;
		стррТЧЦены.ИмяПоля 		   		= "Цена";
	КонецЕсли;
	
	ВыгружатьТабличныеЧасти = стррТЧОстатки <> Неопределено	Или стррТЧЦены <> Неопределено;
	
	стррПоля = Новый Структура("GUID,Name,Code,GrpId0,GrpId1,A02,A03,A04,A05,A06,A08,A011,A013,A014,A015,A035,A037,A041,A042,A043,A044,A045,A046,A048,A050,A053");

	Запрос = ЗапросПоНоменклатуре(МенеджерВТ, ДоступныеВидыЦен);
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаОстатков = Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦен = Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Номенклатура");

	Пока ВыборкаОстатков.Следующий() Цикл
		ВыборкаЦен.Следующий();
		СчЭлементов = СчЭлементов + 1;

		ТекНоменклатура = ВыборкаОстатков.Номенклатура;
		ЕдиницыИзмерения = ЕдиницыИзмеренияНоменклатуры(ТекНоменклатура, КонстантаИспользоватьУпаковкиНоменклатуры);

		Если ВыгружатьХарактеристики Тогда
			УчетПоХарактеристикам = ВыборкаОстатков.УчетПоХарактеристикам;
		Иначе
			УчетПоХарактеристикам = Ложь;
		КонецЕсли;
		
		стррПоля.GUID = ТекНоменклатура.Ссылка.УникальныйИдентификатор();
		стррПоля.Name = ТекНоменклатура.Наименование;
		стррПоля.Code = ВыборкаОстатков.Код;
		
		стррПоля.A02 = ВыборкаОстатков.Родитель;
		стррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаОстатков.СтавкаНДС) * 100;
		стррПоля.A05 = ВыборкаОстатков.ВидНоменклатуры;
		// В реквизите A06 передается базовая единица измерения, относительно которой пересчитываются другие единицы
		стррПоля.A06 = ЕдиницыИзмерения.БазоваяЕдиница;
		стррПоля.A08 = УчетПоХарактеристикам;
		стррПоля.A011 = ВыборкаОстатков.Остаток;
		// В реквизите A013 указывается единица измерения, в которой отображаются остатки товаров в форме подбора в мобильном устройстве
		стррПоля.A013 = ЕдиницыИзмерения.БазоваяЕдиница;
		стррПоля.A014 = ВыборкаОстатков.Весовой;
		стррПоля.A015 = ВыборкаОстатков.ЭтоУслуга;
		стррПоля.A035 = ВыборкаОстатков.НаименованиеПолное;
		стррПоля.A037 = ВыборкаОстатков.Остаток > 0;
		стррПоля.A041 = ВыборкаОстатков.ОстатокМобСклада;
		стррПоля.A042 = СокрЛП(ВыборкаОстатков.Описание);
		стррПоля.A043 = ТекНоменклатура.ФайлКартинки;
		стррПоля.A044 = СчЭлементов;
		стррПоля.A045 = ""; //алкоголь
		стррПоля.A046 = ""; //дата розлива
		стррПоля.A048 = ВыборкаОстатков.ЦеноваяГруппа;
		// В реквизите A050 передаем единицу цены. В эту единицу пересчитывается цена товара (относительно базовой) в форме подбора в МУ 
		// Если ее не выгружать в файл обмена, то цены будут пересчитываться в базовые единицы
		стррПоля.A050 = ЕдиницыИзмерения.БазоваяЕдиница; //единица цены
		стррПоля.A053 = ЕдиницыИзмерения.НаборУпаковок;

		ДетальныеОстатки = ВыборкаОстатков.Выбрать();
		ДетальныеЦены = ВыборкаЦен.Выбрать();
		ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеЦены, КоличествоРеквизитовЦен, "Цена", "A02");
		ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеОстатки, КоличествоРеквизитовОстатков, "Остаток", "A03");

		стррПоля.GrpId0 = ?(ЗначениеЗаполнено(ВыборкаОстатков.Родитель), 		ВыборкаОстатков.Родитель, "");
		стррПоля.GrpId1 = ?(ЗначениеЗаполнено(ВыборкаОстатков.ВидНоменклатуры), ВыборкаОстатков.ВидНоменклатуры, "");

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);

		Если ВыгружатьТабличныеЧасти Тогда
			
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			Если стррТЧОстатки <> Неопределено Тогда
				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧОстатки);
				стррТЧОстатки.Номенклатура = ТекНоменклатура;
				стррТЧОстатки.ВыборкаЭлементов = ДетальныеОстатки;
				ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧОстатки);
				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			КонецЕсли;

			Если стррТЧЦены <> Неопределено Тогда
				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧЦены);
				стррТЧЦены.Номенклатура = ТекНоменклатура;
				стррТЧЦены.ВыборкаЭлементов = ДетальныеЦены;
				ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧЦены);
				ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			КонецЕсли;
			
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			
		КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();
		
	КонецЦикла;

	ДокОбмена.ЗаписатьКонецЭлемента();
	ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ);

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьХарактеристикиНоменклатуры(ДокОбмена, МенеджерВТ)
	
	Если Не ИспользоватьХарактеристики Или Не КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступныеВидыЦен = ВидыЦенВыгрузки();
	ДоступныеСклады  = СкладыВыгрузки(МенеджерВТ);

	КоличествоРеквизитовЦен = 10;
	КоличествоРеквизитовОстатков = 5;
	ВсегоВидовЦен = ДоступныеВидыЦен.Количество();
	ВсегоСкладов  = ДоступныеСклады.Количество();
	
	СтрокВТабличнойЧасти = Цел(ВсегоСкладов/КоличествоРеквизитовОстатков); // первая строка выгружается в заголовке 
	
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧОстатки = Неопределено;
	Иначе
		стррТЧОстатки = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧОстатки.GUID	   		   	= "19481e88-8575-4720-80e6-222816c754e4";
		стррТЧОстатки.Comment	   	   	= "Остатки";	
		стррТЧОстатки.КоличествоСтрок  	= СтрокВТабличнойЧасти;
		стррТЧОстатки.ПолеВыгрузки 	   	= "A06";
		стррТЧОстатки.КоличествоРеквизитов = КоличествоРеквизитовОстатков;
		стррТЧОстатки.ИмяПоля 		   	= "Остаток";
	КонецЕсли;
	
	СтрокВТабличнойЧасти = Цел(ВсегоВидовЦен/КоличествоРеквизитовЦен);
	Если СтрокВТабличнойЧасти = 0 Тогда
		стррТЧЦены = Неопределено;
	Иначе
		стррТЧЦены = Новый Структура("GUID,Comment,КоличествоСтрок,ПолеВыгрузки,КоличествоРеквизитов,ИмяПоля,Номенклатура,ВыборкаЭлементов");
		стррТЧЦены.GUID	   		   	  	= "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f";
		стррТЧЦены.Comment	   	   		= "Цены";
		стррТЧЦены.КоличествоСтрок 		= СтрокВТабличнойЧасти;
		стррТЧЦены.ПолеВыгрузки 	  	= "A011";
		стррТЧЦены.КоличествоРеквизитов = КоличествоРеквизитовЦен;
		стррТЧЦены.ИмяПоля 		   		= "Цена";
	КонецЕсли;
	
	ВыгружатьТабличныеЧасти = стррТЧОстатки <> Неопределено	Или стррТЧЦены <> Неопределено;
	
	стррПоля = Новый Структура("GUID,Name,A02,A04,A037,A039");
	
	Запрос = ЗапросПоХарактеристикамНомеклатуры(МенеджерВТ, ДоступныеВидыЦен);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаОстатков = Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦен 		= Результаты[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ХарактеристикиНоменклатуры");
	
	Пока ВыборкаОстатков.Следующий() Цикл
		ВыборкаЦен.Следующий();
		ВыборкаОстатковХарактеристики = ВыборкаОстатков.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОстатковХарактеристики.Следующий() Цикл 
			
			ИдХарактеристики = ИдентификаторХарактеристикиНоменклатуры(ВыборкаОстатковХарактеристики.Номенклатура, ВыборкаОстатковХарактеристики.Характеристика);
			
			стррПоля.GUID	= ИдХарактеристики;
			стррПоля.Name 	= ВыборкаОстатковХарактеристики.НаименованиеХарактеристики;
			стррПоля.A02 	= ВыборкаОстатковХарактеристики.Номенклатура;
			стррПоля.A04	= ВыборкаОстатковХарактеристики.Остаток;
			стррПоля.A037	= ВыборкаОстатковХарактеристики.Остаток > 0;
			стррПоля.A039	= ВыборкаОстатковХарактеристики.ОстатокМобСклада;
			
			ДетальныеОстатки = ВыборкаОстатковХарактеристики.Выбрать();
			ДетальныеЦены = ВыборкаЦен.Выбрать();
			ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеЦены, КоличествоРеквизитовЦен, "Цена", "A02");
			ВыгрузитьПоляВЭлемент(стррПоля, ДетальныеОстатки, КоличествоРеквизитовОстатков, "Остаток", "A03");
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь);
			
			Если ВыгружатьТабличныеЧасти Тогда
				
				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
				
				Если стррТЧОстатки <> Неопределено Тогда
					ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧОстатки);
					стррТЧОстатки.Номенклатура = ИдХарактеристики;
					стррТЧОстатки.ВыборкаЭлементов = ДетальныеОстатки;
					ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧОстатки);
					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
				КонецЕсли;

				Если стррТЧЦены <> Неопределено Тогда
					ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррТЧЦены);
					стррТЧЦены.Номенклатура = ИдХарактеристики;
					стррТЧЦены.ВыборкаЭлементов = ДетальныеЦены;
					ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррТЧЦены);
					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
				КонецЕсли;
				
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				
			КонецЕсли;
			
			ДокОбмена.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьГруппировкиПартнеров(ДокОбмена, МенеджерВТ)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "1e18c8db-08f6-47da-874b-100d6e109ab8");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по группе доступа");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппПартнеров());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ВыборкаГрупп = Запрос.Выполнить().Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл 
		СтруктураПолей = ПредопределенныеПоляСправочника(ВыборкаГрупп);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей);
	КонецЦикла;
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ)

	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "8e502a85-8dd4-41cf-a7a4-17ab50872d36");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по иерархии");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппНоменклатуры());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ДеревоГрупп = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ДеревоГрупп.Строки);
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();

	// Объявление группировки по видам номенклатуры
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "e42da5b9-e29b-43e1-b7e3-9b500879d6b7");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по видам номенклатуры");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	Запрос = Новый Запрос(ТекстЗапросаВыборкиВидовНоменклатуры());
	ДеревоГрупп = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ДеревоГрупп.Строки);
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура РекурсивноЗаписатьГруппуСправочника(ДокОбмена, Строки)

	Для каждого ТекГруппа Из Строки Цикл
		Если ЗначениеЗаполнено(ТекГруппа.Родитель)
			И ТекГруппа.Ссылка = ТекГруппа.Родитель.Ссылка Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПолей = ПредопределенныеПоляСправочника(ТекГруппа);
		Если ЗначениеЗаполнено(ТекГруппа.РодительЭл) Тогда
			СтруктураПолей.Вставить("ParId", ТекГруппа.РодительЭл.УникальныйИдентификатор());
		КонецЕсли; 

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей);
		РекурсивноЗаписатьГруппуСправочника(ДокОбмена, ТекГруппа.Строки);
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ЕдиницыИзмерения");

	Результат = ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ);
	
	стррПоля = Новый Структура("GUID,Name,Code,A02,A03,A04,A05,A06,A07");
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		// для номенклатуры без упаковок вместо ссылки единицы измерения подставляем ссылку номенклатуры
		// чтобы GUID'ы единиц измерения не пересекались и была возможность передавать вес в единицу измерения 
		Если Выборка.ЭтоЕдиницаНоменклатуры Тогда
			стррПоля.GUID = Выборка.Номенклатура.УникальныйИдентификатор();
		Иначе
			стррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		КонецЕсли; 
		стррПоля.Name = Выборка.Наименование;
		стррПоля.Code = Выборка.КодОКЕИ;
		стррПоля.A02 = 	Выборка.Коэффициент;
		стррПоля.A03 = 	Выборка.Номенклатура;
		стррПоля.A04 = 	Выборка.Вес;
		стррПоля.A05 = 	Выборка.ЭтоНаборУпаковок;
		стррПоля.A06 = 	Выборка.ВладелецНаборУпаковок;
		стррПоля.A07 = 	Выборка.Классификатор;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьИсториюПродаж Или ГлубинаИсторииПродаж = 0 Или КоличествоИнтерваловИстории = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.НачалоИнтервала,
	    |	Интервалы.КонецИнтервала,
	    |	Интервалы.НомерИнтервала
	    |ПОМЕСТИТЬ Интервалы
	    |ИЗ
	    |	&Интервалы КАК Интервалы
	    |;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	ВЫБОР
	    |		КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	    |				И Таблица.День <= Интервалы.КонецИнтервала
	    |			ТОГДА Интервалы.НомерИнтервала
	    |		ИНАЧЕ 0
	    |	КОНЕЦ КАК НомерИнтервала,
	    |	Таблица.АналитикаУчетаПоПартнерамПартнер КАК Партнер,
	    |	Таблица.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	    |	СУММА(Таблица.Количество) КАК Количество,
	    |	СУММА(Таблица.Выручка) КАК Выручка
	    |ИЗ
	    |	(ВЫБРАТЬ
	    |		ЕСТЬNULL(Продажи.ЗаказКлиента.Сделка, ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)) КАК Сделка,
	    |		Продажи.ВидЗапасов КАК ВидЗапасов,
	    |		ВЫБОР
	    |			КОГДА Продажи.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	    |				ТОГДА Продажи.ВидЗапасов.Комитент
	    |			ИНАЧЕ Продажи.ВидЗапасов.Поставщик
	    |		КОНЕЦ КАК Поставщик,
	    |		Продажи.ВидЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	    |		ЕСТЬNULL(Продажи.ЗаказКлиента.Менеджер, НЕОПРЕДЕЛЕНО) КАК Менеджер,
	    |		Продажи.Регистратор КАК Регистратор,
	    |		ВЫБОР
	    |			КОГДА Продажи.ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	    |					ИЛИ Продажи.ЗаказКлиента ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	    |				ТОГДА Продажи.ЗаказКлиента
	    |			ИНАЧЕ НЕОПРЕДЕЛЕНО
	    |		КОНЕЦ КАК ЗаказКлиента,
	    |		Продажи.Подразделение КАК Подразделение,
	    |		Продажи.КоличествоОборот КАК Количество,
	    |		Продажи.СуммаВыручкиОборот КАК Выручка,
	    |		Продажи.ПериодДень КАК День,
	    |		Продажи.ПериодНеделя КАК Неделя,
	    |		Продажи.ПериодДекада КАК Декада,
	    |		Продажи.ПериодМесяц КАК Месяц,
	    |		Продажи.ПериодКвартал КАК Квартал,
	    |		Продажи.ПериодПолугодие КАК Полугодие,
	    |		Продажи.ПериодГод КАК Год,
	    |		Продажи.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	    |		Продажи.АналитикаУчетаПоПартнерам.Партнер КАК АналитикаУчетаПоПартнерамПартнер
	    |	{ВЫБРАТЬ
	    |		ЗаказКлиента.*,
	    |		Сделка.*,
	    |		Подразделение.*,
	    |		Поставщик.*,
	    |		Менеджер.*,
	    |		ВидЗапасов.*,
	    |		ГруппаФинансовогоУчета.*,
	    |		Регистратор,
	    |		День,
	    |		Неделя,
	    |		Декада,
	    |		Месяц,
	    |		Квартал,
	    |		Полугодие,
	    |		Год}
	    |	ИЗ
	    |		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	    |				&НачПериода {(&НачалоПериода)},
	    |				&КонПериода {(&ОкончаниеПериода)},
	    |				Авто,
	    |				АналитикаУчетаНоменклатуры.Номенклатура В ( ВЫБРАТЬ ВТ_Ассортимент.Ссылка ИЗ ВТ_Ассортимент )
	    |					И АналитикаУчетаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )) КАК Продажи
	    |	{ГДЕ
	    |		(ЕСТЬNULL(Продажи.ЗаказКлиента.Сделка, ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка))).* КАК Сделка}) КАК Таблица,
	    |	Интервалы КАК Интервалы
	    |ГДЕ
	    |	ВЫБОР
	    |			КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	    |					И Таблица.День <= Интервалы.КонецИнтервала
	    |				ТОГДА Интервалы.НомерИнтервала
	    |			ИНАЧЕ 0
	    |		КОНЕЦ > 0
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	Таблица.АналитикаУчетаНоменклатуры.Номенклатура,
	    |	Таблица.АналитикаУчетаПоПартнерамПартнер,
	    |	ВЫБОР
	    |		КОГДА Таблица.День >= Интервалы.НачалоИнтервала
	    |				И Таблица.День <= Интервалы.КонецИнтервала
	    |			ТОГДА Интервалы.НомерИнтервала
	    |		ИНАЧЕ 0
	    |	КОНЕЦ
	    |ИТОГИ ПО
	    |	Партнер,
	    |	Номенклатура
		|"; 	  
	
	КонПериода = ТекущаяДата();
	НачПериода = НачалоДня(КонПериода - ГлубинаИсторииПродаж * 86400);
		
	тзИнтервалы = Новый ТаблицаЗначений;	
	тзИнтервалы.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));			
	тзИнтервалы.Колонки.Добавить("КонецИнтервала",  Новый ОписаниеТипов("Дата"));		
	тзИнтервалы.Колонки.Добавить("НомерИнтервала",  Новый ОписаниеТипов("Число"));
	
	РазмерИнтервала = Окр((КонПериода - НачПериода) / КоличествоИнтерваловИстории, 0, РежимОкругления.Окр15как20);
	
	НачалоИнтервала = НачПериода;
	Для Индекс = 1 По КоличествоИнтерваловИстории Цикл		
		КонецИнтервала = ?(Индекс < КоличествоИнтерваловИстории, НачалоИнтервала + РазмерИнтервала, КонПериода);
		СтрокаТ = тзИнтервалы.Добавить();
		СтрокаТ.НачалоИнтервала = НачалоИнтервала;
		СтрокаТ.КонецИнтервала  = КонецИнтервала;
		СтрокаТ.НомерИнтервала  = Индекс;
		НачалоИнтервала = КонецИнтервала;
	КонецЦикла;
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("НачПериода",	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",	КонПериода);
	Запрос.УстановитьПараметр("Интервалы",	тзИнтервалы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ИсторияПродаж", Истина);
	
		стррПоля = Новый Структура("GUID,A02,A04,A07,A08");
		стррПоля.A08 = 0;
		
		стррПоиск = Новый Структура("НомерИнтервала");
	
		ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
		Пока ВыборкаПартнер.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
			Пока ВыборкаНоменклатура.Следующий() Цикл
				 						
				ВыборкаДетали = ВыборкаНоменклатура.Выбрать();
				
				стрИстория = "";
				
				Для Индекс = 1 По КоличествоИнтерваловИстории Цикл
					стррПоиск.НомерИнтервала = Индекс;
					ВыборкаДетали.Сбросить();
					Если ВыборкаДетали.НайтиСледующий(стррПоиск) Тогда
						стрИстория = СтрИстория + Формат(ВыборкаДетали.Количество, "ЧГ=0") + " ";		
					Иначе
						стрИстория = СтрИстория + "0" + " ";		
					КонецЕсли;				
				КонецЦикла;
				
				стррПоля.GUID = Новый УникальныйИдентификатор();
				стррПоля.A02 = ВыборкаНоменклатура.Партнер;
				стррПоля.A04 = ВыборкаНоменклатура.Номенклатура;
				стррПоля.A07 = СокрЛП(стрИстория);
				
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);				
			КонецЦикла; //Пока ВыборкаНоменклатура.Следующий() Цикл  
					
		КонецЦикла; //Пока ВыборкаПартнер.Следующий() Цикл
			
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры //Процедура ВыгрузитьИсториюПродаж()

Функция ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияПартнеров Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	тзКартинки = Новый ТаблицаЗначений;
	тзКартинки.Колонки.Добавить("Ссылка");
	тзКартинки.Колонки.Добавить("Описание");
	тзКартинки.Колонки.Добавить("ИмяФайла");
	
	Текст = ТекстЗапросаПолученияИзображений();	
	Запрос = Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ФотоСправочников");
	
	стрРасширения = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	стррПоля = Новый Структура("GUID,Name,A01,A02,A03");
	
	ТипХранилищеЗначения	  = Тип("ХранилищеЗначения");
	ТипСправочникНоменклатура = Тип("СправочникСсылка.Номенклатура");
	ТипСправочникПартнеры 	  = Тип("СправочникСсылка.Партнеры");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 				
		
		Если ТипЗнч(Выборка.ХранимыйФайл) = ТипХранилищеЗначения Тогда
			Картинка = Выборка.ХранимыйФайл.Получить();
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		
		ВыборкаСсылка = Выборка.Ссылка;
		
		Если Найти(стрРасширения, Выборка.Расширение) = 0 Или (Картинка = Неопределено И ВыборкаСсылка.Том.Пустая()) Тогда
			Продолжить;
		КонецЕсли;	
		
		ВладелецФайла = Выборка.ВладелецФайла;
		
		Если ТипЗнч(ВладелецФайла) = ТипСправочникНоменклатура Тогда
			стррПоля.A02 = ВладелецФайла;
			стррПоля.A03 = Неопределено;
		ИначеЕсли ТипЗнч(ВладелецФайла) = ТипСправочникПартнеры Тогда
			стррПоля.A02 = Неопределено;
			стррПоля.A03 = ВладелецФайла;
		Иначе
			Продолжить;
		КонецЕсли;
		
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = ВыборкаСсылка.Наименование;		
		стррПоля.A01  = ВыборкаСсылка;
		
		СтрокаТ = тзКартинки.Добавить();
		СтрокаТ.Ссылка 	 = ВыборкаСсылка;
		СтрокаТ.Описание = Выборка.Описание;
		СтрокаТ.ИмяФайла = ВРег(стррПоля.GUID) + "." + Выборка.Расширение;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);	
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Возврат тзКартинки;

КонецФункции //Функция ВыгрузитьСправочникИзображений()

Процедура ВыгрузитьПечатныеФормы(ДокОбмена)
	
	// sd_10082017 Чтобы не хранить в базе ТЗ, генерируем ее на лету, т.к. если потребуется добавить новые ПФ, то так проще их будет добавить.
	// Также, нужно продумать как оптимизировать хранение и использование временных таблиц для служебных справочников, т.к. чем больше будем добавлять
	// таких справочников, тем хуже будет сказываться на производительности.
	тзПФД = Новый ТаблицаЗначений;
	тзПФД.Колонки.Добавить("Идентификатор");
	тзПФД.Колонки.Добавить("Наименование");
	тзПФД.Колонки.Добавить("Код");
	тзПФД.Колонки.Добавить("ВидДокумента");
	тзПФД.Колонки.Добавить("ЧислоКопий");
	тзПФД.Колонки.Добавить("Ориентация");
	
	СтрокаТ = тзПФД.Добавить();
	СтрокаТ.Идентификатор 	= Новый УникальныйИдентификатор(); // случайный идентификатор
	СтрокаТ.Наименование	= "Счет"; // Наименование справочника
	СтрокаТ.Код				= "СчетНаОплату"; // Код справочника
	СтрокаТ.ВидДокумента 	= "e070d148-8c9c-4e5f-afda-2838d5be6618"; // Вид документа "Заказ" в МТ
	СтрокаТ.ЧислоКопий 		= "1"; // Число копий
	СтрокаТ.Ориентация 		= "0"; // Ориентация страницы 0 - портрет, 1 - ландшафт
	
	стррПоля = Новый Структура("GUID,Name,Code,A01,A02,A03");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыДокументов", Истина);
	
	Для Каждого СтрокаТ Из тзПФД Цикл 
		стррПоля.GUID	= СтрокаТ.Идентификатор;
		стррПоля.Name	= СтрокаТ.Наименование;
		стррПоля.Code	= СтрокаТ.Код;
		стррПоля.A01 	= СтрокаТ.ВидДокумента;
		стррПоля.A02 	= СтрокаТ.ЧислоКопий;
		стррПоля.A03 	= СтрокаТ.Ориентация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	стррПоля = Новый Структура("GUID,A01,A02");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыОрганизаций", Истина);
	
	тзОрганизации = ТЗОрганизацииВыгрузки();

	Для Каждого ТекОрганизация Из тзОрганизации Цикл
		
		Для Каждого СтрокаТ Из тзПФД Цикл 
			стррПоля.GUID	= Новый УникальныйИдентификатор();
			стррПоля.A01 	= ТекОрганизация.Ссылка;
			стррПоля.A02 	= СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	тзПФД.Очистить();
	
КонецПроцедуры

// Процедура выгружает ветку картинок ("PICTURES") в файл выгрузки.
// Параметры:
//		ДокОбмена  - ЗаписьXML - XML-документ выгрузки.
//		тзКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы или СправочникСсылка.ПартнерыПрисоединенныеФайлы
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
Процедура ВыгрузитьИзображения(ДокОбмена, тзКартинки)
	
	Если тзКартинки = Неопределено Или тзКартинки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	стррПоля = Новый Структура("GUID,FileName,Description");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Картинки");	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Для каждого СтрокаТ Из тзКартинки Цикл
		стррПоля.GUID		 = ВРег(СтрокаТ.Ссылка.УникальныйИдентификатор());
		стррПоля.FileName	 = СтрокаТ.ИмяФайла;
		стррПоля.Description = СтрокаТ.Описание;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла; 	
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); // PICTURES
	
КонецПроцедуры

// ВыгрузкаСправочников
#КонецОбласти

#Область ВыгрузкаДокументов

Процедура ВыгрузитьДокументы(ДокОбмена, МенеджерВТ)

	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Документы");

	ВыгрузитьДокументыЗаказ(ДокОбмена); 
	
	ВыгрузитьДокументыПродажи(ДокОбмена); 
	
	ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьДокументыПеремещения(ДокОбмена); // sd_22082017
	
	ВыгрузитьМаршруты(ДокОбмена);

	Если ОчищатьДокументыПередЗагрузкой Тогда 
		// нужно выгрузить пустые тэги с атрибутом KillAll для невыгруженных видов документов, указанных в списке СписокОчищаемыхДокументов
		ИсключитьВидыДокументов = "Заказ,Долг,Реализация,Перемещение"; // // sd_22082017 добавил перемещение.
		ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, СтрРазделить_(ИсключитьВидыДокументов));
	КонецЕсли;

	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS

КонецПроцедуры

Процедура ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, мИсключитьВидыДокументов)
	
	Если ОчищатьДокументыПередЗагрузкой Тогда
		Для Каждого Элемент Из СписокОчищаемыхДокументов Цикл
			Если Неопределено = мИсключитьВидыДокументов.Найти(Элемент.Значение) Тогда
				ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ." + Элемент.Значение, 1); // с признаком удаления всех документов данного вида
				ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДокументыЗаказ(ДокОбмена)

	Результат = ДанныеПоДокументамЗаказПокупателя();
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A02,A03,A04,A05,A06,A07,A08,A09,A010,A011,A016,A019"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "0738E61B-F06F-464A-8483-4249E0254819", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
	
	СписокЗаказов = Новый Массив;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Заказ");
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		мПодчиненныеДокументы = ПодчиненныеРеализацииДляЗаказа(ВыборкаДок.Ссылка);
		Если мПодчиненныеДокументы.Количество() > 0 Тогда 
			СписокЗаказов.Добавить(ВыборкаДок.Ссылка);
		КонецЕсли;
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Ссылка.Дата;
		СтррПоля.IsPost = ВыборкаДок.Ссылка.Проведен;
		СтррПоля.A02 = ВыборкаТабличнойЧасти.Организация;
		СтррПоля.A03 = ВыборкаТабличнойЧасти.Клиент;
		СтррПоля.A04 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
		СтррПоля.A05 = ВыборкаТабличнойЧасти.Соглашение;
		СтррПоля.A06 = "";
		СтррПоля.A07 = "";
		СтррПоля.A08 = СуммаДокумента;
		СтррПоля.A09 = ВыборкаТабличнойЧасти.Вес;
		СтррПоля.A010 = ВыборкаТабличнойЧасти.ЖелаемаяДатаОтгрузки;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A016 = мПодчиненныеДокументы.Количество() > 0;
		СтррПоля.A019 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			стррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			стррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			стррПоляТЧ.A02 = ИдентификаторХарактеристикиНоменклатуры(ВыборкаТабличнойЧасти.Номенклатура, ВыборкаТабличнойЧасти.Характеристика);
			стррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			стррПоляТЧ.A04 = Количество;
			стррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			стррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентРучнойСкидки;
			стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			стррПоляТЧ.A011 = ВыборкаТабличнойЧасти.Склад;
			стррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата); //Сумма скидки
			стррПоляТЧ.A015 = ВыборкаТабличнойЧасти.ВидЦены;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Если СписокЗаказов.Количество() > 0 Тогда 
		гКэшСпискиОбъектов.Вставить("СписокЗаказов", СписокЗаказов);
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьДокументыПродажи(ДокОбмена)

	Результат = ДанныеПоДокументамПродажи();
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A01,A02,A03,A04,A05,A06,A07,A08,A09,A011,A018"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "E4D61E0A-1D62-48D7-B70C-BCBA935D377A", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Реализация");
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Ссылка.Дата;
		СтррПоля.IsPost = ВыборкаДок.Ссылка.Проведен;
		СтррПоля.A01 = ВыборкаТабличнойЧасти.Организация;
		СтррПоля.A02 = ВыборкаТабличнойЧасти.Клиент;
		СтррПоля.A03 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
		СтррПоля.A04 = ВыборкаТабличнойЧасти.Соглашение;
		СтррПоля.A05 = "";
		СтррПоля.A06 = "";
		СтррПоля.A07 = СуммаДокумента;
		СтррПоля.A08 = ВыборкаТабличнойЧасти.Вес;
		СтррПоля.A09 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.ДокументЗаказ;
		СтррПоля.A018 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			стррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			стррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			стррПоляТЧ.A02 = ИдентификаторХарактеристикиНоменклатуры(ВыборкаТабличнойЧасти.Номенклатура, ВыборкаТабличнойЧасти.Характеристика);
			стррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			стррПоляТЧ.A04 = Количество;
			стррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			стррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			стррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентРучнойСкидки;
			стррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС)*100;
			стррПоляТЧ.A011 = ВыборкаТабличнойЧасти.Склад;
			стррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата); //Сумма скидки
			стррПоляТЧ.A015 = ВыборкаТабличнойЧасти.ВидЦены;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьМаршруты(ДокОбмена)
	
	Если Не ВыгружатьМаршруты Тогда
		Возврат;
	КонецЕсли; 
	
	стррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); // получили список торговых точек
	Если стррОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СмещениеОтНачалаПлана = ДеньНедели(ТекущаяДата()) - 1;
	ПериодПлана = стррОбъект.ПериодГрафикаПлана;
	Если ПериодПлана > 7 И стррОбъект.ДатаНачала <> '00010101' Тогда
		Дней = (НачалоДня(ТекущаяДата()) - стррОбъект.ДатаНачала) / 86400;
		СмещениеОтНачалаПлана = Дней % стррОбъект.ПериодГрафикаПлана;
	КонецЕсли; 
	
	ИспользуетсяГрафик = Неопределено;
	ИспользуетсяПП 	   = Неопределено;
	Если Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(стррОбъект, ИспользуетсяГрафик, ИспользуетсяПП) Тогда
	    Возврат;
	КонецЕсли; 
	
	ИспользуетсяКонтрагент 	= стррОбъект.Детализация.НайтиПоЗначению("Контрагент") <> Неопределено;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Маршрут", 1);  // с признаком удаления всех документов Маршрут
		
	СтррПоля = Новый Структура("GUID,dt,IsPost");
	СтррПоля.IsPost = Истина; // признак, что документ проведен
	СтррПункт = Новый Структура("GUID,DocId,A01,A02,A03,A04");	
	
	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	
	Если ИспользуетсяПП Тогда // если детализация по плану посещения - то выгружаем данные из плана посещения
		
		// Если включена детализация до контрагента, то нужно подготовить соответствие: Партнер -> Состав.Строка (соответствие партнеру строке из ТЗ Состав)
		// Это соответствие используется для выгрузки дополнительно контрагента для каждого пункта маршрута.
		Если ИспользуетсяКонтрагент Тогда 
			ствПартнеры = Новый Соответствие;
			тзСостав = СтррОбъект.Состав;
			Для каждого СтрокаТ Из тзСостав Цикл
				ТорговаяТочка = ?(ИспользоватьПунктыРазгрузки, СтрокаТ.ПунктРазгрузки, СтрокаТ.Партнер);
				Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
					ствПартнеры.Вставить(ТорговаяТочка, СтрокаТ);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
		тзПланПосещений = СтррОбъект.ПланПосещений;
		тзПланПосещений.Сортировать("День,Порядок,Партнер");

		мДниПлана = Новый Массив(ПериодПлана);
		ТекДень   = Неопределено;
		Для каждого СтрокаТ Из тзПланПосещений Цикл
			Если СтрокаТ.День <> ТекДень Тогда
				Если СтрокаТ.День > ПериодПлана Тогда // Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен 
					Прервать; 						  // на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
				КонецЕсли; 
				ТекДень = СтрокаТ.День;
				мДниПлана[ТекДень-1] = тзПланПосещений.Индекс(СтрокаТ);
			КонецЕсли; 
		КонецЦикла;
		
		ИспользоватьПорядок = СтррОбъект.ИспользоватьПорядок;
		
		КоличествоСтрокПлана = тзПланПосещений.Количество();
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ИндексСтроки = мДниПлана[(ДеньПериода + СмещениеОтНачалаПлана) % ПериодПлана];
			Если ИндексСтроки = Неопределено Тогда // на этот день не запланировано посещений
				Продолжить;
			КонецЕсли; 
			
			// Открываем тэги нового дня (нового документа МТ "Маршрут")
			стррПоля.GUID = Новый УникальныйИдентификатор();
			стррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); //ITEM
			// Заполняем табличные части документа
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			// Заполняем табличную часть контрагентов маршрута		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
			ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
			
			Порядок = 0;
			
			ТекДень = тзПланПосещений[ИндексСтроки].День;
			
			Пока ИндексСтроки < КоличествоСтрокПлана Цикл
				
				СтрокаТ = тзПланПосещений[ИндексСтроки];
				Если СтрокаТ.День <> ТекДень Тогда
					Прервать;
				КонецЕсли; 
				
				СтррПункт.GUID  = Новый УникальныйИдентификатор();
				СтррПункт.DocId = стррПоля.GUID;
				Если ИспользоватьПунктыРазгрузки Тогда
					стзСостав = ствПартнеры[СтрокаТ.Партнер];
					СтррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					СтррПункт.A02 = СтрокаТ.Партнер;
				Иначе 
					СтррПункт.A01 = СтрокаТ.Партнер;	 // в МТ - это поле "Контрагент"
					Если ИспользуетсяКонтрагент Тогда 
						стзСостав = ствПартнеры[СтрокаТ.Партнер];
						СтррПункт.A02 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					КонецЕсли;
				КонецЕсли;
				СтррПункт.A03 = СтрокаТ.Время;
				СтррПункт.A04 = СтрокаТ.Комментарий;
				//Если ИспользоватьПорядок Тогда
				//	СтррПункт.A05 = СтрокаТ.Порядок;
				//Иначе
				//	Порядок = Порядок + 1;					
				//	СтррПункт.A05 = Порядок;
				//КонецЕсли;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПункт);	
				ИндексСтроки = ИндексСтроки + 1;
				
			КонецЦикла; 
			
			// закрываем тэги текущего документа Маршрут
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			
		КонецЦикла; 
		
	Иначе // Детализация только по графику посещения, выгружаем данные из желательного графика посещений.
		
		тзСостав = стррОбъект.Состав;
		Пункт = Неопределено;
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ОткрытТэгМаршрута = Ложь;
			
			Для каждого СтрокаТ Из тзСостав Цикл
				
				стррГрафик = СтрокаТ.График;
				Если стррГрафик = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				стррПункты = стррГрафик.Пункты;
				Если стррПункты = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ПериодГрафика = стррГрафик.ПериодГрафика;
				ДеньГрафика = (ДеньПериода + СмещениеОтНачалаПлана) % ПериодГрафика;
				УчитыватьВремяПосещения = стррГрафик.УчитыватьВремяПосещения;
				
				Если стррПункты.Свойство("П"+Строка(ДеньГрафика), Пункт) И Пункт.Выбран Тогда
					
					Если Не ОткрытТэгМаршрута Тогда
						ОткрытТэгМаршрута = Истина;
						Порядок = 0;
						// Открываем тэги нового дня (нового документа МТ "Маршрут")
						стррПоля.GUID = Новый УникальныйИдентификатор();
						стррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
						ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля, Ложь); //ITEM
						// Заполняем табличные части документа
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						// Заполняем табличную часть контрагентов маршрута		
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
						ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
						ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
					КонецЕсли; 
					
					СтррПункт.GUID  = Новый УникальныйИдентификатор();
					СтррПункт.DocId = стррПоля.GUID;
					Если ИспользоватьПунктыРазгрузки Тогда
						стзСостав = ствПартнеры[СтрокаТ.Партнер];
						СтррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
						СтррПункт.A02 = СтрокаТ.Партнер;
					Иначе
						СтррПункт.A01 = СтрокаТ.Партнер;	 // в МТ - это поле "Контрагент"
						Если ИспользуетсяКонтрагент Тогда 
							СтррПункт.A02 = СтрокаТ.Контрагент;
						КонецЕсли;
					КонецЕсли;
					СтррПункт.A03 = ?(УчитыватьВремяПосещения, Лев(Пункт.Время, 5), "");
					СтррПункт.A04 = ""; // Комментарий
					//СтррПункт.A05 = Порядок;
					//Порядок = Порядок + 1;					
					ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПункт);	
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если ОткрытТэгМаршрута Тогда
				// закрываем тэги текущего документа Маршрут
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; // Если ИспользуетсяПП Тогда
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ)

	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГрафикиОплатыЭтапы.Сдвиг КАК Сдвиг,
	               |	ГрафикиОплатыЭтапы.Ссылка КАК СсылкаГОЭ
	               |ИЗ
	               |	Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы";
	РезультатГрафикОплат = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоВзаиморасчетам(СпособРасчетаПросроченныхДолгов);
	Запрос.УстановитьПараметр("ДатаРасчета", ТекущаяДата);
	Запрос.УстановитьПараметр("КолПросроченныхДней", ИнтервалПросроченныхДолгов);
	Запрос.УстановитьПараметр("ТолькоПросроченные", ВыгружатьТолькоПросроченныеДолги);
	Запрос.УстановитьПараметр("СписокОрганизаций", ОрганизацииВыгрузки());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Результат = Запрос.Выполнить();
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Долг", 1);  // с признаком удаления всех документов Долг
	
	НеУчитыватьПросрочку = Не ЗначениеЗаполнено(СпособРасчетаПросроченныхДолгов) Или СпособРасчетаПросроченныхДолгов = "НеУчитывать";
	
	стррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A05,A06,A07,A08,A011,A014,A015");
	
	Выборка = Результат.Выбрать();
	
	ТипДокументЗаказ 		= Тип("ДокументСсылка.ЗаказКлиента"); 
	ТипДокументРеализация 	= Тип("ДокументСсылка.РеализацияТоваровУслуг");
	
	стррДокумент = Новый Структура("Дата, Проведен, Номер, Ссылка");
	
	Если НеУчитыватьПросрочку Тогда
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.НашДолг > 0 Или Выборка.ДолгКлиента = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаДолга = Выборка.ДолгКлиента;			
			Комментарий = "";
			НомерДок = "";

			ОбъектРасчетов = Выборка.ЗаказКлиента;
			Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
				
				ДатаПлатежа = ОбъектРасчетов.Дата;
				
				Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
					Комментарий = ОбъектРасчетов.Комментарий;
					НомерДок = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ОбъектРасчетов.Номер);
					стррДокумент.Дата 		= ОбъектРасчетов.Дата;
					стррДокумент.Проведен	= Истина; 
					стррДокумент.Номер 		= ОбъектРасчетов.Номер; 
					стррДокумент.Ссылка 	= ОбъектРасчетов;
					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(ОбъектРасчетов.СуммаДокумента, ОбъектРасчетов.Валюта, ОбъектРасчетов.Дата);
					ПредставлениеДок = ОбъектРасчетов.Метаданные().Синоним + " №" + НомерДок + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
					ЗаполнитьОсновныеПоляДокумента(стррПоля, стррДокумент, Ложь, Истина);
				Иначе
					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
					ПредставлениеДок = "Договор с контрагентом" + " №" + СокрЛП(ОбъектРасчетов.Номер) + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
					стррПоля.GUID 		= Новый УникальныйИдентификатор();
					стррПоля.dt 		= ДатаПлатежа;
					стррПоля.IsPost 	= Истина;
					стррПоля.DocNumber = "";
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Выборка.Соглашение) Тогда
					ДатаПлатежа = Выборка.Соглашение.Дата;
					Комментарий = "Дата платежа из даты Соглашения";
				Иначе
					ДатаПлатежа = НачалоМесяца(ТекущаяДата());
					Комментарий = "Долг пересчитан на начало месяца";					
				КонецЕсли; 
				ДатаПлатежа = Неопределено;
				СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
				ПредставлениеДок = "Ввод начальных остатков ";
				стррПоля.GUID 		= Новый УникальныйИдентификатор();
				стррПоля.dt 		= ДатаПлатежа;
				стррПоля.IsPost 	= Истина;
				стррПоля.DocNumber = "";
				
			КонецЕсли;

			стррПоля.A02 = Выборка.Организация;
			стррПоля.A03 = Выборка.Партнер;
			стррПоля.A05 = Выборка.Соглашение;
			стррПоля.A06 = ДатаПлатежа;
			стррПоля.A08 = Комментарий;
			Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ОбъектРасчетов.Дата);
				стррПоля.A011 = ОбъектРасчетов.Ссылка.УникальныйИдентификатор(); 
			Иначе
				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
				стррПоля.A011 = Неопределено;
			КонецЕсли;
			стррПоля.A014 = Ложь;
			стррПоля.A015 = ПредставлениеДок;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
			
		КонецЦикла;
	
	Иначе // выгрузка долгов с учетом просрочки (НеУчитыватьПросрочку = Ложь)
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.НашДолг > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаПлатежа = ?(Выборка.ДатаПлатежа = Неопределено, '00010101', Выборка.ДатаПлатежа);
			
			Если ДатаПлатежа = '00010101' Тогда 
				ТекущийГОЭ 	= ?(ТипЗнч(Выборка.ЗаказКлиентаСоглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами"), Выборка.ЗаказКлиентаСоглашение.ГрафикОплаты, Справочники.ГрафикиОплаты.ПустаяСсылка());
				МассивГОЭ 	= РезультатГрафикОплат.НайтиСтроки(Новый Структура("СсылкаГОЭ", ТекущийГОЭ));
				Если МассивГОЭ.Количество() <> 0 Тогда 
					СдвигПоОплате = МассивГОЭ[0].Сдвиг;
					ДатаПлатежа = Выборка.ЗаказКлиента.Дата + (СдвигПоОплате * 86400);
				Иначе 
					ДатаПлатежа = ТекущаяДата();
				КонецЕсли;
			КонецЕсли;
			
			Если СпособРасчетаПросроченныхДолгов = "ПоДоговору" Тогда
				ДатаПросрочки = ДатаПлатежа;
			Иначе
				ДатаПросрочки = ДатаПлатежа + (ИнтервалПросроченныхДолгов * 86400);
			КонецЕсли;
			
			Если ВыгружатьТолькоПросроченныеДолги И ТекущаяДата < ДатаПросрочки Тогда
				Продолжить;
			КонецЕсли;

			ВыделитьЦветом = Ложь;
			Комментарий = "";
			НомерДок = "";
			Если ВыгружатьТолькоПросроченныеДолги Тогда
				СуммаДолга = Выборка.ДолгПросрочено;
			Иначе
				СуммаДолга = Выборка.ДолгКлиента;
			КонецЕсли;
			Если ДатаПросрочки < ТекущаяДата() И ВыделятьЦветомПросроченныеДолги Тогда
				ВыделитьЦветом = Истина;
			КонецЕсли;

			ОбъектРасчетов = Выборка.ЗаказКлиента;
			Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
				
				Если ЕстьРеквизитОбъекта("Соглашение", ОбъектРасчетов) Тогда
					ДокСоглашение = ОбъектРасчетов.Соглашение;
				КонецЕсли;
				
				Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
					Комментарий = ОбъектРасчетов.Комментарий;
					НомерДок = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(ОбъектРасчетов.Номер);
					стррДокумент.Дата 		= ОбъектРасчетов.Дата;
					стррДокумент.Проведен	= Истина; 
					стррДокумент.Номер 		= ОбъектРасчетов.Номер; 
					стррДокумент.Ссылка 	= ОбъектРасчетов;
					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(ОбъектРасчетов.СуммаДокумента, ОбъектРасчетов.Валюта, ОбъектРасчетов.Дата);
					ПредставлениеДок = ОбъектРасчетов.Метаданные().Синоним + " №" + НомерДок + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
					ЗаполнитьОсновныеПоляДокумента(стррПоля, стррДокумент, Ложь, Истина);
				Иначе
					СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
					ПредставлениеДок = "Договор с контрагентом" + " №" + СокрЛП(ОбъектРасчетов.Номер) + " от " + Формат(ОбъектРасчетов.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(СуммаДокументаПересчитанная);
					стррПоля.GUID 		= Новый УникальныйИдентификатор();
					стррПоля.dt 		= ДатаПлатежа;
					стррПоля.IsPost 	= Истина;
					стррПоля.DocNumber = "";
				КонецЕсли;
				
			Иначе
				
				СуммаДокументаПересчитанная = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
				ПредставлениеДок = "Ввод начальных остатков ";
				стррПоля.GUID 		= Новый УникальныйИдентификатор();
				стррПоля.dt 		= ДатаПлатежа;
				стррПоля.IsPost 	= Истина;
				стррПоля.DocNumber  = "";
				
			КонецЕсли;

			стррПоля.A02 = Выборка.Организация;
			стррПоля.A03 = Выборка.Партнер;
			стррПоля.A05 = Выборка.ЗаказКлиентаСоглашение;
			стррПоля.A06 = ДатаПлатежа;
			стррПоля.A08 = Комментарий;
			Если ТипЗнч(ОбъектРасчетов) = ТипДокументЗаказ Или ТипЗнч(ОбъектРасчетов) = ТипДокументРеализация Тогда
				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ОбъектРасчетов.Дата);
				стррПоля.A011 = ОбъектРасчетов.Ссылка.УникальныйИдентификатор(); 
			Иначе
				стррПоля.A07  = СуммаВВалютеУчетаАгента(СуммаДолга, Выборка.Валюта, ДатаПлатежа);
				стррПоля.A011 = Неопределено;
			КонецЕсли;
			стррПоля.A014 = ВыделитьЦветом;
			стррПоля.A015 = ПредставлениеДок;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
			
		КонецЦикла;
	
	КонецЕсли; // Если НеУчитыватьПросрочку Тогда
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьДокументыПеремещения(ДокОбмена) // sd_22082017
	
	Результат = ДанныеПоДокументамПеремещения();
	ВыборкаДок = Результат.Выбрать();
	
	СтррПоля = Новый Структура("GUID,dt,IsPost,A01,A03,A04,A05,A06,A07,A08,A09"); // шапка документа
	стррПараметрыТЧ = Новый Структура("GUID,Comment", "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC", "Табличная часть 'Товары'");	
	стррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06"); // ТЧ документа

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Перемещение");
	
	Пока ВыборкаДок.Следующий() Цикл 
		Док = ВыборкаДок.Ссылка;
		СтррПоля.GUID = Док.УникальныйИдентификатор();
		СтррПоля.dt = Док.Дата;
		СтррПоля.IsPost = Док.Проведен;
		СтррПоля.A01 = Док.Организация;
		СтррПоля.A03 = Док.СкладОтправитель;
		СтррПоля.A04 = Док.СкладПолучатель;
		СтррПоля.A05 = 0; // СуммаДокумента
		СтррПоля.A06 = Док.Комментарий;
		СтррПоля.A07 = "";
		СтррПоля.A08 = "";
		СтррПоля.A09 = Док.ВидЦены;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		Если Док.Товары.Количество() > 0 Тогда 
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, стррПараметрыТЧ);
			Для Каждого СтрокаТ Из Док.Товары Цикл 
				Номенклатура 		= СтрокаТ.Номенклатура;
				КоличествоУпаковок 	= СтрокаТ.КоличествоУпаковок;
				ЦенаНоменклатуры	= ПолучитьЦенуНоменклатуры(Номенклатура, Док.ВидЦены);
				стррПоляТЧ.GUID = Новый УникальныйИдентификатор();
				стррПоляТЧ.DocId = ВыборкаДок.Ссылка;
				стррПоляТЧ.A01 = Номенклатура;
				стррПоляТЧ.A02 = ИдентификаторХарактеристикиНоменклатуры(Номенклатура, СтрокаТ.Характеристика);
				стррПоляТЧ.A03 = СтрокаТ.Упаковка;
				стррПоляТЧ.A04 = КоличествоУпаковок;
				стррПоляТЧ.A05 = ЦенаНоменклатуры;
				стррПоляТЧ.A06 = ЦенаНоменклатуры * КоличествоУпаковок;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоляТЧ);
			КонецЦикла;
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
		КонецЕсли;
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

// ВыгрузкаДокументов
#КонецОбласти

#Область ОтборыВыгрузки

Функция ОрганизацииВыгрузки()

	Значение = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");
	Если Значение = Неопределено Тогда
		ТЗ = ТЗОрганизацииВыгрузки();
		Значение = ТЗ.ВыгрузитьКолонку("Ссылка");
		гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ТЗОрганизацииВыгрузки()
	
	Отборы = ЭлементОтбораПоЛевомуЗначению("Организации");
	ТЗ = РезультатЗапросаВВидеТЗ(ТекстЗапросаВыборкиОрганизаций(), Отборы);
	
	// помещаем массив организаций в кэш, если его там еще нет - для будущих отборов по списку организаций
	Если Неопределено = гКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки") Тогда
		гКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", ТЗ.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ВидыКонтактнойИнформацииВыгрузки()

	Возврат ВыборкаИзСправочника(ТекстЗапросаВыборкиВидовКонтактнойИнформации());
	
КонецФункции

Функция ВидыЦенВыгрузки()

	ЭлементОтбора = ЭлементОтбораПоЛевомуЗначению("ВидыЦен");
	Возврат ВыборкаИзСправочника(ТекстЗапросаВыборкиВидовЦен(), ЭлементОтбора);
	
КонецФункции

Функция СкладыВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВТ_Склады.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	ВТ_Склады КАК ВТ_Склады
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка
	                      |АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СтатусыПартнеровВыгрузки()

	Если Не ВременныеТаблицы.Свойство("СтатусыПартнеров") Тогда // значит статусы партнеров не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.СтатусыПартнеров;
	КонецЕсли;
	
КонецФункции

// ОтборыВыгрузки
#КонецОбласти 

#Область ГенерацияXMLФайлаВыгрузки

Процедура ВыгрузитьПоляВЭлемент(ПоляЭлемента, ВыборкаЭлементов, КоличествоРеквизитов, ИмяПоля, ПолеВыгрузки)

	Счетчик = -1;
	Пока ВыборкаЭлементов.Следующий() Цикл
		Счетчик = Счетчик + 1;
		ПоляЭлемента.Вставить(ПолеВыгрузки + Строка(Счетчик), ВыборкаЭлементов[ИмяПоля]);

		Если Счетчик = КоличествоРеквизитов-1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьПоляТабличнойЧастиНоменклатуры(ДокОбмена, стррПараметры)

	ВыборкаЭлементов = стррПараметры.ВыборкаЭлементов;
	МаксЗначениеСчетчика = стррПараметры.КоличествоРеквизитов - 1;
	ИмяПоля = стррПараметры.ИмяПоля;	
	ПолеВыгрузки = стррПараметры.ПолеВыгрузки;
	
	стррПоля = Новый Структура("GUID,CtlgId," + ПолеВыгрузки);
	
	Для СчСтрок = 1 По стррПараметры.КоличествоСтрок Цикл
		
		стррПоля.GUID = Новый УникальныйИдентификатор();
		стррПоля.CtlgId = стррПараметры.Номенклатура;
		стррПоля[ПолеВыгрузки] = СчСтрок;
		Сч = 0;
		Пока ВыборкаЭлементов.Следующий() Цикл
			Сч = Сч + 1;
			стррПоля.Вставить("A0" + Строка(Сч), ВыборкаЭлементов[ИмяПоля]);
			Если Сч = МаксЗначениеСчетчика Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG или DOCUMENT

КонецПроцедуры

Процедура ЗаписатьНачалоВеткиОбъекта(ДокОбмена, ВидОбъектаДляМТ, УдалитьВсе = Неопределено)

	КорневойВид = Неопределено;
	СвойстваВида = СвойстваВидаОбъекта(ВидОбъектаДляМТ, "ВидДляМТ", КорневойВид);
	
	ДокОбмена.ЗаписатьНачалоЭлемента(?(КорневойВид = "Документ", "DOCUMENT", "CATALOG"));
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(СвойстваВида.ИдентификаторВида)); // gi_170902
	УстановитьПризнакОчисткиОбъекта(ДокОбмена, СвойстваВида.ВидДляМТ, КорневойВид, УдалитьВсе);
	ДобавитьПоле(ДокОбмена, "Comment", ПредставлениеВида(КорневойВид, СвойстваВида));
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

КонецПроцедуры

Процедура УстановитьПризнакОчисткиОбъекта(ДокОбмена, ВидДляМТ, КорневойВид, Принудительно)

	Если Принудительно = Истина Тогда // параметр Принудительно может быть со значением Неопределено
		ДобавитьПоле(ДокОбмена, "KILLALL", "1");
	ИначеЕсли Принудительно = Ложь Тогда 	
		Возврат;
	Иначе
		
		Если КорневойВид = "Документ" И ОчищатьДокументыПередЗагрузкой Тогда
			Список = СписокОчищаемыхДокументов;
		ИначеЕсли КорневойВид = "Справочник" И ОчищатьСправочникиПередЗагрузкой Тогда
			Список = СписокОчищаемыхСправочников;
		Иначе
			Возврат;
		КонецЕсли;
			
		ИскатьЗначение = ВРег(ВидДляМТ);
		Для Каждого Элемент Из Список Цикл
			Если ВРег(Элемент.Значение) = ИскатьЗначение Тогда // пометку элемента не проверяем, т.к. в списке у нас только очищаемые справочники
				ДобавитьПоле(ДокОбмена, "KILLALL", "1");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметры)

	ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	ДобавитьПоле(ДокОбмена, "GUID", СтррПараметры.GUID);
	ДобавитьПоле(ДокОбмена, "Comment", СтррПараметры.Comment);

КонецПроцедуры

Процедура ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE

КонецПроцедуры

Процедура ДобавитьКонстанту(ДокОбмена, Идентификатор, Значение)

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	ДобавитьПоле(ДокОбмена, "GUID", Идентификатор);
	ДобавитьПоле(ДокОбмена, "VALUE", Значение);
	ДокОбмена.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ДобавитьПоле(ДокОбмена, Имя, Значение)

	ЗначXML = ЗначениеВСтрокуДляXML(Значение);
	Если Имя = "GUID" Тогда
		ЗначXML = ВРег(ЗначXML);
	КонецЕсли;
	ДокОбмена.ЗаписатьАтрибут(Имя, ЗначXML);

КонецПроцедуры

Процедура ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей, ЗакрытьЭлемент = Истина)

	Если СтруктураПолей.Свойство("GUID") И Не ЗначениеЗаполнено(СтруктураПолей.GUID) Тогда
		Возврат;
	КонецЕсли;

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		ДобавитьПоле(ДокОбмена, ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

// ГенерацияXMLФайлаВыгрузки
#КонецОбласти 

Процедура ВставитьНомерДокументаВСтруктуру(стррПоля, Док)

	НомерДляXML = СокрП(Док.Номер);

	// Проверка последнего элемента номера
	Код = КодСимвола(Прав(НомерДляXML, 1));
	Если Код < 48 Или Код > 57 Тогда
		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' последний символ не цифра.", "ОшибкаПрочее", Док, "ТекущийАгент");
	КонецЕсли;

	стррПоля.Вставить("DocNumber", НомерДляXML);
	
КонецПроцедуры

Функция НачалоВыгрузкиДокументов(ИнтервалВыгрузки)

	Возврат НачалоДня(ТекущаяДата()) - ?(ИнтервалВыгрузки <> Неопределено, 86400 * ИнтервалВыгрузки, 0);
	
КонецФункции

Функция ЕдиницыИзмеренияНоменклатуры(ЭлементНоменклатуры, КонстантаИспользоватьУпаковкиНоменклатуры)

	Если КонстантаИспользоватьУпаковкиНоменклатуры Тогда
		Если ЭлементНоменклатуры.ИспользоватьУпаковки Тогда
			Если ЭлементНоменклатуры.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
				БазоваяЕдиница = ЭлементНоменклатуры;
				НаборУпаковок = "";
			Иначе
				НаборУпаковок = ЭлементНоменклатуры.НаборУпаковок;
				БазоваяЕдиница = ЭлементНоменклатуры.НаборУпаковок.ЕдиницаИзмерения;
			КонецЕсли;
		Иначе
			БазоваяЕдиница = ЭлементНоменклатуры;	//GUID базовой единицы измерения выгружается равным GUID номенклатуры, когда не используются упаковки номенклатуры (см. выгрузку ссылок для единиц измерения)
			НаборУпаковок = "";
		КонецЕсли; //Если ТекНоменклатура.ИспользоватьУпаковки Тогда
	Иначе
		БазоваяЕдиница = ЭлементНоменклатуры.ЕдиницаИзмерения;
		НаборУпаковок = "";
	КонецЕсли;

	Возврат Новый Структура("БазоваяЕдиница,НаборУпаковок", БазоваяЕдиница, НаборУпаковок);
КонецФункции // ЕдиницыИзмеренияНОменклатуры()

Функция ПредопределенныеПоляСправочника(ТекЭлемент, СоздаватьИдентификатор = Ложь)

	СтруктураПолей = Новый Структура;
	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
	ИначеЕсли ЗначениеЗаполнено(ТекЭлемент) Тогда
		СтруктураПолей.Вставить("GUID", ТекЭлемент.Ссылка.УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID", "");
	КонецЕсли;
	СтруктураПолей.Вставить("Name", ТекЭлемент.Наименование);

	Возврат СтруктураПолей;
	
КонецФункции

Функция ПодчиненныеРеализацииДляЗаказа(ЗаказСсылка)

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказСсылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат = Запрос.Выполнить();

	мРеализации = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");

	Возврат мРеализации;
	
КонецФункции

Функция ПредопределенныеПоляДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)

	СтруктураПолей = Новый Структура;

	Если СоздаватьИдентификатор Тогда
		СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
	Иначе
		СтруктураПолей.Вставить("GUID", ТекДокумент.Ссылка.УникальныйИдентификатор());
	КонецЕсли;

	СтруктураПолей.Вставить("dt", ТекДокумент.Дата);
	СтруктураПолей.Вставить("IsPost", ТекДокумент.Проведен);
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент.Ссылка);
	КонецЕсли;

	Возврат СтруктураПолей;
КонецФункции

Процедура ЗаполнитьОсновныеПоляДокумента(стррПоля, ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)

	Если СоздаватьИдентификатор Тогда
		стррПоля.GUID = Новый УникальныйИдентификатор();
	Иначе
		стррПоля.GUID = ТекДокумент.Ссылка.УникальныйИдентификатор();
	КонецЕсли;

	стррПоля.dt 	= ТекДокумент.Дата;
	стррПоля.IsPost = ТекДокумент.Проведен;
	Если ВыгружатьНомер Тогда
		ВставитьНомерДокументаВСтруктуру(стррПоля, ТекДокумент.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция СуммаВВалютеУчетаАгента(Сумма, ВалютаДокумента, НаДату)

	СуммаПересчитанная = Сумма;
	ВалютаУчетаАгента = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");

	Если Не ВалютаДокумента = ВалютаУчетаАгента Тогда
		СуммаПересчитанная = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(Сумма, ВалютаДокумента, ВалютаУчетаАгента, НаДату);
	КонецЕсли;

	Возврат СуммаПересчитанная;
	
КонецФункции

Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВидЦены, Характеристика = Неопределено) // sd_22082017
	
	стррОтбор = Новый Структура("Дата, Номенклатура, Характеристика, Упаковка, ВидЦены, Валюта");
	стррОтбор.Дата 				= ТекущаяДата();
	стррОтбор.Номенклатура 		= Номенклатура;
	стррОтбор.Характеристика	= ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика);
	стррОтбор.Упаковка 	    	= Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	стррОтбор.ВидЦены			= ВидЦены;
	стррОтбор.Валюта			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	ЦенаНоменклатуры = ПродажиСервер.ПолучитьЦенуПоОтбору(стррОтбор);
	
	Возврат ЦенаНоменклатуры;
	
КонецФункции

Функция ПрефиксОрганизацииИБ(Префикс)

	Префикс   = Прав("00" + СокрЛП(Префикс), 2);
	ПрефиксИБ = Прав("00" + СокрЛП(КонстантыПолучитьЗначение("ПрефиксУзлаРаспределеннойИнформационнойБазы")), 2);
	
	Возврат Префикс + ПрефиксИБ + "-";

КонецФункции // ПрефиксОрганизации()

Функция КонтактнаяИнформацияОрганизации(Организация)

	стррРезультат = Новый Структура("Телефон,ФактАдрес,ЮрАдрес");
	Для Каждого СтрокаКИ Из Организация.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			стррРезультат.Телефон = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			стррРезультат.ФактАдрес = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			стррРезультат.ЮрАдрес = СокрЛП(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;

	Возврат стррРезультат;
	
КонецФункции // КонтактнаяИнформацияОрганизации()

Функция ТипыКонтактнойИнформации()

	ствРезультат = Новый Соответствие;
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ВРег("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВРег("52477200-af54-405b-9888-14b8bded0e19"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, ВРег("2c2cfc86-e2a0-414d-a116-5acadac53437"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, ВРег("e45419b3-0cfd-47ce-8b24-7037a1e86aed"));
	ствРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, ВРег("8fc8f351-14f0-48eb-952a-38bb313b28d5"));

	Возврат ствРезультат;
	
КонецФункции

Функция ФорматироватьЧисло(ТекЗнач) Экспорт

	Если ТекЗнач = 0 Тогда
		Возврат "0";
	Иначе
		Возврат Строка(Формат(ТекЗнач, "ЧГ=0; ЧРД='.'"));
	КонецЕсли;

КонецФункции

Функция ДатаВремяВФорматXMLИз1СМТ(лДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт

	ДатаВремя = ?(лДатаВремя = Неопределено, ТекущаяДата(), лДатаВремя);
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");

	Если Тип = "Дата" Тогда
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда
		НужноеЗначение = НужноеВремя;
	Иначе
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()

Функция СписокЗначенийВСтрокуМТ20(Список)
	
	Стр = Строка(Список);
	Возврат СтрЗаменить(Стр, "; ", ",");
	
КонецФункции

Функция ЗначениеВСтрокуДляXML(Значение)

	Тип = ТипЗнч(Значение);
	
	Если Тип = Тип("Строка") Тогда
		
		Возврат XMLСтрока(Значение);
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Возврат XMLСтрока(ФорматироватьЧисло(Значение));
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		
		Возврат XMLСтрока(Число(Значение));
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат XMLСтрока(ДатаВремяВФорматXMLИз1СМТ(Значение));
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат ВРег(XMLСтрока(Значение));
		
	ИначеЕсли Тип = Тип("СписокЗначений") Тогда
		
		Возврат XMLСтрока(СписокЗначенийВСтрокуМТ20(Значение));
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветВСтроку(Значение);
		
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		
		Возврат "";
		
	Иначе // тип Справочник или Документ
		
		Возврат ВРег(XMLСтрока(Значение.Ссылка.УникальныйИдентификатор()));
		
	КонецЕсли;
	
КонецФункции

Функция ЗначениеИзСтрокиXML(Значение, Тип)

	Если Тип = Тип("Строка") Тогда
		
		Возврат Значение;
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Число(Значение), 0);
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяXMLВФормат1С(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Булево(Число(Значение)), Ложь);
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветИзСтроки(Значение);
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Новый УникальныйИдентификатор(Значение);
		
	Иначе 
		
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции

Функция СформированныйМакетКомпоновкиДанных(Отбор, ТекстЗапроса)

	СхемаКомпоновки = СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса);
	НастройкиКомпоновки = КомпоновщикНастроекАгента(СхемаКомпоновки);
	Если ТипЗнч(Отбор) <> Тип("Массив")  Тогда
		ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Отбор);
	Иначе	
		 Для каждого Элемент Из Отбор Цикл
			ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		 КонецЦикла; 
	КонецЕсли; 
	
	МакетКомпоновки = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);

	Возврат МакетКомпоновки;

КонецФункции 

#Область ВыборкиДанныхПоСправочникам

Функция ДанныеПоПартнерамДляВыгрузки(МенеджерВТ)

	СтатусыПартнеров = СтатусыПартнеровИзНастроек();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыПартнеров.Партнер,
	|	СтатусыПартнеров.Статус
	|ПОМЕСТИТЬ СтатусыПартнеров
	|ИЗ
	|	&СтатусыПартнеров КАК СтатусыПартнеров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Партнеры.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(СтатусыПартнеров.Статус, """")) КАК Статус
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
	|		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Партнеры.Ссылка");
	Запрос.УстановитьПараметр("СтатусыПартнеров", СтатусыПартнеров);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ)

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	Контрагенты.Партнер КАК Партнер
		|ИЗ
		|	ВТ_Партнеры КАК ВТ_Партнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ВТ_Партнеры.Ссылка = Контрагенты.Партнер
		|ГДЕ
		|	Не Контрагенты.ПометкаУдаления";
	   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактнымЛицамПартнеровВыгрузки(МенеджерВТ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
	|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
	|	КонтактныеЛицаПартнеров.Наименование,
	|	КонтактныеЛицаПартнеров.Комментарий
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО ВТ_Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
	|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактамПартнеровИКонтактныхЛицВыгрузки(МенеджерВТ)
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	NULL КАК КонтактноеЛицо,
	|	NULL КАК Контрагент,
	|	ПартнерыКонтактнаяИнформация.Тип,
	|	ПартнерыКонтактнаяИнформация.Вид,
	|	ПартнерыКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КИПартнеров
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	NULL,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	КонтрагентыКонтактнаяИнформация.Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	|			ПО (ВТ_Партнеры.Ссылка = Контрагенты.Партнер)
	|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КИПартнеров.Партнер, """") КАК Партнер,
	|	ЕСТЬNULL(КИПартнеров.КонтактноеЛицо, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(КИПартнеров.Контрагент, """") КАК Контрагент,
	|	КИПартнеров.Тип,
	|	КИПартнеров.Вид,
	|	КИПартнеров.Представление
	|ИЗ
	|	КИПартнеров КАК КИПартнеров";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДанныеПоСоглашениямВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос(ТекстЗапросаВыборкиСоглашений());
	Запрос.УстановитьПараметр("Организации", ОрганизацииВыгрузки());
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ЗапросПоНоменклатуре(МенеджерВТ, ДоступныеВидыЦен)

	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	КурсВалюты 		= 1;
	КратностьВалюты = 1;

	Запрос = Новый Запрос(ТекстЗапросаПолученияНоменклатуры());
	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	Запрос.УстановитьПараметр("КратностьВалюты", КратностьВалюты);
	Запрос.УстановитьПараметр("КурсВалюты", КурсВалюты);
	Запрос.УстановитьПараметр("ВидыЦен", ДоступныеВидыЦен);
	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
	Запрос.УстановитьПараметр("РежимВыгрузкиКодов", РежимВыгрузкиКодовНоменклатуры);
	Запрос.УстановитьПараметр("МобильныйСклад", ВыбНастройкиАгента.МобильныйСклад);

	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос;
	
КонецФункции 

Функция ЗапросПоХарактеристикамНомеклатуры(МенеджерВТ, ДоступныеВидыЦен)

	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	КурсВалюты 		= 1;
	КратностьВалюты = 1;

	Запрос = Новый Запрос(ТекстЗапросаПолученияХарактеристикНоменклатуры());
	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	Запрос.УстановитьПараметр("КратностьВалюты", КратностьВалюты);
	Запрос.УстановитьПараметр("КурсВалюты", КурсВалюты);
	Запрос.УстановитьПараметр("ВидыЦен", ДоступныеВидыЦен);
	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
	Запрос.УстановитьПараметр("РежимВыгрузкиКодов", РежимВыгрузкиКодовНоменклатуры);
	Запрос.УстановитьПараметр("МобильныйСклад", ВыбНастройкиАгента.МобильныйСклад);

	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос;

КонецФункции 
 
Функция ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос(ТекстЗапросаВыборкиЕдиницИзмерения());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПустойНаборУпаковок", Справочники.НаборыУпаковок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ДанныеПоЕдиницамИзмеренияВыгрузки()

#КонецОбласти

#Область ВыборкиДанныхПоДокументам

Функция ДанныеПоДокументамЗаказПокупателя()

	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовЗаказПокупателя());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос.Выполнить();
	
КонецФункции // ДанныеПоДокументамЗаказПокупателя()

Функция ДанныеПоДокументамПродажи()

	Если гКэшСпискиОбъектов.Получить("СписокЗаказов") = Неопределено Тогда 
		СписокЗаказов = "";
	Иначе 
		СписокЗаказов = гКэшСпискиОбъектов.Получить("СписокЗаказов");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовРеализация());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДанныеПоДокументамПеремещения() // sd_22082017
	
	//ИнтервалВыгрузкиПеремещений = 7; // sd_22082017 вывести в настройки
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовПеремещение());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиПеремещений));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Склад", ВыбНастройкиАгента.МобильныйСклад);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПеремещенийТоваров.Принято);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

Функция СтатусыПартнеровИзНастроек()

	ПартнерыИСтатусы = Новый ТаблицаЗначений;
	ПартнерыИСтатусы.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ПартнерыИСтатусы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	Статусы = СтатусыПартнеровВыгрузки();
	Для Каждого ЭлементСтатуса Из Статусы Цикл
		ПартнерыСтауса = ЭлементСтатуса.Партнеры;
		Если ПартнерыСтауса <> Неопределено Тогда
			Для Каждого ЭлементСписка Из ПартнерыСтауса Цикл
				СтрокаПартеровСтатуса = ПартнерыИСтатусы.Добавить();
				СтрокаПартеровСтатуса.Партнер = ЭлементСписка.Значение;
				СтрокаПартеровСтатуса.Статус = ЭлементСтатуса.Идентификатор;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ПартнерыИСтатусы;
	
КонецФункции // СтатусыПартнеровИзНастроек()

Функция СтавкаНДСЧислом(Знач СтавкаНДС, НДСпоСтавкам4и2 = Ложь) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.02, 0.1);
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.04, 0.18);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВыборкиОрганизаций()

	стррЛитералы = Новый Структура("ИНН_ИПрочее,Соединение");		
	Если гКонфигурация = "УТ_UA" Тогда
		стррЛитералы.ИНН_ИПрочее = "
			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС КАК ИНН,
			|	УчетнаяПолитикаОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИнформацияОСтатусеПлательщикаНалогов КАК ИнформацияОСтатусеПлательщикаНалогов,
			|	"""" КАК КПП,
			|	"""" КАК ОГРН";
		стррЛитералы.Соединение = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
			|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
			|";
	Иначе
		стррЛитералы.ИНН_ИПрочее = "
			|	Организации.ИНН КАК ИНН,
			|	Организации.КПП КАК КПП,
			|	Организации.ОГРН КАК ОГРН";
		стррЛитералы.Соединение = "";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Префикс КАК Префикс,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	[ИНН_ИПрочее]
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		[Соединение]
		|{ГДЕ
		|	Организации.Ссылка.* КАК Организации}
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Наименование";
		
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиВидовКонтактнойИнформации()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель";

	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВыборкиВидовЦен()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВидыЦен.Ссылка КАК Ссылка
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|{ГДЕ
	|	ВидыЦен.Ссылка.* КАК ВидыЦен}
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.Наименование";

	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВыборкиСклады()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Склады
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склады}";

	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВыборкиПартнеров()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Партнеры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Партнеры
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ 
	|	Не Партнеры.ПометкаУдаления
	|{ГДЕ
	|	Партнеры.Ссылка.* КАК Партнеры}";

	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВыборкиКонтрагентов()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|{ВЫБРАТЬ
	|	Ссылка.*}
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|{ГДЕ
	|	Контрагенты.Ссылка.* КАК Контрагенты}";

	Возврат ТекстЗапроса;
КонецФункции 

Функция ТекстЗапросаВыборкиСоглашений()

	Если ИспользоватьПунктыРазгрузки Тогда 
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.Наименование,
		|	ДоговорыКонтрагентов.Контрагент КАК Партнер,
		|	ДоговорыКонтрагентов.Дата,
		|	ДоговорыКонтрагентов.ДатаОкончанияДействия,
		|	ДоговорыКонтрагентов.Организация,
		|	"""" КАК НалогообложениеНДС,
		|	"""" КАК ВидЦен,
		|	"""" КАК Контрагент
		|ИЗ
		|	ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВТ_Контрагенты.Ссылка = ДоговорыКонтрагентов.Контрагент
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|	И ДоговорыКонтрагентов.Организация В(&Организации)";
		
		Возврат ТекстЗапроса;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.Номер,
	|	СоглашенияСКлиентами.Дата,
	|	СоглашенияСКлиентами.Типовое,
	|	СоглашенияСКлиентами.ВидЦен,
	|	СоглашенияСКлиентами.ДатаНачалаДействия,
	|	СоглашенияСКлиентами.ДатаОкончанияДействия,
	|	СоглашенияСКлиентами.Наименование,
	|	СоглашенияСКлиентами.Организация,
	|	СоглашенияСКлиентами.СегментПартнеров,
	|	СоглашенияСКлиентами.НалогообложениеНДС,
	|	СоглашенияСКлиентами.Контрагент,
	|	СоглашенияСКлиентами.Партнер КАК Партнер
	|ПОМЕСТИТЬ СоглашенияПартнеров
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО ВТ_Партнеры.Ссылка = СоглашенияСКлиентами.Партнер
	|ГДЕ
	|	СоглашенияСКлиентами.Организация В(&Организации)
	|	И НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Статус = &Статус
	|	И НЕ СоглашенияСКлиентами.Типовое
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ
	//|	СоглашенияСКлиентами.Ссылка,
	//|	СоглашенияСКлиентами.Номер,
	//|	СоглашенияСКлиентами.Дата,
	//|	СоглашенияСКлиентами.Типовое,
	//|	СоглашенияСКлиентами.ВидЦен,
	//|	СоглашенияСКлиентами.ДатаНачалаДействия,
	//|	СоглашенияСКлиентами.ДатаОкончанияДействия,
	//|	СоглашенияСКлиентами.Наименование,
	//|	СоглашенияСКлиентами.Организация,
	//|	СоглашенияСКлиентами.СегментПартнеров,
	//|	СоглашенияСКлиентами.НалогообложениеНДС,
	//|	NULL
	//|ИЗ
	//|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	//|ГДЕ
	//|	НЕ СоглашенияСКлиентами.ПометкаУдаления
	//|	И СоглашенияСКлиентами.Статус = &Статус
	//|	И СоглашенияСКлиентами.Организация В(&Организации)
	//|	И СоглашенияСКлиентами.Типовое
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияПартнеров.Номер,
	|	СоглашенияПартнеров.Дата,
	|	СоглашенияПартнеров.Типовое,
	|	СоглашенияПартнеров.ВидЦен,
	|	СоглашенияПартнеров.ДатаНачалаДействия,
	|	СоглашенияПартнеров.ДатаОкончанияДействия,
	|	СоглашенияПартнеров.Наименование,
	|	СоглашенияПартнеров.Организация,
	|	СоглашенияПартнеров.СегментПартнеров,
	|	СоглашенияПартнеров.НалогообложениеНДС,
	|	СоглашенияПартнеров.Контрагент,
	|	ЕСТЬNULL(СоглашенияПартнеров.Партнер, """") КАК Партнер,
	|	СоглашенияПартнеров.Ссылка
	|ИЗ
	|	СоглашенияПартнеров КАК СоглашенияПартнеров";

	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаВыборкиСоглашений()

Функция ТекстЗапросаВыборкиНоменклатуры()

	стррЛитералы = Новый Структура("НоменклатураВес", "Номенклатура.Вес");	
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда	
		стррЛитералы.НоменклатураВес = 
			"ВЫБОР
			|	КОГДА Номенклатура.ВесЗнаменатель > 0
			|		ТОГДА Номенклатура.ВесЧислитель / Номенклатура.ВесЗнаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	[НоменклатураВес] КАК Вес,
		|	Номенклатура.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
		|	Номенклатура.НаборУпаковок КАК НаборУпаковок,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодОКЕИ,
		|	Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА Номенклатура.НаборУпаковок = &ИндивидуальныйНаборУпаковок
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИндивидуальныйНабор
		|ПОМЕСТИТЬ ВТ_Ассортимент
		|{ВЫБРАТЬ
		|	Ссылка.*,
		|	Вес,
		|	ИспользоватьУпаковки,
		|	НаборУпаковок.*,
		|	ЕдиницаИзмерения.*,
		|	ЕдиницаИзмеренияНаименование,
		|	ЕдиницаИзмеренияКодОКЕИ,
		|	ТипНоменклатуры.*,
		|	ВидНоменклатуры.*,
		|	ПометкаУдаления,
		|	ИндивидуальныйНабор}
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|{ГДЕ
		|	Номенклатура.Ссылка.* КАК Номенклатура,
		|	[НоменклатураВес] КАК Вес,
		|	Номенклатура.ИспользоватьУпаковки,
		|	Номенклатура.НаборУпаковок.*,
		|	Номенклатура.ЕдиницаИзмерения.*,
		|	Номенклатура.ЕдиницаИзмерения.Наименование,
		|	Номенклатура.ЕдиницаИзмерения.Код,
		|	Номенклатура.ТипНоменклатуры.*,
		|	Номенклатура.ВидНоменклатуры.*,		
		|	Номенклатура.ПометкаУдаления,
		|	(ВЫБОР
		|			КОГДА Номенклатура.НаборУпаковок = &ИндивидуальныйНаборУпаковок
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ИндивидуальныйНабор}";

	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВыборкиНоменклатуры()

Процедура ЗаменитьЛитералы(Шаблон, стррЛитералы)
	
	Для Каждого Литерал Из стррЛитералы Цикл
		Шаблон = СтрЗаменить(Шаблон, "[" + Литерал.Ключ + "]", 
			?(Литерал.Значение <> Неопределено, Литерал.Значение, Литерал.Ключ)); // если значение литерала не указано, заменяем его на наименование литерала
	КонецЦикла
	
КонецПроцедуры

Функция ТекстЗапросаПолученияНоменклатуры()

	стррЛитералы = Новый Структура("Весовой,Коэффициент,ВРезервеСоСкладаОстаток,РегистрНакопленияОстатков");
	
	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
		
		стррЛитералы.Весовой = "
			|	ВЫБОР
			|		КОГДА ВТ_НоменклатураСклады.Номенклатура.Вес > 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ";
		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1)";
		
		Если ПоколениеКонфигурации("<=УТ_11.1.2") Тогда
			стррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеОстаток";
		КонецЕсли;
		
	Иначе // УТ 11.2 и выше
		
		стррЛитералы.Весовой 	 = "ВТ_НоменклатураСклады.Номенклатура.ВесИспользовать";
		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 1)";
		
	КонецЕсли;
	
	Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда
		стррЛитералы.РегистрНакопленияОстатков = "СвободныеОстатки";
	Иначе 
		стррЛитералы.РегистрНакопленияОстатков 	= "ТоварыНаСкладах";
		стррЛитералы.ВРезервеСоСкладаОстаток 	= "КОтгрузкеОстаток";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Номенклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстатка
		|ИЗ
		|	ВТ_Ассортимент КАК ВТ_Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
		|		ПО ВТ_Номенклатура.Ссылка = СвободныеОстаткиТоваров.Номенклатура
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВыгружатьТоварыСНулевымОстатком
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|						КОГДА &УчитыватьРезервы
		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
		|					КОНЕЦ, 0) > 0
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстатка.Номенклатура КАК Номенклатура,
		|	ВТ_Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ ВТ_НоменклатураСклады
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстатка КАК ВТ_НоменклатураСУчетомОстатка,
		|	ВТ_Склады КАК ВТ_Склады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСклады.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураСклады.Склад КАК Склад,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА &УчитыватьРезервы
		|				ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
		|			ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
		|		КОНЕЦ, 0) КАК Остаток,
		|	ВТ_НоменклатураСклады.Склад.Наименование КАК НаименованиеСклада,
		|	ВЫБОР
		|		КОГДА &РежимВыгрузкиКодов = ""КОД""
		|			ТОГДА ВТ_НоменклатураСклады.Номенклатура.Код
		|		КОГДА &РежимВыгрузкиКодов = ""АРТИКУЛ""
		|			ТОГДА ВТ_НоменклатураСклады.Номенклатура.Артикул
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Код,
		|	ВТ_НоменклатураСклады.Номенклатура.Наименование КАК Наименование,
		|	ВТ_НоменклатураСклады.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	[Весовой] Как Весовой,
		|	ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ВТ_НоменклатураСклады.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_НоменклатураСклады.Номенклатура.Описание КАК Описание,
		|	ВТ_НоменклатураСклады.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ВТ_НоменклатураСклады.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВТ_НоменклатураСклады.Номенклатура.Родитель КАК Родитель,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСклады.Номенклатура.ВидНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УчетПоХарактеристикам,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСклады.Склад = &МобильныйСклад
		|			ТОГДА ЕСТЬNULL(ВЫБОР
		|						КОГДА &УчитыватьРезервы
		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
		|					КОНЕЦ, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокМобСклада
		|ИЗ
		|	ВТ_НоменклатураСклады КАК ВТ_НоменклатураСклады
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
		|		ПО (СвободныеОстаткиТоваров.Номенклатура = ВТ_НоменклатураСклады.Номенклатура)
		|			И (СвободныеОстаткиТоваров.Склад = ВТ_НоменклатураСклады.Склад)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	НаименованиеСклада
		|ИТОГИ
		|	СУММА(Остаток),
		|	СУММА(ОстатокМобСклада)
		|ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЦен.Ссылка КАК ВидЦены,
		|	ВидыЦен.ВалютаЦены,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 1) КАК Курс,
		|	ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Кратность
		|ПОМЕСТИТЬ ВТ_ВидыЦен
		|ИЗ
		|	Справочник.ВидыЦен КАК ВидыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
		|		ПО ВидыЦен.ВалютаЦены = КурсыВалютСрезПоследних.Валюта
		|ГДЕ
		|	ВидыЦен.Ссылка В(&ВидыЦен)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстатка.Номенклатура КАК Номенклатура,
		|	ВТ_ВидыЦен.ВидЦены КАК ВидЦены,
		|	ВТ_ВидыЦен.ВалютаЦены,
		|	ВТ_ВидыЦен.Курс КАК Курс,
		|	ВТ_ВидыЦен.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦен
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстатка КАК ВТ_НоменклатураСУчетомОстатка,
		|	ВТ_ВидыЦен КАК ВТ_ВидыЦен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураВидыЦен.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураВидыЦен.ВидЦены КАК ВидЦены,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / [Коэффициент] * ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВТ_НоменклатураВидыЦен.Кратность, 0) > 0
		|							И ЕСТЬNULL(ВТ_НоменклатураВидыЦен.Курс, 0) > 0
		|						ТОГДА ВТ_НоменклатураВидыЦен.Курс * &КратностьВалюты / (&КурсВалюты * ВТ_НоменклатураВидыЦен.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена,
		|	ВТ_НоменклатураВидыЦен.ВидЦены.Наименование КАК НаименованиеВидаЦены
		|ИЗ
		|	ВТ_НоменклатураВидыЦен КАК ВТ_НоменклатураВидыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_НоменклатураВидыЦен.Номенклатура)
		|			И (ЦеныНоменклатурыСрезПоследних.ВидЦены = ВТ_НоменклатураВидыЦен.ВидЦены)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	НаименованиеВидаЦены
		|ИТОГИ ПО
		|	Номенклатура";	
		
		
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаПолученияХарактеристикНоменклатуры()

	стррЛитералы = Новый Структура("Коэффициент,ВРезервеСоСкладаОстаток,РегистрНакопленияОстатков");
	
	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
		
		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1)";
		
		Если ПоколениеКонфигурации("<=УТ_11.1.2") Тогда
			стррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеОстаток";
		КонецЕсли;
		
	Иначе // УТ 11.2 и выше
		
		стррЛитералы.Коэффициент = "ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 1)";
		
	КонецЕсли;
	
	Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда 
		стррЛитералы.РегистрНакопленияОстатков = "СвободныеОстатки";
	Иначе 
		стррЛитералы.РегистрНакопленияОстатков 	= "ТоварыНаСкладах";
		стррЛитералы.ВРезервеСоСкладаОстаток 	= "КОтгрузкеОстаток";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ВТ_Характеристики
		|ИЗ
		|	ВТ_Ассортимент КАК ВТ_Ассортимент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ВТ_Ассортимент.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Ассортимент.Ссылка,
		|	ХарактеристикиНоменклатуры.Ссылка
		|ИЗ
		|	ВТ_Ассортимент КАК ВТ_Ассортимент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ВТ_Ассортимент.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Характеристики.Номенклатура КАК Номенклатура,
		|	ВТ_Характеристики.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ВТ_НоменклатураСУчетомОстаткаХ
		|ИЗ
		|	ВТ_Характеристики КАК ВТ_Характеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
		|		ПО ВТ_Характеристики.Номенклатура = СвободныеОстаткиТоваров.Номенклатура
		|		   И ВТ_Характеристики.Характеристика = СвободныеОстаткиТоваров.Характеристика 
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВыгружатьТоварыСНулевымОстатком
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|						КОГДА &УчитыватьРезервы
		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
		|					КОНЕЦ, 0) > 0
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
		|	ВТ_Склады.Ссылка КАК Склад
		|ПОМЕСТИТЬ ВТ_НоменклатураСкладыХ
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
		|	ВТ_Склады КАК ВТ_Склады
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,		
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСкладыХ.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураСкладыХ.Характеристика КАК Характеристика,
		|	ВТ_НоменклатураСкладыХ.Склад КАК Склад,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА &УчитыватьРезервы
		|				ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
		|			ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
		|		КОНЕЦ, 0) КАК Остаток,
		|	ВТ_НоменклатураСкладыХ.Склад.Наименование КАК НаименованиеСклада,
		|	ВТ_НоменклатураСкладыХ.Номенклатура.Наименование КАК Наименование,
		|	ВТ_НоменклатураСкладыХ.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристики,
		|	ВЫБОР
		|		КОГДА ВТ_НоменклатураСкладыХ.Склад = &МобильныйСклад
		|			ТОГДА ЕСТЬNULL(ВЫБОР
		|						КОГДА &УчитыватьРезервы
		|							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток]
		|						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
		|					КОНЕЦ, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОстатокМобСклада
		|ИЗ
		|	ВТ_НоменклатураСкладыХ КАК ВТ_НоменклатураСкладыХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
		|		ПО (СвободныеОстаткиТоваров.Номенклатура = ВТ_НоменклатураСкладыХ.Номенклатура)
		|			И (СвободныеОстаткиТоваров.Характеристика = ВТ_НоменклатураСкладыХ.Характеристика)
		|			И (СвободныеОстаткиТоваров.Склад = ВТ_НоменклатураСкладыХ.Склад)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,		
		|	НаименованиеСклада
		|ИТОГИ
		|	СУММА(Остаток),
		|	СУММА(ОстатокМобСклада)		
		|ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураСУчетомОстаткаХ.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураСУчетомОстаткаХ.Характеристика КАК Характеристика,
		|	ВТ_ВидыЦен.ВидЦены КАК ВидЦены,
		|	ВТ_ВидыЦен.ВалютаЦены,
		|	ВТ_ВидыЦен.Курс КАК Курс,
		|	ВТ_ВидыЦен.Кратность КАК Кратность
		|ПОМЕСТИТЬ ВТ_НоменклатураВидыЦенХ
		|ИЗ
		|	ВТ_НоменклатураСУчетомОстаткаХ КАК ВТ_НоменклатураСУчетомОстаткаХ,
		|	ВТ_ВидыЦен КАК ВТ_ВидыЦен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НоменклатураВидыЦенХ.Номенклатура КАК Номенклатура,
		|	ВТ_НоменклатураВидыЦенХ.Характеристика КАК Характеристика,
		|	ВТ_НоменклатураВидыЦенХ.ВидЦены КАК ВидЦены,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / [Коэффициент] * ВЫБОР
		|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(ВТ_НоменклатураВидыЦенХ.Кратность, 0) > 0
		|							И ЕСТЬNULL(ВТ_НоменклатураВидыЦенХ.Курс, 0) > 0
		|						ТОГДА ВТ_НоменклатураВидыЦенХ.Курс * &КратностьВалюты / (&КурсВалюты * ВТ_НоменклатураВидыЦенХ.Кратность)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Цена,
		|	ВТ_НоменклатураВидыЦенХ.ВидЦены.Наименование КАК НаименованиеВидаЦены
		|ИЗ
		|	ВТ_НоменклатураВидыЦенХ КАК ВТ_НоменклатураВидыЦенХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО  ЦеныНоменклатурыСрезПоследних.Номенклатура = ВТ_НоменклатураВидыЦенХ.Номенклатура
		|			И ЦеныНоменклатурыСрезПоследних.Характеристика = ВТ_НоменклатураВидыЦенХ.Характеристика
		|			И ЦеныНоменклатурыСрезПоследних.ВидЦены = ВТ_НоменклатураВидыЦенХ.ВидЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	НаименованиеВидаЦены
		|ИТОГИ ПО
		|	Номенклатура,
		|	Характеристика
		|";	
		
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаВыборкиЕдиницИзмерения()

	стррЛитералы = Новый Структура("НоменклатураВес,УпаковкиЕдиницыИзмерения,УпаковкиКоэффициент,Упаковки");	
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		
		стррЛитералы.НоменклатураВес = 
			"ВЫБОР
			|	КОГДА Номенклатура.Ссылка.ВесЗнаменатель > 0
			|		ТОГДА Номенклатура.Ссылка.ВесЧислитель / Номенклатура.Ссылка.ВесЗнаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
			
		стррЛитералы.УпаковкиКоэффициент = 
			"ВЫБОР
			|	КОГДА Упаковки.Знаменатель > 0
			|		ТОГДА Упаковки.Числитель / Упаковки.Знаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
		//стррЛитералы.УпаковкиКоэффициент		= "Упаковки.Числитель / Упаковки.Знаменатель";
		стррЛитералы.Упаковки					= "УпаковкиЕдиницыИзмерения";
		
	Иначе // УТ 11.1
		
		стррЛитералы.УпаковкиКоэффициент		= "Упаковки.Коэффициент";
		стррЛитералы.Упаковки					= "УпаковкиНоменклатуры";
		стррЛитералы.НоменклатураВес 			= "Номенклатура.Вес";
		стррЛитералы.УпаковкиЕдиницыИзмерения   = "ЕдиницыИзмерения";
		
	КонецЕсли;
	
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
			|	"""" КАК КодОКЕИ,
			|	Номенклатура.ЕдиницаИзмеренияНаименование КАК Наименование,
			|	1 КАК Коэффициент,
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	[НоменклатураВес] Как Вес,
			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
			|ИЗ
			|	ВТ_Ассортимент КАК Номенклатура
			|ГДЕ
			|	(НЕ Номенклатура.ИспользоватьУпаковки
			|			ИЛИ Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
			|	И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Упаковки.Ссылка,
			|	"""",
			|	Упаковки.Наименование,
			|	[УпаковкиКоэффициент],
			|	Упаковки.Владелец,
			|	Упаковки.Вес,
			|	ЛОЖЬ,
			|	&ПустойНаборУпаковок,
			|	Упаковки.ЕдиницаИзмерения,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.[Упаковки] КАК Упаковки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК Номенклатура
			|		ПО Упаковки.Владелец = Номенклатура.Ссылка
			|ГДЕ
			|	Номенклатура.ИспользоватьУпаковки
			|	И Номенклатура.ИндивидуальныйНабор
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Упаковки.Ссылка,
			|	"""",
			|	Упаковки.Наименование,
			|	[УпаковкиКоэффициент],
			|	&ПустаяНоменклатура,
			|	Упаковки.Вес,
			|	ИСТИНА,
			|	Упаковки.Владелец,
			|	Упаковки.ЕдиницаИзмерения,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.[Упаковки] КАК Упаковки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
			|		ПО Упаковки.Владелец = НаборыУпаковок.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК Номенклатура
			|		ПО (НаборыУпаковок.Ссылка = Номенклатура.НаборУпаковок)
			|ГДЕ
			|	Номенклатура.ИспользоватьУпаковки
			|	И НЕ Номенклатура.ИндивидуальныйНабор";
		
	Иначе // не используются упаковки номенклатуры
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
			|	"""" КАК КодОКЕИ,
			|	Номенклатура.ЕдиницаИзмеренияНаименование КАК Наименование,
			|	1 КАК Коэффициент,
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	[НоменклатураВес] КАК Вес,
			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
			|ИЗ
			|	ВТ_Ассортимент КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)";
		
	КонецЕсли; // ПолучитьЗначениеКонстанты("ИспользоватьУпаковкиНоменклатуры")
	
	ТекстЗапроса = ТекстЗапроса + ";
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕдиницыБезКлассификаторов.Ссылка КАК Ссылка,
		|	ЕдиницыБезКлассификаторов.КодОКЕИ КАК КодОКЕИ,
		|	ЕдиницыБезКлассификаторов.Наименование КАК Наименование,
		|	ЕдиницыБезКлассификаторов.Коэффициент КАК Коэффициент,
		|	ЕдиницыБезКлассификаторов.Номенклатура КАК Номенклатура,
		|	ЕдиницыБезКлассификаторов.Вес КАК Вес,
		|	ЕдиницыБезКлассификаторов.ЭтоНаборУпаковок КАК ЭтоНаборУпаковок,
		|	ЕдиницыБезКлассификаторов.ВладелецНаборУпаковок КАК ВладелецНаборУпаковок,
		|	ЕдиницыБезКлассификаторов.Классификатор КАК Классификатор,
		|	ЕдиницыБезКлассификаторов.ЭтоЕдиницаНоменклатуры КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Классификатор.Ссылка,
		|	Классификатор.Код,
		|	Классификатор.Наименование,
		|	1,
		|	&ПустаяНоменклатура,
		|	0,
		|	ЛОЖЬ,
		|	&ПустойНаборУпаковок,
		|	&ПустойНаборУпаковок,
		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК Классификатор
		|ГДЕ
		|	Классификатор.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ЕдиницыБезКлассификаторов.Классификатор
		|			ИЗ
		|				ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов)";
	
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВsборкиЕдиницИзмерения()

Функция ТекстЗапросаВыборкиГруппПартнеров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Партнеры.ГруппаДоступа.Наименование КАК Наименование,
	|	Партнеры.ГруппаДоступа КАК Ссылка
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО ВТ_Партнеры.Ссылка = Партнеры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВыборкиГруппНоменклатуры()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Родитель
	|ПОМЕСТИТЬ РодителиТоваров
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
	|		ПО Номенклатура.Ссылка = ВТ_Ассортимент.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Родитель КАК РодительЭл
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РодителиТоваров КАК РодителиТоваров
	|		ПО Номенклатура.Ссылка = РодителиТоваров.Родитель
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";

	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаВыборкиГруппНоменклатуры()

Функция ТекстЗапросаВыборкиВидовНоменклатуры()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| ВидыНоменклатуры.Ссылка КАК Ссылка,
	| ВидыНоменклатуры.Наименование КАК Наименование,
	| ВидыНоменклатуры.Родитель.Ссылка КАК РодительЭл
	|ИЗ
	| Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	| Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";

	Возврат ТекстЗапроса;
КонецФункции // ТекстЗапросаВыборкиГруппНоменклатуры()

Функция ТекстЗапросаВыборкиДокументовЗаказПокупателя()

	стррЛитералы = Новый Структура("ЗаказКлиентаТоварыВес");		
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		стррЛитералы.ЗаказКлиентаТоварыВес = 
			"ВЫБОР
			|	КОГДА ЗаказКлиентаТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ ЗаказКлиентаТовары.Номенклатура.ВесЧислитель / ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель
			|			КОНЕЦ
			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес
			|КОНЕЦ";
			
	Иначе // УТ11.1
		стррЛитералы.ЗаказКлиентаТоварыВес = 
			"ВЫБОР
			|	КОГДА ЗаказКлиентаТовары.Упаковка.Вес = 0
			|	ТОГДА
			|		ЗаказКлиентаТовары.Номенклатура.Вес
			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес
			|КОНЕЦ";
			
	КонецЕсли;
	
	Если гКонфигурация = "УТ_АП"  Тогда 
		стррЛитералы.Вставить("ЗаказКлиентаТоварыКонтрагент");
		стррЛитералы.ЗаказКлиентаТоварыКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА ЗаказКлиентаТовары.Ссылка.алкПунктРазгрузки
			|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
			|	КОНЕЦ";
	Иначе 
		стррЛитералы.Вставить("ЗаказКлиентаТоварыКонтрагент");
		стррЛитералы.ЗаказКлиентаТоварыКонтрагент = "ЗаказКлиентаТовары.Ссылка.Контрагент";
	КонецЕсли;
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата,
		|	ЗаказКлиентаТовары.Ссылка.Номер,
		|	ЗаказКлиентаТовары.Ссылка.Проведен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Контрагент
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Партнер
		|	КОНЕЦ КАК Клиент,
		|	[ЗаказКлиентаТоварыКонтрагент] КАК Контрагент,
		|	ЗаказКлиентаТовары.Ссылка.Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Договор
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Соглашение
		|	КОНЕЦ КАК Соглашение,
		|	ЗаказКлиентаТовары.Ссылка.Валюта КАК Валюта,
		|	ЗаказКлиентаТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиентаТовары.Ссылка.Склад,
		|	ЗаказКлиентаТовары.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика,
		|	ЗаказКлиентаТовары.Упаковка,
		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК Количество,
		|	ЗаказКлиентаТовары.ВидЦены,
		|	ЗаказКлиентаТовары.Цена,
		|	ЗаказКлиентаТовары.Сумма,
		|	ЗаказКлиентаТовары.СтавкаНДС,
		|	ЗаказКлиентаТовары.СуммаНДС,
		|	ЗаказКлиентаТовары.СуммаСНДС,
		|	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
		|	ЗаказКлиентаТовары.СуммаРучнойСкидки,
		|	[ЗаказКлиентаТоварыВес] КАК Вес,
		|	ЗаказКлиентаТовары.Ссылка.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ЗаказКлиентаТовары.Ссылка.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказКлиентаТовары.Ссылка.ПометкаУдаления
		|	И ЗаказКлиентаТовары.Ссылка.Менеджер = &Агент
		|ИТОГИ
		|	СУММА(Вес)
		|ПО
		|	Ссылка";
		
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
		
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВыборкиДокументовЗаказПокупателя()

Функция ТекстЗапросаВыборкиДокументовРеализация()
	
	стррЛитералы = Новый Структура("РеализацияТоваровВес");		
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		стррЛитералы.РеализацияТоваровВес = 
			"ВЫБОР
			|	КОГДА РеализацияТоваровУслугТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ВесЧислитель / РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель
			|			КОНЕЦ
			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес
			|КОНЕЦ";
			
	Иначе // УТ11.1
		стррЛитералы.РеализацияТоваровВес = 
			"ВЫБОР
			|	КОГДА РеализацияТоваровУслугТовары.Упаковка.Вес = 0
			|	ТОГДА
			|		РеализацияТоваровУслугТовары.Номенклатура.Вес
			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес
			|КОНЕЦ";
			
	КонецЕсли;
	
	Если гКонфигурация = "УТ_АП"  Тогда 
		стррЛитералы.Вставить("РеализацияТоваровКонтрагент");
		стррЛитералы.РеализацияТоваровКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.алкПунктРазгрузки
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
			|	КОНЕЦ";
	Иначе 
		стррЛитералы.Вставить("РеализацияТоваровКонтрагент");
		стррЛитералы.РеализацияТоваровКонтрагент = "РеализацияТоваровУслугТовары.Ссылка.Контрагент";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыРеализация.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыПродажи
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		ВЫРАЗИТЬ(РеализацияТоваровУслуг.ЗаказКлиента КАК Документ.ЗаказКлиента) В (&СписокЗаказов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Менеджер = &Агент) КАК ДокументыРеализация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПродажи.Ссылка КАК Ссылка,
		|	ДокументыПродажи.Ссылка.Дата КАК Дата,
		|	ДокументыПродажи.Ссылка.Номер,
		|	ДокументыПродажи.Ссылка.Проведен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ДокументыПродажи.Ссылка.Контрагент
		|		ИНАЧЕ ДокументыПродажи.Ссылка.Партнер
		|	КОНЕЦ КАК Клиент,
		|	[РеализацияТоваровКонтрагент] КАК Контрагент,
		|	ДокументыПродажи.Ссылка.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ДокументыПродажи.Ссылка.Договор
		|		ИНАЧЕ ДокументыПродажи.Ссылка.Соглашение
		|	КОНЕЦ КАК Соглашение,
		|	ДокументыПродажи.Ссылка.Валюта КАК Валюта,
		|	ДокументыПродажи.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ДокументыПродажи.Ссылка.Склад КАК Склад,
		|	ДокументыПродажи.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика,
		|	РеализацияТоваровУслугТовары.Упаковка,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество,
		|	РеализацияТоваровУслугТовары.ВидЦены,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровУслугТовары.СуммаСНДС,
		|	РеализацияТоваровУслугТовары.ПроцентРучнойСкидки,
		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
		|	[РеализацияТоваровВес] КАК Вес,
		|	РеализацияТоваровУслугТовары.Ссылка.Комментарий,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ДокументЗаказ
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
		|		ПО (ДокументыПродажи.Ссылка = РеализацияТоваровУслугТовары.Ссылка)
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
		|ИТОГИ
		|	СУММА(Вес)
		|ПО
		|	Ссылка";
	
	ЗаменитьЛитералы(ТекстЗапроса, стррЛитералы);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыборкиДокументовПеремещение() // sd_22082017
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	НЕ ПеремещениеТоваров.ПометкаУдаления
	               |	И ПеремещениеТоваров.Проведен
	               |	И ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (ПеремещениеТоваров.СкладПолучатель = &Склад
	               |			ИЛИ ПеремещениеТоваров.СкладОтправитель = &Склад)
	               |	И ПеремещениеТоваров.Статус = &Статус
				   |	И ПеремещениеТоваров.Ответственный = &Агент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПеремещениеТоваров.МоментВремени
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоВзаиморасчетам(СпособРасчета)
	
	Если Не ЗначениеЗаполнено(СпособРасчета) Или (СпособРасчета = "НеУчитывать")  Тогда
		
		Если ПоколениеКонфигурации(">УТ_11.2") Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеДокумента.Ссылка КАК Ссылка,
			|	ДанныеДокумента.Статус КАК Статус,
			|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
			|	ДанныеДокумента.Партнер КАК Партнер,
			|	ДанныеДокумента.Соглашение КАК Соглашение,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
			|	ДанныеДокумента.Валюта КАК Валюта,
			|	ДанныеДокумента.Организация КАК Организация,
			|	ДанныеДокумента.Контрагент КАК Контрагент,
			|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
			|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
			|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
			|ПОМЕСТИТЬ ОбъектыРасчетов
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка КАК Ссылка,
			|	ДанныеДокумента.Статус КАК Статус,
			|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
			|	ДанныеДокумента.Партнер КАК Партнер,
			|	ДанныеДокумента.Соглашение КАК Соглашение,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
			|	ДанныеДокумента.Валюта КАК Валюта,
			|	ДанныеДокумента.Организация КАК Организация,
			|	ДанныеДокумента.Контрагент КАК Контрагент,
			|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
			|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
			|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка КАК Ссылка,
			|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
			|	ИНАЧЕ
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
			|	КОНЕЦ КАК Статус,
			|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
			|	ДанныеДокумента.Партнер КАК Партнер,
			|	ДанныеДокумента.Соглашение КАК Соглашение,
			|	ДанныеДокумента.Договор КАК Договор,
			|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
			|	ДанныеДокумента.Валюта КАК Валюта,
			|	ДанныеДокумента.Организация КАК Организация,
			|	ДанныеДокумента.Контрагент КАК Контрагент,
			|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
			|	0 КАК СуммаАвансаДоОбеспечения,
			|	ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
			|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
			|		ИНАЧЕ РасчетыСКлиентами.ЗаказКлиента.Договор
			|	КОНЕЦ КАК Договор,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетыПоДоговору,
			|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
			|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
			|	РасчетыСКлиентами.Валюта КАК Валюта,
			|	АналитикаПоПартнерам.Партнер КАК Партнер,
			|	АналитикаПоПартнерам.Организация КАК Организация,
			|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
			|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДолгКлиента,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
			|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НашДолг,
			|	РасчетыСКлиентами.СуммаКонечныйОстаток КАК СальдоДолга,
			|	РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток КАК Оплачивается,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
			|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КОплате,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток < 0
			|			И (РасчетыСКлиентами.ЗаказКлиента Ссылка Документ.ВозвратТоваровОтКлиента
			|				ИЛИ РасчетыСКлиентами.ЗаказКлиента Ссылка Документ.ЗаявкаНаВозвратТоваровОтКлиента)
			|			ТОГДА -РасчетыСКлиентами.КОплатеКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КВозвратуДС,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.КОтгрузкеКонечныйОстаток < 0
			|			ТОГДА -РасчетыСКлиентами.КОтгрузкеКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КОтгрузке,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток > 0
			|			ТОГДА РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Отгружается,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0) > 0
			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
			|					< ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения,0)
			|			ТОГДА Заказ.СуммаАвансаДоОбеспечения - (РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК АвансДоОбеспечения,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
			|				И ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0) > 0
			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
			|					< ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|			ТОГДА Заказ.СуммаПредоплатыДоОтгрузки
			|		КОГДА ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
			|					< ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|				И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
			|					>= ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|			ТОГДА Заказ.СуммаПредоплатыДоОтгрузки + Заказ.СуммаАвансаДоОбеспечения - (РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПредоплатаДоОтгрузки,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
			|				И Заказ.Ссылка ЕСТЬ NULL 
			|				И РасчетыСКлиентами.КОплатеКонечныйОстаток > 0
			|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
			|		КОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|				- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
			|			И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток <=
			|				ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|			ТОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|					- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0)
			|		КОГДА РасчетыСКлиентами.КОплатеПриход - ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|				- ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) > 0
			|			И РасчетыСКлиентами.КОплатеПриход - РасчетыСКлиентами.КОплатеКонечныйОстаток
			|				> ЕСТЬNULL(Заказ.СуммаПредоплатыДоОтгрузки, 0) + ЕСТЬNULL(Заказ.СуммаАвансаДоОбеспечения, 0)
			|			ТОГДА РасчетыСКлиентами.КОплатеКонечныйОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КредитПослеОтгрузки
			|	
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
			|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
			|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
			|ГДЕ
			|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
			|	И АналитикаПоПартнерам.Организация В (&СписокОрганизаций)
			|	И АналитикаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
			|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
			|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
			|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	ОбъектыРасчетов.Ссылка КАК ЗаказКлиента,
			|	ВЫБОР
			|		КОГДА ОбъектыРасчетов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|			ТОГДА ОбъектыРасчетов.Ссылка
			|		ИНАЧЕ ОбъектыРасчетов.Договор
			|	КОНЕЦ КАК Договор,
			|	ВЫБОР
			|		КОГДА ОбъектыРасчетов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетыПоДоговору,
			|	ОбъектыРасчетов.Соглашение КАК Соглашение,
			|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
			|	ОбъектыРасчетов.Валюта КАК Валюта,
			|	ОбъектыРасчетов.Партнер КАК Партнер,
			|	ОбъектыРасчетов.Организация КАК Организация,
			|	ОбъектыРасчетов.Контрагент КАК Контрагент,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0) > 0
			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДолгКлиента,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0) < 0
			|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентами.СуммаКонечныйОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НашДолг,
			|	ЕСТЬNULL(РасчетыСКлиентами.СуммаКонечныйОстаток, 0) КАК СальдоДолга,
			|	ЕСТЬNULL(РасчетыСКлиентами.ОплачиваетсяКонечныйОстаток, 0) КАК Оплачивается,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0) > 0
			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0)
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0) = 0 И ЕСТЬNULL(РасчетыСКлиентами.КОплатеОборот, 0) = 0
			|			ТОГДА ОбъектыРасчетов.СуммаДокумента
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0) < 0
			|			ТОГДА ОбъектыРасчетов.СуммаДокумента + ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КОплате,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < 0
			|			И ОбъектыРасчетов.Ссылка Ссылка Документ.ЗаявкаНаВозвратТоваровОтКлиента
			|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентами.КОплатеКонечныйОстаток,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КВозвратуДС,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеКонечныйОстаток,0) < 0
			|			ТОГДА ЕСТЬNULL(-РасчетыСКлиентами.КОтгрузкеКонечныйОстаток,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КОтгрузке,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток,0) > 0
			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Отгружается,
			|	ВЫБОР
			|		КОГДА ОбъектыРасчетов.СуммаАвансаДоОбеспечения > 0
			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаАвансаДоОбеспечения
			|			ТОГДА ОбъектыРасчетов.СуммаАвансаДоОбеспечения - (ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0))
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК АвансДоОбеспечения,
			|	ВЫБОР
			|		КОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
			|				И ОбъектыРасчетов.СуммаАвансаДоОбеспечения > 0
			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаАвансаДоОбеспечения
			|			ТОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки
			|		КОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения
			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход, 0)- ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) >= ОбъектыРасчетов.СуммаАвансаДоОбеспечения
			|			ТОГДА ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения - (ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0))
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПредоплатаДоОтгрузки,
			|	ВЫБОР
			|		КОГДА РасчетыСКлиентами.ЗаказКлиента <> НЕОПРЕДЕЛЕНО
			|				И ОбъектыРасчетов.Ссылка ЕСТЬ NULL 
			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) > 0
			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0)
			|		КОГДА ОбъектыРасчетов.СуммаДокумента - (ОбъектыРасчетов.СуммаАвансаДоОбеспечения + ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки) > 0
			|				И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) < ОбъектыРасчетов.СуммаДокумента - (ОбъектыРасчетов.СуммаАвансаДоОбеспечения + ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки)
			|			ТОГДА ОбъектыРасчетов.СуммаДокумента - (ОбъектыРасчетов.СуммаАвансаДоОбеспечения + ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки)
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ОбъектыРасчетов.СуммаАвансаДоОбеспечения - ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
			|			И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) <= ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения
			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ОбъектыРасчетов.СуммаАвансаДоОбеспечения - ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки
			|		КОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ОбъектыРасчетов.СуммаАвансаДоОбеспечения - ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки > 0
			|			И ЕСТЬNULL(РасчетыСКлиентами.КОплатеПриход,0) - ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0) > ОбъектыРасчетов.СуммаПредоплатыДоОтгрузки + ОбъектыРасчетов.СуммаАвансаДоОбеспечения
			|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КредитПослеОтгрузки
			|
			|ИЗ
			|	ОбъектыРасчетов КАК ОбъектыРасчетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты() КАК РасчетыСКлиентами
			|		ПО РасчетыСКлиентами.ЗаказКлиента = ОбъектыРасчетов.Ссылка
			|ГДЕ
			|	(ОбъектыРасчетов.Ссылка ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
			|		ИЛИ ОбъектыРасчетов.Ссылка ССЫЛКА Документ.ЗаказКлиента)
			|	И ОбъектыРасчетов.СуммаДокумента <> 0
			|";		
						
			
		ИначеЕсли ПоколениеКонфигурации("=УТ_11.2") Тогда
			
			ТекстЗапроса = 	
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ДанныеДокумента.Статус КАК Статус,
				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ДанныеДокумента.Партнер КАК Партнер,
				|	ДанныеДокумента.Соглашение КАК Соглашение,
				|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ДанныеДокумента.Валюта КАК Валюта,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
				|ПОМЕСТИТЬ ОбъектыРасчетов
				|ИЗ
				|	Документ.ЗаказКлиента КАК ДанныеДокумента
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ДанныеДокумента.Статус КАК Статус,
				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ДанныеДокумента.Партнер КАК Партнер,
				|	ДанныеДокумента.Соглашение КАК Соглашение,
				|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ДанныеДокумента.Валюта КАК Валюта,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
				|ИЗ
				|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
				|	ИНАЧЕ
				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
				|	КОНЕЦ КАК Статус,
				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ДанныеДокумента.Партнер КАК Партнер,
				|	ДанныеДокумента.Соглашение КАК Соглашение,
				|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ДанныеДокумента.Валюта КАК Валюта,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
				|	0 КАК СуммаАвансаДоОбеспечения,
				|	ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
				|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
				|	ВЫБОР
				|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК РасчетыПоДоговору,
				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	РасчетыСКлиентами.Валюта КАК Валюта,
				|	АналитикаПоПартнерам.Партнер КАК Партнер,
				|	АналитикаПоПартнерам.Организация КАК Организация,
				|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
				|	АналитикаПоПартнерам.Договор КАК Договор,
				|	ВЫБОР
				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
				|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ДолгКлиента,
				|	ВЫБОР
				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
				|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК НашДолг
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
				|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
				|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
				|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
				|ГДЕ
				|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
				|	И АналитикаПоПартнерам.Организация В (&СписокОрганизаций)
				|	И АналитикаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
				|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
				|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
				|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0
				|			ИЛИ РасчетыСКлиентами.СуммаКонечныйОстаток <> 0)
				|";
				
		Иначе //ПоколениеКонфигурации("=УТ_11.1")
			
			ТекстЗапроса = 	
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ДанныеДокумента.Статус КАК Статус,
				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ДанныеДокумента.Партнер КАК Партнер,
				|	ДанныеДокумента.Соглашение КАК Соглашение,
				//|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ДанныеДокумента.Валюта КАК Валюта,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
				|ПОМЕСТИТЬ ОбъектыРасчетов
				|ИЗ
				|	Документ.ЗаказКлиента КАК ДанныеДокумента
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ДанныеДокумента.Статус КАК Статус,
				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ДанныеДокумента.Партнер КАК Партнер,
				|	ДанныеДокумента.Соглашение КАК Соглашение,
				//|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ДанныеДокумента.Валюта КАК Валюта,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.СуммаЗамены КАК СуммаДокумента,
				|	ДанныеДокумента.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
				|	ДанныеДокумента.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки
				|ИЗ
				|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеДокумента.Ссылка КАК Ссылка,
				|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате) ТОГДА
				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
				|	ИНАЧЕ
				|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
				|	КОНЕЦ КАК Статус,
				|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ДанныеДокумента.Партнер КАК Партнер,
				|	ДанныеДокумента.Соглашение КАК Соглашение,
				//|	ДанныеДокумента.Договор КАК Договор,
				|	ДанныеДокумента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ДанныеДокумента.Валюта КАК Валюта,
				|	ДанныеДокумента.Организация КАК Организация,
				|	ДанныеДокумента.Контрагент КАК Контрагент,
				|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаДокумента,
				|	0 КАК СуммаАвансаДоОбеспечения,
				|	ДанныеДокумента.СуммаПредоплаты КАК СуммаПредоплатыДоОтгрузки
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
				|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
				|	ВЫБОР
				|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК РасчетыПоДоговору,
				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
				|	РасчетыСКлиентами.ЗаказКлиента.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	РасчетыСКлиентами.Валюта КАК Валюта,
				|	АналитикаПоПартнерам.Партнер КАК Партнер,
				|	АналитикаПоПартнерам.Организация КАК Организация,
				|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
				//|	АналитикаПоПартнерам.Договор КАК Договор,
				|	ВЫБОР
				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток > 0
				|			ТОГДА РасчетыСКлиентами.СуммаКонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК ДолгКлиента,
				|	ВЫБОР
				|		КОГДА РасчетыСКлиентами.СуммаКонечныйОстаток < 0
				|			ТОГДА -РасчетыСКлиентами.СуммаКонечныйОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК НашДолг
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(, ) КАК РасчетыСКлиентами
				|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК Заказ
				|		ПО РасчетыСКлиентами.ЗаказКлиента = Заказ.Ссылка
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
				|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики}
				|ГДЕ
				|	АналитикаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
				|	И АналитикаПоПартнерам.Организация В (&СписокОрганизаций)
				|	И АналитикаПоПартнерам.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
				|	И (РасчетыСКлиентами.КОплатеКонечныйОстаток <> 0 
				|			ИЛИ РасчетыСКлиентами.КОтгрузкеКонечныйОстаток <> 0
				|			ИЛИ РасчетыСКлиентами.ОтгружаетсяКонечныйОстаток <> 0
				|			ИЛИ РасчетыСКлиентами.СуммаКонечныйОстаток <> 0)
				|";
		
		КонецЕсли; 
		
			
	Иначе // Если Не ЗначениеЗаполнено(СпособРасчета) Или (СпособРасчета = "НеУчитывать")  Тогда 
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	АналитикаУчетаПоПартнерам.КлючАналитики
		               |ПОМЕСТИТЬ ОтборАналитикиПартнеров
		               |ИЗ
		               |	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		               |		ПО АналитикаУчетаПоПартнерам.Партнер = ВТ_Партнеры.Ссылка
		               |ГДЕ
		               |	АналитикаУчетаПоПартнерам.Организация В(&СписокОрганизаций)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		               |	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента,
		               |	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		               |	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток,
		               |	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстатокНаКонецПериода,
		               |	&ДатаРасчета КАК ДатаПлатежа,
		               |	ДОБАВИТЬКДАТЕ(&ДатаРасчета, СЕКУНДА, 1) КАК Период
		               |ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		               |ИЗ
		               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
		               |			&ДатаРасчета,
		               |			АналитикаУчетаПоПартнерам В
		               |				(ВЫБРАТЬ
		               |					ОтборАналитикиПартнеров.КлючАналитики
		               |				ИЗ
		               |					ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)) КАК РасчетыСКлиентамиОстатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		               |	Расчеты.ЗаказКлиента КАК ЗаказКлиента,
		               |	Расчеты.Валюта КАК Валюта,
		               |	МАКСИМУМ(Расчеты.ДатаПлатежа) КАК ДатаПлатежа,
		               |	МАКСИМУМ(НАЧАЛОПЕРИОДА(Расчеты.Период, ДЕНЬ)) КАК Период
		               |ПОМЕСТИТЬ ТаблицаПериодовКлиентов
		               |ИЗ
		               |	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		               |		ПО Расчеты.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		               |			И Расчеты.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		               |			И Расчеты.Валюта = ТаблицаОстатков.Валюта
		               |			И (ТаблицаОстатков.КОплатеОстаток <> 0)
		               |ГДЕ
		               |	Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		               |	И Расчеты.Активность
		               |	И Расчеты.Период <= &ДатаРасчета
		               |	И Расчеты.Период < ТаблицаОстатков.Период
		               |	И Расчеты.КОплате <> 0
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Расчеты.АналитикаУчетаПоПартнерам,
		               |	Расчеты.ЗаказКлиента,
		               |	Расчеты.Валюта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	Периоды.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		               |	Периоды.ЗаказКлиента КАК ЗаказКлиента,
		               |	Периоды.Валюта КАК Валюта,
		               |	Периоды.Период КАК Период,
		               |	Периоды.ДатаПлатежа КАК ДатаПлатежа,
		               |	СУММА(ЕСТЬNULL(Расчеты.КОплате, 0)) КАК КОплате
		               |ПОМЕСТИТЬ ТаблицаОтгрузокКлиентов
		               |ИЗ
		               |	ТаблицаПериодовКлиентов КАК Периоды
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		               |		ПО Периоды.АналитикаУчетаПоПартнерам = Расчеты.АналитикаУчетаПоПартнерам
		               |			И Периоды.ЗаказКлиента = Расчеты.ЗаказКлиента
		               |			И Периоды.Валюта = Расчеты.Валюта
		               |			И Периоды.ДатаПлатежа = Расчеты.ДатаПлатежа
		               |			И (Расчеты.Активность)
		               |			И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		               |			И (Расчеты.Период МЕЖДУ Периоды.Период И КОНЕЦПЕРИОДА(Периоды.Период, ДЕНЬ))
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Периоды.АналитикаУчетаПоПартнерам,
		               |	Периоды.ЗаказКлиента,
		               |	Периоды.Валюта,
		               |	Периоды.Период,
		               |	Периоды.ДатаПлатежа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		               |	Остатки.ЗаказКлиента КАК ЗаказКлиента,
		               |	Остатки.Валюта КАК Валюта,
		               |	ВЫБОР
		               |		КОГДА Остатки.КОплатеОстаток > ЕСТЬNULL(Отгрузки.КОплате, 0)
		               |			ТОГДА Остатки.КОплатеОстаток - ЕСТЬNULL(Отгрузки.КОплате, 0)
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК НовыйКОплатеОстаток,
		               |	Остатки.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода,
		               |	Остатки.Период КАК Период,
		               |	ЕСТЬNULL(Отгрузки.ДатаПлатежа, Остатки.ДатаПлатежа) КАК ДатаПлатежа
		               |ПОМЕСТИТЬ НовыеОстаткиКлиентов
		               |ИЗ
		               |	ТаблицаОстатковКлиентов КАК Остатки
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтгрузокКлиентов КАК Отгрузки
		               |		ПО Остатки.АналитикаУчетаПоПартнерам = Отгрузки.АналитикаУчетаПоПартнерам
		               |			И Остатки.ЗаказКлиента = Отгрузки.ЗаказКлиента
		               |			И Остатки.Валюта = Отгрузки.Валюта
		               |			И (Остатки.КОплатеОстаток <> 0)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТаблицаОстатковКлиентов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ТаблицаОтгрузокКлиентов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НовыеОстаткиКлиентов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		               |	НовыеОстаткиКлиентов.ЗаказКлиента КАК ЗаказКлиента,
		               |	НовыеОстаткиКлиентов.Валюта КАК Валюта,
		               |	НовыеОстаткиКлиентов.Период КАК Период,
		               |	НовыеОстаткиКлиентов.ДатаПлатежа КАК ДатаПлатежа,
		               |	НовыеОстаткиКлиентов.НовыйКОплатеОстаток КАК НовыйКОплатеОстаток,
		               |	НовыеОстаткиКлиентов.КОплатеОстатокНаКонецПериода КАК КОплатеОстатокНаКонецПериода
		               |ПОМЕСТИТЬ ТаблицаОстатковКлиентов
		               |ИЗ
		               |	НовыеОстаткиКлиентов КАК НовыеОстаткиКлиентов
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	АналитикаУчетаПоПартнерам,
		               |	ЗаказКлиента,
		               |	Валюта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ НовыеОстаткиКлиентов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВЫБОР
		               |		КОГДА Расчеты.СуммаОстаток < 0
		               |			ТОГДА 0 - Расчеты.СуммаОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК НашДолг,
		               |	ВЫБОР
		               |		КОГДА Расчеты.СуммаОстаток > 0
		               |			ТОГДА Расчеты.СуммаОстаток
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ДолгКлиента,
		               |	ВЫБОР
		               |		КОГДА Расчеты.СуммаОстаток > 0
		               |			ТОГДА ВЫБОР
		               |					КОГДА Расчеты.СуммаОстаток < Расчеты.КОплатеОстаток
		               |						ТОГДА Расчеты.СуммаОстаток
		               |					ИНАЧЕ Расчеты.КОплатеОстаток
		               |				КОНЕЦ
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК ДолгКлиентаПросрочено,
		               |	ВЫБОР
		               |		КОГДА Остатки.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		               |			ТОГДА 0
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА РАЗНОСТЬДАТ(Остатки.ДатаПлатежа, &ДатаРасчета, ДЕНЬ) > 0
		               |					ТОГДА РАЗНОСТЬДАТ(Остатки.ДатаПлатежа, &ДатаРасчета, ДЕНЬ)
		               |				ИНАЧЕ 0
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ПросроченоДней,
		               |	АналитикаУчета.Партнер КАК Партнер,
		               |	АналитикаУчета.Партнер.БизнесРегион КАК БизнесРегион,
		               |	АналитикаУчета.Организация КАК Организация,
		               |	АналитикаУчета.НаправлениеДеятельности КАК НаправлениеДеятельности,
		               |	&ДатаРасчета КАК ДатаРасчета,
		               |	Расчеты.ЗаказКлиента.Менеджер КАК Менеджер,
		               |	Расчеты.Валюта КАК Валюта,
		               |	ЕСТЬNULL(Расчеты.ЗаказКлиента.Соглашение, ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)) КАК ЗаказКлиентаСоглашение,
		               |	Расчеты.ЗаказКлиента КАК ЗаказКлиента,
		               |	Остатки.ДатаПлатежа КАК ДатаПлатежа
		               |ПОМЕСТИТЬ РезультатДоОтбора
		               |ИЗ
		               |	РегистрНакопления.РасчетыСКлиентами.Остатки(
		               |			&ДатаРасчета,
		               |			АналитикаУчетаПоПартнерам В
		               |				(ВЫБРАТЬ
		               |					ОтборАналитикиПартнеров.КлючАналитики
		               |				ИЗ
		               |					ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)) КАК Расчеты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		               |		ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК Остатки
		               |		ПО Расчеты.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		               |			И Расчеты.ЗаказКлиента = Остатки.ЗаказКлиента
		               |			И Расчеты.Валюта = Остатки.Валюта
		               |ГДЕ
		               |	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СУММА(РезультатДоОтбора.НашДолг) КАК НашДолг,
		               |	СУММА(РезультатДоОтбора.ДолгКлиента) КАК ДолгКлиента,
		               |	СУММА(РезультатДоОтбора.ДолгКлиентаПросрочено) КАК ДолгПросрочено,
		               |	РезультатДоОтбора.ПросроченоДней,
		               |	РезультатДоОтбора.Партнер,
		               |	РезультатДоОтбора.БизнесРегион,
		               |	РезультатДоОтбора.Организация,
		               |	РезультатДоОтбора.НаправлениеДеятельности,
		               |	РезультатДоОтбора.ДатаРасчета,
		               |	РезультатДоОтбора.Менеджер,
		               |	РезультатДоОтбора.Валюта,
		               |	РезультатДоОтбора.ЗаказКлиентаСоглашение,
		               |	РезультатДоОтбора.ЗаказКлиента,
		               |	РезультатДоОтбора.ДатаПлатежа
		               |ИЗ
		               |	РезультатДоОтбора КАК РезультатДоОтбора
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА &ТолькоПросроченные
		               |				ТОГДА РезультатДоОтбора.ПросроченоДней > &КолПросроченныхДней
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ
		               |	И РезультатДоОтбора.ДолгКлиента > 0
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	РезультатДоОтбора.Партнер,
		               |	РезультатДоОтбора.БизнесРегион,
		               |	РезультатДоОтбора.Организация,
		               |	РезультатДоОтбора.НаправлениеДеятельности,
		               |	РезультатДоОтбора.Менеджер,
		               |	РезультатДоОтбора.Валюта,
		               |	РезультатДоОтбора.ЗаказКлиентаСоглашение,
		               |	РезультатДоОтбора.ЗаказКлиента,
		               |	РезультатДоОтбора.ПросроченоДней,
		               |	РезультатДоОтбора.ДатаРасчета,
		               |	РезультатДоОтбора.ДатаПлатежа";
		
	КонецЕсли; // Если Не ЗначениеЗаполнено(СпособРасчета) Или (СпособРасчета = "НеУчитывать")  Тогда 
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоВзаиморасчетам()

Функция ТекстЗапросаПолученияИзображений()
	
	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияПартнеров Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	стрОбласть = "";
	
	Если ВыгружатьИзображенияТоваров Тогда
		
		стрОбласть = стрОбласть + "
		    |ВЫБРАТЬ
		    |	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		    |	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		    |	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
		    |	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
		    |	НоменклатураПрисоединенныеФайлы.ФайлХранилище КАК ФайлХранилище
		    |ИЗ
		    |	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		    |ГДЕ
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Ассортимент.Ссылка ИЗ ВТ_Ассортимент )
		    |	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ НоменклатураПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	Если ВыгружатьИзображенияПартнеров Тогда
		
		стрОбласть = стрОбласть + ?(стрОбласть = "", "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		    |ВЫБРАТЬ
		    |	ПартнерыПрисоединенныеФайлы.Ссылка,
		    |	ПартнерыПрисоединенныеФайлы.ВладелецФайла,
		    |	ПартнерыПрисоединенныеФайлы.Наименование,
		    |	ПартнерыПрисоединенныеФайлы.Расширение,
		    |	ПартнерыПрисоединенныеФайлы.Описание,
		    |	ПартнерыПрисоединенныеФайлы.ФайлХранилище
		    |ИЗ
		    |	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
		    |ГДЕ
		    |	ПартнерыПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
		    |	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ ПартнерыПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	Текст = "
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	ПрисоединенныеФайлы.ХранимыйФайл,
	    |	ФайлыСправочников.Ссылка,
	    |	ФайлыСправочников.ВладелецФайла,
	    |	ФайлыСправочников.Наименование,
	    |	ФайлыСправочников.Расширение,
	    |	ФайлыСправочников.Описание
	    |ИЗ
	    |	([Область]) КАК ФайлыСправочников
	    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	    |		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
		|";
		
	Возврат СтрЗаменить(Текст, "[Область]", стрОбласть);
	
КонецФункции

// ТекстыЗапросов
#КонецОбласти

#Область ФормированиеВремеменныхТаблиц

Процедура МенеджерВТПартнеров(МенеджерВТ)

	Отборы = ЭлементОтбораПоЛевомуЗначению("Партнеры", "СсылкаСписокТТ,ТипПартнера,ТолькоПартнерыОсновногоМенеджера");
	МакетКомпоновкиПартнеров = СформированныйМакетКомпоновкиДанных(Отборы, ТекстЗапросаВыборкиПартнеров());
	
	Запрос = Новый Запрос(МакетКомпоновкиПартнеров.НаборыДанных.НаборДанных.Запрос);
	Для Каждого ЭлементОтбора Из МакетКомпоновкиПартнеров.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();

КонецПроцедуры 

Процедура МенеджерВТКонтрагенты(МенеджерВТ)

	Отборы = ЭлементОтбораПоЛевомуЗначению("Контрагенты");
	МакетКомпоновкиКонтрагенты = СформированныйМакетКомпоновкиДанных(Отборы, ТекстЗапросаВыборкиКонтрагентов());
	
	Запрос = Новый Запрос(МакетКомпоновкиКонтрагенты.НаборыДанных.НаборДанных.Запрос);
	Для Каждого ЭлементОтбора Из МакетКомпоновкиКонтрагенты.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();

КонецПроцедуры

Процедура МенеджерВТНоменклатуры(МенеджерВТ)

	Отборы = ЭлементОтбораПоЛевомуЗначению("Номенклатура");
	МакетКомпоновкиНоменклатуры = СформированныйМакетКомпоновкиДанных(Отборы, ТекстЗапросаВыборкиНоменклатуры());
	
	// Выборка из справочника Номенклатура
	Запрос = Новый Запрос(МакетКомпоновкиНоменклатуры.НаборыДанных.НаборДанных.Запрос);
	Для Каждого ЭлементОтбора Из МакетКомпоновкиНоменклатуры.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ИндивидуальныйНаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	// Так же необходимо сделать выгрузку номенклатуры по созданным документам
	Запрос.Выполнить();

КонецПроцедуры 

Процедура МенеджерВТСклады(МенеджерВТ)
	
	Отборы = ЭлементОтбораПоЛевомуЗначению("Склады");
	МакетКомпоновкиСклады = СформированныйМакетКомпоновкиДанных(Отборы, ТекстЗапросаВыборкиСклады());
	
	// Выборка из справочника Склады
	Запрос = Новый Запрос(МакетКомпоновкиСклады.НаборыДанных.НаборДанных.Запрос);
	Для Каждого ЭлементОтбора Из МакетКомпоновкиСклады.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
	КонецЦикла;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция МенеджерВТПолучить(стрВидыОбъектов = "Номенклатура,Партнеры,Склады")
	
	Если ИспользоватьПунктыРазгрузки Тогда 
		стрВидыОбъектов = стрВидыОбъектов + ",Контрагенты";
	КонецЕсли;
	
	мВидыОбъектов = СтрРазделить_(стрВидыОбъектов);
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Для каждого стрВидОбъекта Из мВидыОбъектов Цикл
		Если стрВидОбъекта = "Номенклатура" Тогда
		    МенеджерВТНоменклатуры(МенеджерВТ);
		ИначеЕсли стрВидОбъекта = "Партнеры" Тогда
			МенеджерВТПартнеров(МенеджерВТ);
		ИначеЕсли стрВидОбъекта = "Контрагенты" Тогда
			МенеджерВТКонтрагенты(МенеджерВТ);
		ИначеЕсли стрВидОбъекта = "Склады" Тогда
			МенеджерВТСклады(МенеджерВТ);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат МенеджерВТ;

КонецФункции 

// ФормированиеВремеменныхТаблиц
#КонецОбласти

// Функция создает zip-архив выгружаемых картинок.
// 
// Параметры:
//		тзКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы или СправочникСсылка.ПартнерыПрисоединенныеФайлы
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
//  
// Возвращаемое значение:
//  Строка   - полный путь к zip-архиву.
//  
Функция СформироватьАрхивСКартинками(тзКартинки)
	   	
	Если тзКартинки = Неопределено Или тзКартинки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
				
	КаталогКартинок = КаталогВременныхФайловДляТранспорта("Pictures");
	
	ПолноеИмяАрхиваКартинок = КаталогКартинок + "GoodsPhotosFromCDB.zip";
	
	АрхивКартинок = Новый ЗаписьZipФайла(ПолноеИмяАрхиваКартинок, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);		
	
	Для Каждого СтрокаТ Из тзКартинки Цикл			
		ФайлСсылка = СтрокаТ.Ссылка; 
		стррДанные = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка);	
		ПолноеИмяФайла = КаталогКартинок + СтрокаТ.ИмяФайла;
		Если Не ФайлСуществует(ПолноеИмяФайла) Тогда // если файла в каталоге нет, записываем его из БД
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(стррДанные.СсылкаНаДвоичныеДанныеФайла);
			Если ДвоичныеДанные = Неопределено Тогда
				Продолжить;
			Иначе
				ДвоичныеДанные.Записать(ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли; 
		АрхивКартинок.Добавить(ПолноеИмяФайла);
	КонецЦикла;	
	
	АрхивКартинок.Записать();
	
	Возврат ПолноеИмяАрхиваКартинок;
	
КонецФункции

// ВыгрузкаДанных
#КонецОбласти

#Область ЗагрузкаДанных

Процедура ОповеститьОСменеАгента(СтарыйАгент, НовыйАгент)
	
	Текст = "В файле загрузки данных указан агент (%1), отличающийся от текущего (%2). Загрузка проводится для агента из файла выгрузки (%1).";
	Текст = СтрШаблон_(Текст, Строка(НовыйАгент), Строка(СтарыйАгент));
	ОповеститьОСобытии(Текст, "ОшибкаНастройки", , СтарыйАгент);
	
КонецПроцедуры

// Функция возвращает Истина, если загрузка прошла корректно.
Функция ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена)

	Результат = Истина;	
	
	ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла();
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(ФайлОбмена.ПолноеИмя);
	
	Пока ТекстXML.Прочитать() Цикл

		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ТекстXML.Имя = "DATA" Тогда
			НазваниеКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGNAME");
			ВерсияКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGVERSION");
		КонецЕсли;

		Если ТекстXML.Имя = "CONSTANTS" Тогда
			Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			стррКонстанты = КонстантыИзФайлаОбмена(ТекстXML, "АгентЗагрузки,КодЗапроса");
			АгентЗагрузки = ТорговыйПредставительИзФайлаОбмена(стррКонстанты.АгентЗагрузки);
			Если Агент <> АгентЗагрузки Тогда
				
				Если Не ЗначениеЗаполнено(стррКонстанты.АгентЗагрузки) Тогда // константа отсутствует в файле
					Текст = СтрШаблон_(НСтр("ru = 'В файле загрузки отсуствтует константа ""ИдентификаторАгента""! (GUID=""%1"").'"), 
						КонстантыМТПолучитьGUID("АгентЗагрузки"));
				ИначеЕсли ЗначениеЗаполнено(АгентЗагрузки) Тогда // константа присутствует в файле и ссылается на существующего агента
					Текст = НСтр("ru = 'Получен файл загрузки от агента: '") + АгентЗагрузки;
				Иначе // константа присутствует в файле и ссылается на не существующего агента
					Текст = СтрШаблон_(НСтр("ru = 'В файле выгрузки указана ссылка на несуществующего агента ""%1"". Загрузка проигнорирована.'"), стррКонстанты.АгентЗагрузки);
					ОповеститьОСобытии(Текст);
					Результат = Ложь;
					Прервать;
				КонецЕсли; 
				ОповеститьОСобытии(Текст);
				
				Если Не ЭтоСсылкаНаНайденныйОбъект(АгентЗагрузки) Тогда // Не можем определить по значению константы "АгентЗагрузки" из МУ от какого агента получен файл ...
					Если ЗначениеЗаполнено(Агент) Тогда // ... тогда загружаем файл для текущего выбранного агента - такое допустимо, например, при автообмене по FTP - мы точно знаем - нужно загружать для выбранного агента
						ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Данные загружаются для текущего агента ""%1"".'"), Агент), "ОшибкаЗапись",, "ТекущийАгент");
					Иначе // ... тогда останавливаем загрузку - не понятно для какого агента грузить файл
						ОповеститьОСобытии(НСтр("ru = 'Загрузка проигнорирована.'"));
						Результат = Ложь;
						Прервать;
					КонецЕсли;
				Иначе
					НастройкиАгента = ПолучитьНастройкиАгента(АгентЗагрузки);
					Если НастройкиАгента = Неопределено Тогда
						Если Не ЗначениеЗаполнено(Агент) Тогда
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Не найдены настройки для агента ""%1"". Загрузка проигнорирована.'"), АгентЗагрузки), "ОшибкаЗапись");
							Результат = Ложь;
							Прервать;
						Иначе
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Не найдены настройки для агента ""%1"". Загружаются данные с использованием настроек для агента ""%2"".'"), 
								АгентЗагрузки, Агент), "ОшибкаЗапись",, "ТекущийАгент");
							Агент = АгентЗагрузки;						
						КонецЕсли; 
					Иначе
						ВыбНастройкиАгента = НастройкиАгента;
						ОповеститьОСменеАгента(Агент, АгентЗагрузки);
						Агент = АгентЗагрузки;
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			//ЗагрузитьФотографии(ТекстXML, ПараметрыОбмена, ЗагружаемыеОбъекты, ПапкаСФотографиями);
		КонецЕсли;
		
	КонецЦикла;
	ТекстXML.Закрыть();

	Если Результат Тогда
		ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты);
		ПодтвержденияСохранить(ВыбНастройкиАгента.СсылкаМУ, ЗагружаемыеОбъекты);
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

#Область ЗагрузкаСправочников
// sd_10082017
Процедура ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "CATALOGS" Тогда
				Прервать;
			ИначеЕсли Имя = "CATALOG" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдСпрXML <> Неопределено Тогда
			ИдВидСправочникаМТ = Новый УникальныйИдентификатор(ИдСпрXML); // gi_170902
			ВидСправочника = ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Истина, "Справочник");
			Если ВидСправочника = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ);
				ИначеЕсли Имя = "KILLEDS" Или Имя = "GROUPS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "CATALOG" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла; // Пока ТекстXML.Прочитать() Цикл
	
КонецПроцедуры

// Функция загружает элемент справочника из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидСправочника - Строка - вид справочника в 1С:Предприятии
//		ИдВидСправочникаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если элемент справочника успешно записан в БД, иначе Ложь.
//  
Функция ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ)
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "НастройкиОбмена" Тогда // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут
		Текст = СтрШаблон_("Пропущена загрузка справочника %1", ВидСправочника);
		ОповеститьОСобытии(Текст); 
		ТекстXML.Пропустить();
		Возврат Истина;
	КонецЕсли;
	
	СпрМенеджер = Справочники[ВидСправочника];
	ПредставлениеСпр = СпрМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда			
		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.УстановитьНовыйКод();
		ЭтоНовыйОбъект = Истина;
	Иначе						
		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектСпр.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "Партнеры" Тогда   		
		Результат = ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);	
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "Контрагенты" Тогда
		Результат = ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "ВидыКонтактнойИнформации" Тогда
		Результат = ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "КонтактныеЛицаПартнеров" Тогда
		Результат = ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	Иначе // sd_20082017 Внес правки по аналогии с замечаниями по загрузке документа Внеплановый маршрут
		Текст = "Пропущена загрузка справочника ""%1 (%2)"". Загрузка справочников не предусмотрена!"; // sd_25082017
		ОповеститьОСобытии(СтрШаблон_(Текст, ПредставлениеСпр, ВидСправочника)); 
		ТекстXML.Пропустить();
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат Тогда
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
		СтрокаТ.Идентификатор 	 	= ИдОбъекта; // идентификатор (GUID) элемента справочника
		СтрокаТ.ИдВидСправочникаМТ	= ИдВидСправочникаМТ; // идентификатор (GUID) вида справочника в МТ
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)
	
	НаименованиеПартнера 	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	Долгота 				= ТекстXML.ПолучитьАтрибут("A016");
	Широта	 				= ТекстXML.ПолучитьАтрибут("A017");
	
	ОбъектСпр.Наименование 			= НаименованиеПартнера;
	ОбъектСпр.НаименованиеПолное 	= НаименованиеПартнера; 
	ОбъектСпр.ГруппаДоступа 		= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("GrpId0"), "ГруппыДоступаПартнеров");
	ОбъектСпр.Комментарий 			= ТекстXML.ПолучитьАтрибут("A023");
	ОбъектСпр.ЮрФизЛицо 			= Перечисления.КомпанияЧастноеЛицо.Компания;
	ОбъектСпр.ОсновнойМенеджер		= ВыбНастройкиАгента.Пользователь;
	ОбъектСпр.ОбменДанными.Загрузка = Ложь;
		
	Если Не ОбъектСпр.ЭтоГруппа Тогда 
		ОбъектСпр.Клиент = Истина;		
	КонецЕсли;

	стррДопСвойств = Новый Структура("Долгота, Широта");
	стррДопСвойств.Широта 	= Широта;
	стррДопСвойств.Долгота 	= Долгота;
	
	Результат = ЗаписьСправочника(ОбъектСпр, стррДопСвойств, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)

	НаименованиеКонтрагента	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	Долгота 				= ТекстXML.ПолучитьАтрибут("A09");
	Широта	 				= ТекстXML.ПолучитьАтрибут("A010");
	
	ОбъектСпр.Наименование 				= НаименованиеКонтрагента;
	ОбъектСпр.НаименованиеПолное 		= НаименованиеКонтрагента;
	ОбъектСпр.Партнер					= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "Партнеры");
	ОбъектСпр.ЮрФизЛицо 				= Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОбъектСпр.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОбъектСпр.ОбменДанными.Загрузка 	= Ложь;
	
	Если Не ЗначениеЗаполнено(ОбъектСпр.ГоловнойКонтрагент) И Не ОбъектСпр.ОбособленноеПодразделение Тогда
		ОбъектСпр.ГоловнойКонтрагент = ?(ЭтоНовыйОбъект, ОбъектСпр.ПолучитьСсылкуНового(), ОбъектСпр.Ссылка);
	КонецЕсли;
	
	стррДопСвойств = Новый Структура("Долгота, Широта", Долгота, Широта); // sd_25082017
	
	Результат = ЗаписьСправочника(ОбъектСпр, стррДопСвойств, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	Представление    = ТекстXML.ПолучитьАтрибут("A06");

	Если ИдКонтактноеЛицо <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаПартнеров");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтактноеЛицо)); // sd_25082017
		КонецЕсли;
	ИначеЕсли ИдКонтрагент <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, "Партнеры");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтрагент)); // sd_25082017
		КонецЕсли;
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдТорговаяТочка, "Контрагенты");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдТорговаяТочка)); // sd_25082017
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ТипКИ = ПолучитьЗначениеПеречисленияПоИдентификатору("ТипыКонтактнойИнформации", ИдТип);
	ВидКИ = СсылкаИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	Если ТипКИ = "" Или ВидКИ.Пустая() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Значит, скорее всего, объект контактной информации еще не был загружен.
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		
		Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
			ТЗ = Новый ТаблицаЗначений();
			ТЗ.Колонки.Добавить("ОбъектСпр");
			ТЗ.Колонки.Добавить("ИдЭлемента");
			ТЗ.Колонки.Добавить("Тип");
			ТЗ.Колонки.Добавить("Вид");
			ТЗ.Колонки.Добавить("Представление");
			ЗагружаемыеОбъекты.Вставить("ТЗКонтактнаяИнформация", ТЗ);
		КонецЕсли;
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Добавить();
		СтрокаТ.ОбъектСпр		= ОбъектСпр;
		СтрокаТ.ИдЭлемента     	= ИдЭлемента;
		СтрокаТ.Тип            	= ТипКИ;
		СтрокаТ.Вид            	= ВидКИ;
		СтрокаТ.Представление  	= Представление;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектСпр = ТекОбъект.ПолучитьОбъект();
	
	Если ОбъектСпр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тчКИ = ОбъектСпр.КонтактнаяИнформация;  		
	Отбор = Новый Структура("Тип, Вид", ТипКИ, ВидКИ);
	
	мСтрокТ = тчКИ.НайтиСтроки(Отбор); 
	
	Если мСтрокТ.Количество() = 0 Тогда
		СтрокаТЧ = тчКИ.Добавить();						
	Иначе  						
		СтрокаТЧ = мСтрокТ[0];
	КонецЕсли;
	
	СтрокаТЧ.Тип		   = ТипКИ;	
	СтрокаТЧ.Вид 		   = ВидКИ;	
	СтрокаТЧ.Представление = Представление;
	
	Результат = ЗаписьСправочника(ОбъектСпр, Неопределено, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	НаименованиеКЛ	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	ДатаРождения 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A02"));
	ИдКонтрагент    = ТекстXML.ПолучитьАтрибут("A03");
	Комментарий		= ТекстXML.ПолучитьАтрибут("A05");
	
	Если ИдКонтрагент <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, "Партнеры", Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		Текст = "Не найден владелец контактного лица: " + Строка(НаименованиеКЛ) + ". Загрузка не будет выполнена!";;
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", ОбъектСпр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектСпр.Владелец 				= ТекОбъект;
	ОбъектСпр.Наименование 		 	= НаименованиеКЛ;
	ОбъектСпр.ДатаРождения			= ДатаРождения;
	ОбъектСпр.ДатаРегистрацииСвязи  = ТекущаяДата();
	ОбъектСпр.Автор  				= ВыбНастройкиАгента.Пользователь;
	ОбъектСпр.Комментарий   		= Комментарий;
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Результат = ЗаписьСправочника(ОбъектСпр, Неопределено, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты)
	
	Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТ Из ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация Цикл 
		
		ОбъектСпр = СтрокаТ.ОбъектСпр.ПолучитьОбъект();
		
		Если ОбъектСпр = Неопределено Тогда
			Продолжить;
		КонецЕсли;          
		
		Тип 		  = СтрокаТ.Тип;
		Вид 		  = СтрокаТ.Вид;
		Представление = СтрокаТ.Представление;
		ИдЭлемента 	  = СтрокаТ.ИдЭлемента;
		  				
		тчКИ = ОбъектСпр.КонтактнаяИнформация;  		
		Отбор = Новый Структура("Тип, Вид", Тип, Вид);
		
		мСтрокТ = тчКИ.НайтиСтроки(Отбор); 
		
		Если мСтрокТ.Количество() = 0 Тогда
			СтрокаТЧ = тчКИ.Добавить();						
		Иначе  						
			СтрокаТЧ = мСтрокТ[0];
		КонецЕсли;
		
		СтрокаТЧ.Тип		   = Тип;	
		СтрокаТЧ.Вид 		   = Вид;	
		СтрокаТЧ.Представление = Представление;	  
		
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
			Текст = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
			Возврат;
		КонецЕсли;
		
		Текст = "Записана контактная информация для объекта: " + ОбъектСпр;
		ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
		
		Если ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Найти(ИдЭлемента, "Идентификатор") = Неопределено Тогда 
			СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлемента;
			СтрокаТ.ИдВидСправочникаМТ	= "85B62882-0156-4881-85BA-B8FEF05C867B"; // идентификатор (GUID) вида справочника в МТ
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Очистить();
	
КонецПроцедуры

// ЗагрузкаСправочников
#КонецОбласти

#Область ЗагрузкаДокументов

Процедура ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты)

	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "DOCUMENTS" Или Имя = "DOCUMENT" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдВидДокументаМТ = Новый УникальныйИдентификатор(ИдДокXML); // gi_170902
			ВидДокумента = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Истина, "Документ");
			Если ВидДокумента = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;			

		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ);
				ИначеЕсли Имя = "KILLEDS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "DOCUMENT" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьДокументы

Функция ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

	ЗагрузкаВВидеЗаказа = (ОбъектДок.Метаданные().Имя = "ЗаказКлиента");
	
	стррДокумент = ОбщиеРеквизитыДокумента();
	стррДокумент.ВидДокумента 	= "Заказ";
	стррДокумент.Номер 			= ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррДокумент.Дата 			= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДокумент.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A02");
	стррДокумент.ИдКлиента		= ТекстXML.ПолучитьАтрибут("A03");
	стррДокумент.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A05");
	стррДокумент.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A08"));
	стррДокумент.Комментарий 	= ТекстXML.ПолучитьАтрибут("A011");
	стррДокумент.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A012");
	стррДокумент.Широта 		= ТекстXML.ПолучитьАтрибут("A014");
	стррДокумент.Долгота 		= ТекстXML.ПолучитьАтрибут("A015");
	стррДокумент.ДатаНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	стррДокумент.ДатаОкончания 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A06"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A07"), "ВидыЦен");
	ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
	ДатаДоставки 		= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ИдМерчендайзинга	= ТекстXML.ПолучитьАтрибут("A013");
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A019")); 
	Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "Склады");
	ПометкаУдаления 	= Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));

	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;

	ДокМенеджер = Документы.ЗаказКлиента;
	Если ИспользоватьПунктыРазгрузки Тогда
		стррДокумент.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A04");
		стррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки, Договор");
	Иначе 
		стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррДокумент, ДокМенеджер, стррОбязательныеПоля);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);

	ОбъектДок.Склад = Склад;
	ОбъектДок.ФормаОплаты = ВидОплаты;
	ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");

	Если ЗначениеЗаполнено(СтатусЗаказовКлиентов) Тогда
	    СтатусЗаказа = СтатусЗаказовКлиентов;
	Иначе	
		мДопустимыеСтатусы = ?(ПоколениеКонфигурации(">=УТ_11.2"), Документы.ЗаказКлиента.ДопустимыеСтатусыВводаНаОсновании(), Новый Массив);
		СтатусЗаказа = ?(мДопустимыеСтатусы.Количество() > 0, мДопустимыеСтатусы[0], Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	КонецЕсли; 
	
	Если ЗагрузкаВВидеЗаказа Тогда
		ОбъектДок.Приоритет = ?(ПоколениеКонфигурации(">=УТ_11.1.10"), 
			Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Справочники.Приоритеты.ПустаяСсылка()), Перечисления.Приоритеты.Низкий);
		ОбъектДок.ЖелаемаяДатаОтгрузки = ДатаДоставки;
		ОбъектДок.ДатаОтгрузки = ДатаДоставки;
	КонецЕсли;
	
	ОбъектДок.Статус = СтатусЗаказа;

	Соглашение = ОбъектДок.Соглашение;
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
			ОбъектДок.Склад = Соглашение.Склад;
		КонецЕсли;
		ВалютаВзаиморасчетов = Соглашение.Валюта;
		ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
		ОбъектДок.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
		Если ПоколениеКонфигурации("<УТ_11.3") Тогда
			ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // в конфигурациях < 11.3, в названии процедуры английская "C"
		Иначе
			ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // в конфигурациях >= 11.3, в названии процедуры русская "C"
		КонецЕсли;

		Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда
			Если ЕстьРеквизитОбъекта("ГрафикОплаты", ОбъектДок) Тогда
				ОбъектДок.ГрафикОплаты = Соглашение.ГрафикОплаты;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) Тогда
				ОбъектДок.ФормаОплаты = Соглашение.ГрафикОплаты.ФормаОплаты;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗагрузкаВВидеЗаказа Тогда
			ОбъектДок.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, Неопределено);
		ИначеЕсли ЕстьРеквизитОбъекта("БанковскийСчетОрганизации", ОбъектДок) Тогда
			ОбъектДок.БанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, Неопределено);
		КонецЕсли;

		ОбъектДок.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ОбъектДок.Контрагент, , ОбъектДок.БанковскийСчетКонтрагента);
		Если гКонфигурация <> "УТ_UA" Тогда
			ОбъектДок.НалогообложениеНДС = Соглашение.НалогообложениеНДС;
		КонецЕсли;
		ОбъектДок.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
		ОбъектДок.ГруппаФинансовогоУчета = Соглашение.ГруппаФинансовогоУчета;
		
		Если ПоколениеКонфигурации("<=УТ_11.2.2") Тогда
			ОбъектДок.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
				ОбъектДок.Организация, ОбъектДок.ФормаОплаты, Справочники.Кассы.ПустаяСсылка(), ОбъектДок.Валюта);
		Иначе			
			стррПараметры = Новый Структура;
			стррПараметры.Вставить("Организация", ОбъектДок.Организация);
			стррПараметры.Вставить("ФормаОплаты", ОбъектДок.ФормаОплаты);
			стррПараметры.Вставить("Касса", Справочники.Кассы.ПустаяСсылка());
			стррПараметры.Вставить("Валюта", ОбъектДок.Валюта);
			стррПараметры.Вставить("НаправлениеДеятельности", ОбъектДок.НаправлениеДеятельности);
			ОбъектДок.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(стррПараметры);
		КонецЕсли;

		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ОбъектДок, ОбъектДок.ХозяйственнаяОперация, ВалютаВзаиморасчетов);
		Если Не Договор = ОбъектДок.Договор Тогда
			ОбъектДок.Договор = Договор;
			ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчет, ОбъектДок.БанковскийСчетКонтрагента);
		КонецЕсли;
	Иначе
		ОрганизацияДоИзменения = ОбъектДок.Организация;
		ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию();
		ОбъектДок.Организация = ОрганизацияДоИзменения;
		Если Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
			ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;
		Если гКонфигурация <> "УТ_UA" Тогда
			Если Не ЗначениеЗаполнено(ОбъектДок.НалогообложениеНДС) Тогда
				ОбъектДок.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Дата);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);
	ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Товары.Очистить();
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки," 
		+ " Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,"
		+ " ПроцентАвтоматическойСкидки, СтатусУказанияСерий";
		
	Если ЗагрузкаВВидеЗаказа Тогда
		ПоляСтруктуры = ПоляСтруктуры + ", ДатаОтгрузки, ПричинаОтмены, Содержание";
	КонецЕсли;

	ВспомогательныеПоля = "ХарактеристикиИспользуются, Отменено, ТипНоменклатуры, ВариантОформленияПродажи, СуммаОтменено, СуммаНДСОтменено,"
		+ " СуммаСНДСОтменено, СуммаАвтоматическойСкидкиОтменено, СуммаРучнойСкидкиОтменено";
	ИтоговыеПоляСтруктуры = ПоляСтруктуры + ", " + ВспомогательныеПоля;
	
	ИдТЧТовары = НРег("0738E61B-F06F-464A-8483-4249E0254819"); // идентификатор ТЧ "Товары" у Заказа в МТ 2.0
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	
	ЗаполнятьХарактеристики = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьХарактеристикуПоВладельцу,ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	ЗадействоватьНалогообложениеНДС(СтруктураДействий, ОбъектДок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));	
	СтруктураЗависимыхРеквизитов = Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураЗависимыхРеквизитов);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок));
	
	Если ЗагрузкаВВидеЗаказа Тогда
		Если гКонфигурация = "КА" Тогда
			СтруктураДействий.Вставить("ЗаполнитьСодержание", Новый Структура("ЗаполнятьДляВсехУслуг", Ложь));
		Иначе	
			СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(ОбъектДок, Ложь));
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗагрузкиЗаказов = "СоздаватьНаОснованииРеализацию" Тогда // этот режим сейчас не поддерживается
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ИначеЕсли ЗагрузкаВВидеЗаказа Тогда
		ВариантОбеспечения = УстановитьОбеспечениеЗаказа();
	Иначе
		ВариантОбеспечения = Неопределено; 
	КонецЕсли;
	
	//СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ОбъектДок.Склад);	
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");

				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ПолучитьХарактеристикуНоменклатуры(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				ТекСклад 			= Справочники.Склады.ПустаяСсылка();

				Если ИспользоватьСкладыВТЧ Тогда
					ТекСклад = СсылкаИзСправочника(ИдСклад, "Склады");
					Если Не ТекСклад.Пустая() Тогда
						СкладГруппа = ТекСклад.Родитель;
						Если Не СкладГруппа.Пустая() Тогда
							Если Не СкладГруппа.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
								ОбъектДок.Склад = СкладГруппа;
							КонецЕсли;
						Иначе
							ОбъектДок.Склад = ТекСклад;	
						КонецЕсли;

						Если Не ЗагрузкаВВидеЗаказа Тогда
							СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
							Если Не СтруктураОтветственного = Неопределено Тогда
								ОбъектДок.Отпустил = СтруктураОтветственного.Ответственный;
								ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ТекСклад.Пустая() Тогда
					ТекСклад = ОбъектДок.Склад;
				КонецЕсли;

				НоваяСтрока = ОбъектДок.Товары.Добавить();
				ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ); // СД_260617 доработать для ограничения скидки по агенту.
				РежимВыгрузкиНоменклатуры = РежимВыгрузкиНоменклатуры;
				СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена,
					Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки);
					
				СтруктураЗаполнения.ХарактеристикиИспользуются = ЗаполнятьХарактеристики;
				СтруктураЗаполнения.Отменено = Ложь;
					
				Если ЗагрузкаВВидеЗаказа Тогда
					СтруктураЗаполнения.ДатаОтгрузки = ДатаДоставки;
				КонецЕсли;
				
				СтруктураДействий.ПроверитьХарактеристикуПоВладельцу = ТекХарактеристика;
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
				
				Если ВариантОбеспечения <> Неопределено И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.ВариантОбеспечения = ВариантОбеспечения;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если ЗагрузкаВВидеЗаказа Тогда
		ОбъектДок.ЗаполнитьЭтапыГрафикаОплаты();
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок, стррДокумент, ЭтоНовыйОбъект);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		Иначе
			//Если РежимЗагрузкиЗаказов = СоздаватьНаОснованииРеализацию Тогда
			//	ВвестиРеализациюНаОснованииЗаявки(ОбъектДок);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументРеализация(ТекстXML, ОбъектДок, ЭтоНовыйОбъект)

	стррДокумент = ОбщиеРеквизитыДокумента();
	стррДокумент.ВидДокумента 	= "Реализация";
	стррДокумент.Номер 			= ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррДокумент.Дата 			= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДокумент.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррДокумент.ИдКлиента		= ТекстXML.ПолучитьАтрибут("A02");
	стррДокумент.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A04");
	стррДокумент.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	стррДокумент.Комментарий 	= ТекстXML.ПолучитьАтрибут("A09");
	стррДокумент.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A010");
	стррДокумент.Широта 		= ТекстXML.ПолучитьАтрибут("A012");
	стррДокумент.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	стррДокумент.ДатаНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A016"));
	стррДокумент.ДатаОкончания 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A05"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "ВидыЦен");
	ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A08"));
	//ДатаДоставки 		= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ИдДокОснования 	 	= ТекстXML.ПолучитьАтрибут("A011");
	ИдМерчендайзинга	= ТекстXML.ПолучитьАтрибут("A015");
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A018")); 
	//Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "Склады");
	ПометкаУдаления 	= Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	ВалютаУчета			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
	
	ДокМенеджер = Документы.РеализацияТоваровУслуг;
	
	Если ИспользоватьПунктыРазгрузки Тогда
		стррДокумент.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A03");
		стррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки, Договор");
	Иначе 
		стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррДокумент, ДокМенеджер, стррОбязательныеПоля);
	
	ОснованиеЗаказ = СсылкаИзДокумента(ИдДокОснования, "ЗаказКлиента");
	Если ЗначениеЗаполнено(ОснованиеЗаказ) Тогда
		ОбъектДок.ЗаказКлиента = ОснованиеЗаказ;
		ОбъектДок.РеализацияПоЗаказам = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбНастройкиАгента.ОсновнойСклад) Тогда 
		ОбъектДок.Склад = ВыбНастройкиАгента.ОсновнойСклад;
	КонецЕсли;
	
	ОбъектДок.Валюта = ВалютаУчета;
	
	Соглашение = ОбъектДок.Соглашение;
	Если ЗначениеЗаполнено(Соглашение) Тогда	
		
		ОбъектДок.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
		Если ПоколениеКонфигурации("<УТ_11.3") Тогда
			ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // в конфигурациях < 11.3, в названии процедуры английская "C"
		Иначе
			ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // в конфигурациях >= 11.3, в названии процедуры русская "C"
		КонецЕсли;
		ОбъектДок.Валюта = ВалютаУчета;
		
		ХозяйственнаяОперацияДоговора = ?(
			ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			ОбъектДок.ХозяйственнаяОперация
		);
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ОбъектДок, ХозяйственнаяОперацияДоговора, ОбъектДок.ВалютаВзаиморасчетов);
		Если Не Договор = ОбъектДок.Договор Тогда
			ОбъектДок.Договор = Договор;
			ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если гКонфигурация <> "УТ_UA" Тогда
			Если ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда		
				Если ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
					ОбъектДок.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.РеализацияТоваровУслуг.ПараметрыУказанияСерий(ОбъектДок));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДок,ПараметрыУказанияСерий);
		
	Иначе 
		// При заполнении по условиям продаж организация может замениться на другую.
		// Сохраним ее, а потом подставим.
		ОрганизацияДоИзменения = ОбъектДок.Организация;
		ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию();
		ОбъектДок.Организация = ОрганизацияДоИзменения;
		ОбъектДок.Валюта = ВалютаУчета;
		
	КонецЕсли;
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
	Если Не СтруктураОтветственного = Неопределено Тогда
		ОбъектДок.Отпустил = СтруктураОтветственного.Ответственный;
		ОбъектДок.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	Если Не ОбъектДок.РеализацияПоЗаказам Тогда		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ОбъектДок.Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ОбъектДок.Склад, СкладГруппа, ОбъектДок.Товары, Истина); 		
	КонецЕсли;
	
	ОбъектДок.Основание   = "";		
	ОбъектДок.ФормаОплаты = ВидОплаты;
	ОбъектДок.Статус	  = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;	
				
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки";
				
	ДопПоля = "Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки," + 
			  "ПроцентАвтоматическойСкидки, СтатусУказанияСерий, СуммаВзаиморасчетов, ЗаказКлиента";
	
	ВспомогательныеПоля = "ХарактеристикиИспользуются, ТипНоменклатуры";
	
	ИтоговыеПоляСтруктуры = ПоляСтруктуры + "," + ВспомогательныеПоля + "," + ДопПоля;
	
	ИдТЧТовары = НРег("E4D61E0A-1D62-48D7-B70C-BCBA935D377A"); // идентификатор ТЧ "Товары" у Реализации в МТ 2.0
	
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	
	ЗаполнятьХарактеристики = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьХарактеристикуПоВладельцу,ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	ЗадействоватьНалогообложениеНДС(СтруктураДействий, ОбъектДок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок));
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ПолучитьХарактеристикуНоменклатуры(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				ТекСклад 			= Справочники.Склады.ПустаяСсылка();
				
				Если ИспользоватьСкладыВТЧ Тогда
					ТекСклад = СсылкаИзСправочника(ИдСклад, "Склады");
					Если Не ТекСклад.Пустая() Тогда
						СкладГруппа = ТекСклад.Родитель;
						Если Не СкладГруппа.Пустая() Тогда
							Если Не СкладГруппа.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
								ОбъектДок.Склад = СкладГруппа;
							КонецЕсли;
						Иначе
							ОбъектДок.Склад = ТекСклад;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ТекСклад.Пустая() Тогда
					ТекСклад = ОбъектДок.Склад;
				КонецЕсли;
				
				НоваяСтрока = ОбъектДок.Товары.Добавить();
				ПроцентРучнойСкидки	= ?(СкидкаТЧ = 0, ОбщаяСкидка, СкидкаТЧ);
				РежимВыгрузкиНоменклатуры = РежимВыгрузкиНоменклатуры;
				СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена,
					Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки);
					
				СтруктураЗаполнения.ХарактеристикиИспользуются = ЗаполнятьХарактеристики;
				
				СтруктураДействий.ПроверитьХарактеристикуПоВладельцу = ТекХарактеристика;
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;

				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок, стррДокумент, ЭтоНовыйОбъект);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьДокументПеремещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект) // sd_22082017
	
	стррДокумент = ОбщиеРеквизитыДокумента();
	стррДокумент.ВидДокумента 	= "ПеремещениеТоваров";
	стррДокумент.Номер 			= ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррДокумент.Дата 			= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДокумент.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	стррДокумент.ИдКатегории	= ТекстXML.ПолучитьАтрибут("A02");
	стррДокумент.Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	стррДокумент.Широта 		= ТекстXML.ПолучитьАтрибут("A07");
	стррДокумент.Долгота 		= ТекстXML.ПолучитьАтрибут("A08");
	стррДокумент.ДатаНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	стррДокумент.ДатаОкончания 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A011"));
	
	СкладОтправитель = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A03"), "Склады");
	СкладПолучатель	 = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "Склады");
	ВидЦены			 = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A09"), "ВидыЦен");
	
	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Ответственный = ВыбНастройкиАгента.Пользователь;
	
	ДокМенеджер = Документы.ПеремещениеТоваров;
	
	стррОбязательныеПоля = Новый Структура("Организация");
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррДокумент, ДокМенеджер, стррОбязательныеПоля);
	
	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		Текст = "В документе Перемещение товаров № " + стррДокумент.Номер + " от " + стррДокумент.Дата + "  не указан склад-отправитель!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	Иначе 
		ОбъектДок.СкладОтправитель = СкладОтправитель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		Текст = "В документе Перемещение товаров № " + стррДокумент.Номер + " от " + стррДокумент.Дата + "  не указан склад-получатель!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	Иначе 
		ОбъектДок.СкладПолучатель = СкладПолучатель;
	КонецЕсли;
	
	ОбъектДок.Статус   				= Перечисления.СтатусыПеремещенийТоваров.Принято;
	ОбъектДок.ВидЦены  				= ВидЦены;
	ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Количество";
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	
	ИдТЧТовары = НРег("3097F10A-BEE6-4A76-AD7A-D4663C9B73EC"); // идентификатор ТЧ "Товары" у Перемещения в МТ 2.0
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ПолучитьХарактеристикуНоменклатуры(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				
				НоваяСтрока = ОбъектДок.Товары.Добавить();
				
				СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Количество);
				
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок, стррДокумент, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

//!!! Переделать! Можно сразу загружать кассовый ордер в БД и после проставлять ссылки.
Процедура ЗагрузитьДокументКассовыйОрдер(ТекстXML, ЗагружаемыеОбъекты, ОбъектДок, ЭтоНовыйОбъект)

	стррДокумент = ОбщиеРеквизитыДокумента();
	стррДокумент.ВидДокумента 	= "Касса";
	стррДокумент.Номер 			= ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	стррДокумент.Дата			= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	стррДокумент.ИдОрганизации	= ТекстXML.ПолучитьАтрибут("A01");
	стррДокумент.ИдКлиента		= ТекстXML.ПолучитьАтрибут("A02");
	стррДокумент.ИдСоглашения 	= ТекстXML.ПолучитьАтрибут("A04");
	стррДокумент.Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	стррДокумент.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	стррДокумент.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A011");
	стррДокумент.Широта 		= ТекстXML.ПолучитьАтрибут("A012");
	стррДокумент.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	стррДокумент.ДатаНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	стррДокумент.ДатаОкончания 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A015"));

	ИдДокОснования	= ТекстXML.ПолучитьАтрибут("A09");
	ВидОплаты 		= ТекстXML.ПолучитьАтрибут("A016");
	ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
	Если ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДокМенеджер = Документы.ПриходныйКассовыйОрдер;
	Иначе
		ДокМенеджер = Документы.РасходныйКассовыйОрдер;
	КонецЕсли;
	
	стррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	ЗаполнитьОсновныеПараметрыДокумента(ОбъектДок, стррДокумент, ДокМенеджер, стррОбязательныеПоля);

	ОбъектДок.Кассир = ВыбНастройкиАгента.Пользователь;
	УстановитьКассуВКассовомОрдере(ОбъектДок);
	ОбъектДок.Валюта = ОбъектДок.Касса.ВалютаДенежныхСредств;

	Если ИспользоватьПунктыРазгрузки Тогда
		Клиент	 		 = СсылкаИзСправочника(стррДокумент.ИдКлиента, "Контрагенты"); 
		Соглашение 		 = СсылкаИзСправочника(стррДокумент.ИдСоглашения, "ДоговорыКонтрагентов");
	Иначе 
		Клиент	 		 = СсылкаИзСправочника(стррДокумент.ИдКлиента, "Партнеры"); 
		Соглашение 		 = СсылкаИзСправочника(стррДокумент.ИдСоглашения, "СоглашенияСКлиентами");
	КонецЕсли;
	
	УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ОбъектДок);
	УстановитьБанковскийСчетВКассовомОрдере(ОбъектДок);
	ОбъектДок.Комментарий = стррДокумент.Комментарий;
	// Заполняем строку табличной части "Расшифровка платежа"
	Если ОбъектДок.РасшифровкаПлатежа.Количество() > 0 Тогда
		СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа[0];
	Иначе
		СтрокаПлатеж = ОбъектДок.РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	Если ИспользоватьПунктыРазгрузки Тогда
		СтрокаПлатеж.Партнер	= Клиент.Партнер;	
	Иначе 
		СтрокаПлатеж.Партнер	= Клиент;
	КонецЕсли;
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ОбъектДок.СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.Сумма 			= ОбъектДок.СуммаДокумента;
	СтрокаПлатеж.ВалютаВзаиморасчетов = ОбъектДок.Валюта;
	СтрокаПлатеж.СуммаВзаиморасчетов = ОбъектДок.СуммаДокумента;
	СтрокаПлатеж.Подразделение 	= ОбъектДок.Кассир[РеквизитОбъекта("Спр_Пользователи_Подразделение")];
	тзКассовыеДокументы  	= ЗагружаемыеОбъекты.тзКассовыеДокументы;

	НоваяЗапись = тзКассовыеДокументы.Добавить();
	НоваяЗапись.Документ 		= ОбъектДок;
	НоваяЗапись.стррДокумент 	= стррДокумент;
	НоваяЗапись.ЭтоНовыйОбъект 	= ЭтоНовыйОбъект;
	НоваяЗапись.ИдОснования 	= ИдДокОснования;
	ЗагружаемыеОбъекты.тзКассовыеДокументы = тзКассовыеДокументы;

КонецПроцедуры

Процедура УстановитьБанковскийСчетВКассовомОрдере(ДокументОбъект)
	
	Если гКонфигурация = "КА" Тогда
		СтррПараметры = Новый Структура;
		СтррПараметры.Вставить("Организация", ДокументОбъект.Организация);
		СтррПараметры.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
		СтррПараметры.Вставить("БанковскийСчет", Неопределено);
		СтррПараметры.Вставить("Валюта", ДокументОбъект.Валюта);
		СтррПараметры.Вставить("НаправлениеДеятельности", ДокументОбъект.ХозяйственнаяОперация);
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтррПараметры);
		
	ИначеЕсли ПоколениеКонфигурации("<=УТ_11.2.2") Тогда	
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДокументОбъект.Организация, Перечисления.ФормыОплаты.Наличная, , ДокументОбъект.Валюта);
			
	Иначе 
		СтррПараметры = Новый Структура;
		СтррПараметры.Вставить("Организация", ДокументОбъект.Организация);
		СтррПараметры.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
		СтррПараметры.Вставить("БанковскийСчет", Неопределено);
		СтррПараметры.Вставить("Валюта", ДокументОбъект.Валюта);
		СтррПараметры.Вставить("НаправлениеДеятельности", ДокументОбъект.ХозяйственнаяОперация);
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтррПараметры);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ДокументОбъект)

	СтррРеквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ДокументОбъект.Контрагент);
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДокументОбъект.ПринятоОт = СтррРеквизиты.Наименование;
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	Иначе
		ДокументОбъект.Выдать = СтррРеквизиты.Наименование;
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
		ДокументОбъект.СтатьяДвиженияДенежныхСредств =  Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКассуВКассовомОрдере(ДокументОбъект)

	Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Выборка = Справочники.Кассы.Выбрать( , ДокументОбъект.Организация);
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления И Выборка.ВалютаДенежныхСредств = Валюта Тогда
			ДокументОбъект.Касса = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
		Текст = "Не найдено ни одной кассы для организации """ + ДокументОбъект.Организация + """. Выберите кассу в документе вручную!";
		ОповеститьОСобытии(Текст,, ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОсновныеПараметрыДокумента(Док, СтруктураДокументаВМУ, Менеджер, СтруктураПолей)

	ИдФирмы 	 = СтруктураДокументаВМУ.ИдОрганизации;
	ИдКлиента 	 = СтруктураДокументаВМУ.ИдКлиента;
	ИдСоглашения = СтруктураДокументаВМУ.ИдСоглашения;
	ВидДок 		 = СтруктураДокументаВМУ.ВидДокумента;
	НомерДок 	 = Строка(СтруктураДокументаВМУ.Номер);
	ДатаДок 	 = СтруктураДокументаВМУ.Дата;
	Комментарий  = СтруктураДокументаВМУ.Комментарий;
	ПредставлениеДокВМУ = ВидДок + " № " + НомерДок + " от " + ДатаДок;
	
	РеквизитыДок = Док.Метаданные().Реквизиты;

	Если СтруктураПолей.Свойство("Организация") Тогда
		Если ЭтоПустойИдентификатор(ИдФирмы) Тогда
			Текст = "В документе """ + ПредставлениеДокВМУ + """ не указана организация!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Иначе
			Организация = СсылкаИзСправочника(ИдФирмы, "Организации");
			Если РеквизитыДок.Найти("Организация") <> Неопределено Тогда
				Док.Организация = Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Партнер") Тогда
		Если ЭтоПустойИдентификатор(ИдКлиента) Тогда
			Текст = "В документе """ + ПредставлениеДокВМУ + """ не указан партнер!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Иначе
			Партнер = СсылкаИзСправочника(ИдКлиента, "Партнеры");
			Если РеквизитыДок.Найти("Партнер") <> Неопределено Тогда
				Док.Партнер = Партнер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураПолей.Свойство("Соглашение") Тогда
		Если ЭтоПустойИдентификатор(ИдСоглашения) И ИспользоватьСоглашения Тогда 
			Текст = "В документе """ + ПредставлениеДокВМУ + """ не указано соглашение! Будет проставлено соглашение по умолчанию!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Иначе
			Если РеквизитыДок.Найти("Соглашение") <> Неопределено Тогда
				Если ТипЗнч(Док) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					Док.Соглашение = СсылкаИзСправочника(ИдСоглашения, "СоглашенияСПоставщиками");
				Иначе
					Док.Соглашение = СсылкаИзСправочника(ИдСоглашения, "СоглашенияСКлиентами");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураПолей.Свойство("Контрагент") И РеквизитыДок.Найти("Контрагент") <> Неопределено Тогда
		Если ИспользоватьПунктыРазгрузки Тогда
			Если ЭтоПустойИдентификатор(ИдКлиента) Тогда
				Текст = "В документе """ + ПредставлениеДокВМУ + """ не указан контрагент!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
			Иначе
				Контрагент = СсылкаИзСправочника(ИдКлиента, "Контрагенты");
				Док.Контрагент = Контрагент;
				Если РеквизитыДок.Найти("Партнер") <> Неопределено Тогда 
					Док.Партнер = Контрагент.Партнер;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				ЕстьРеквизитПартнер = РеквизитыДок.Найти("Партнер") <> Неопределено;
				Если Не ЕстьРеквизитПартнер И ЗначениеЗаполнено(Партнер) Тогда
					Док.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
				ИначеЕсли ЕстьРеквизитПартнер И ЗначениеЗаполнено(Док.Партнер) Тогда
					ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Док.Партнер, Док.Контрагент);
				Иначе
					Текст = "В документе """ + ПредставлениеДокВМУ + """ не указан контрагент!";
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыДок.Найти("Менеджер") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Док.Менеджер) Тогда
			Док.Менеджер = ВыбНастройкиАгента.Пользователь;
		КонецЕсли;
		Если РеквизитыДок.Найти("Подразделение") <> Неопределено Тогда
			Док.Подразделение = Док.Менеджер[РеквизитОбъекта("Спр_Пользователи_Подразделение")];
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыДок.Найти("Ответственный") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Док.Ответственный) Тогда
			Док.Ответственный = ВыбНастройкиАгента.Пользователь;
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыДок.Найти("Комментарий") <> Неопределено Тогда
		Док.Комментарий = Комментарий;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("ПунктРазгрузки") И РеквизитыДок.Найти("алкПунктРазгрузки") <> Неопределено Тогда
		ИдПунктаРазгрузки = СтруктураДокументаВМУ.ИдПунктаРазгрузки;
		Если ЭтоПустойИдентификатор(ИдПунктаРазгрузки) Тогда
			Текст = "В документе """ + ПредставлениеДокВМУ + """ не указан пункт разгрузки!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Иначе
			ПунктРазгрузки = СсылкаИзСправочника(ИдПунктаРазгрузки, "алкПунктыРазгрузки");
			Док.алкПунктРазгрузки = ПунктРазгрузки;
			Если РеквизитыДок.Найти("алкЛицензияКонтрагента") <> Неопределено Тогда 
				Док.алкЛицензияКонтрагента = ПунктРазгрузки.алкОсновнаяЛицензия;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПолей.Свойство("Договор") Тогда
		Если ЭтоПустойИдентификатор(ИдСоглашения) Тогда
			Текст = "В документе """ + ПредставлениеДокВМУ + """ не указан договор!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Иначе
			Если РеквизитыДок.Найти("Договор") <> Неопределено Тогда
				Док.Договор = СсылкаИзСправочника(ИдСоглашения, "ДоговорыКонтрагентов");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//Если ЗагружатьДокументыСДатойКакВМУ.Получить() Тогда 
		Док.Дата = ДатаДок;
	//Иначе
	//	Если Не Док.Проведен Тогда
	//		Док.Дата = ТекущаяДата();
	//	КонецЕсли;
	//КонецЕсли;

	Если ЗначениеЗаполнено(НомерДок) 
		И ИспользоватьНумерациюЦБД Тогда
		Если Менеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = Менеджер.ПустаяСсылка() Тогда	
			Док.Номер = НомерДок;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураДокументаВМУ.Свойство("СуммаДокумента") Тогда
		Если РеквизитыДок.Найти("СуммаДокумента") <> Неопределено Тогда
			Док.СуммаДокумента = СтруктураДокументаВМУ.СуммаДокумента;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция загружает документ из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидДокумента - Строка - вид документа в 1С:Предприятии
//		ИдВидДокументаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если документ успешно записан в БД, иначе Ложь.
//  
Функция ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ)

	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Проведен 	= Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));
	Дата 		= Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	Номер 		= СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumberPrefix")) + СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	
	Если ВидДокумента = "Мерчендайзинг" Или ВидДокумента = "Посещение" Или ВидДокумента = "*ВнеплановыйМаршрут" Тогда // sd_20082017 добавил документ ВнеплановыйМаршрут.
		Текст = СтрШаблон_("Пропущена загрузка документа %1 N %2 от %3", ВидДокумента, Дата, Номер);
		ОповеститьОСобытии(Текст); 
		ТекстXML.Пропустить();
		Возврат Истина;
	КонецЕсли;

	ДокМенеджер = Документы[ВидДокумента];
	ПредставлениеДок = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	Если Не Проведен Тогда
		Текст = "Пропущена загрузка документа """ + ПредставлениеДок + " N " + Номер + " от " + Дата + """. Документ не проведен в мобильном приложении!";
		ОповеститьОСобытии(Текст); 
		ТекстXML.Пропустить();
		Возврат Истина;
	КонецЕсли;

	ЭтоНовыйОбъект = Истина;
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта);
	ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
	
	Если ОбъектДок = Неопределено И ВидДокумента = "ЗаказКлиента" Тогда // заказ не нашли, пытаемся найти заказ среди реализаций
		ОбъектДок = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(ИдОбъекта).ПолучитьОбъект();
	КонецЕсли;
	
	ПропускДокумента = Ложь;
	
	Если ОбъектДок = Неопределено Тогда // загружаем новый документ
		Если ВидДокумента = "ЗаказКлиента" Тогда 
			Если Не КонстантыПолучитьЗначение("ИспользоватьЗаказыКлиентов") Или РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда  // "Заказ" должны загрузить как "Реализацию"
				ДокМенеджер   = Документы.РеализацияТоваровУслуг;
				СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(ИдОбъекта); // заново устанавливаем ссылку из нового менеджера документов
			КонецЕсли;
		КонецЕсли;
		ОбъектДок = ДокМенеджер.СоздатьДокумент();
		ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
		ЭтоНовыйОбъект = Истина;
	Иначе
		Если Не ОбновлятьДокументыПриЗагрузке Тогда
			стррПараметры = Новый Структура("ВидДокумента,Номер,Дата,СсылкаНаОбъект", ПредставлениеДок, Номер, Дата, ОбъектДок.Ссылка);
			СообщитьОПропускеДокумента(стррПараметры);
			ТекстXML.Пропустить();
			ПропускДокумента = Истина;
			Результат = Истина;
		КонецЕсли;
		ОбъектДок.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;

	Если Не ПропускДокумента Тогда
		
		Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ВидДокумента = "ЗаказКлиента" Тогда
			Результат = ЗагрузитьДокументЗаказ(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер" Или ВидДокумента = "РасходныйКассовыйОрдер" Тогда
			ЗагрузитьДокументКассовыйОрдер(ТекстXML, ЗагружаемыеОбъекты, ОбъектДок, ЭтоНовыйОбъект); //!!!! переделать - загрузка сделана сначала в ТЗ, можно сразу грузить в БД!!!!
			Результат = Истина; // !!!! убрать после переделки
		ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			Результат = ЗагрузитьДокументРеализация(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда // sd_22082017
			Результат = ЗагрузитьДокументПеремещение(ТекстXML, ОбъектДок, ЭтоНовыйОбъект);
		Иначе
			Текст = "Пропущена загрузка документа ""%1(%2) № %3 от %4"". Загрузка таких документов не предусмотрена!";
			ОповеститьОСобытии(СтрШаблон_(Текст, ПредставлениеДок, ВидДокумента, Номер, Дата)); 
			ТекстXML.Пропустить();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат Тогда
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы.Добавить();
		СтрокаТ.Идентификатор 	 = ИдОбъекта; // идентификатор (GUID) документа
		СтрокаТ.ВидДокумента  	 = ОбъектДок.Метаданные().Имя;
		СтрокаТ.ИдВидДокументаМТ = ИдВидДокументаМТ; // идентификатор (GUID) вида документа в МТ
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОбщиеРеквизитыДокумента()
	
	Реквизиты = "ВидДокумента,Номер,Дата,ИдОрганизации,ИдКлиента,ИдСоглашения,СуммаДокумента,Комментарий," // основные реквизиты
		+ "Широта,Долгота,ДатаНачала,ДатаОкончания,ИдКатегории" // дополнительные реквизиты
		+ ?(ИспользоватьПунктыРазгрузки, ",ИдПунктаРазгрузки", "");
	
	Возврат Новый Структура(Реквизиты);
	
КонецФункции

Функция ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзмерения)

	ТекЕдиница = Неопределено;
	Попытка
		ГуидЕдиницаИзм = Новый УникальныйИдентификатор(ИдЕдиницыИзмерения);
	Исключение
		ГуидЕдиницаИзм = Неопределено;
	КонецПопытки;
	
	НазваниеСпрУпаковок = ?(ПоколениеКонфигурации(">=УТ_11.2"), "УпаковкиЕдиницыИзмерения", "УпаковкиНоменклатуры");

	Если ГуидЕдиницаИзм = ТекНоменклатура.УникальныйИдентификатор()  Тогда
		ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
	Иначе
		Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
			Если ТекНоменклатура.ИспользоватьУпаковки Тогда	
				ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
			КонецЕсли; 
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
			ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
		КонецЕсли; 
	КонецЕсли; 

	Если Не ЗначениеЗаполнено(ТекЕдиница) Или ТекЕдиница.Пустая() Тогда
		ТекЕдиница = ?(ТекНоменклатура.Пустая(), Справочники[НазваниеСпрУпаковок].ПустаяСсылка(), ТекНоменклатура.ЕдиницаИзмерения);	
	КонецЕсли;

	Возврат ТекЕдиница;
КонецФункции

Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт

	СимвРазделителяА15 = " ";
	СимвРазделителяМТ  = "T";

	Поз = Найти(ДатаВремя, "-");
	Если Поз <> 0 Тогда	 
		Год = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Возврат '00010101';
	КонецЕсли;

	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	Часы = 0;
	Минуты = 0;
	Секунды = 0;
	Если ПозПробела = 0 Тогда
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;

	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;

	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции

Процедура ЗадействоватьНалогообложениеНДС(СтруктураДействий, ОбъектДок)

	Если гКонфигурация = "УТ_UA" Тогда
		Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
	Иначе
		НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	

КонецПроцедуры

// ЗагрузкаДокументов
#КонецОбласти

#Область ЗагрузкаТреков

Процедура ЗагрузитьТрек(ФайлТрека, СсылкаМУ)

	ТекущаяДатаТрека = Неопределено; // текущая дата трека в виде строки "YYYY-MM-DD" (дата точек трека).
	стррДанные		 = Неопределено; 	
	ДатаВремяТочки	 = Неопределено;
	БылиИзменения 	 = Ложь;
	Сортировать		 = Ложь;

	ЧтениеТрека 	    = Новый ЧтениеТекста(ФайлТрека.ПолноеИмя);
	
	КаталогТрековАгента = КаталогФайловТрековАгента();
	
	СтрокаФайла	= ЧтениеТрека.ПрочитатьСтроку();
	
	Пока СтрокаФайла <> Неопределено Цикл
		
		ДатаВремяТочки = ТрекДатаИзСтроки(Лев(СтрокаФайла, 19)); // дата-время в виде строки "YYYY-MM-DD HH-MM-SS"
		Если ТекущаяДатаТрека <> НачалоДня(ДатаВремяТочки) Тогда
			Если БылиИзменения Тогда			
				ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать);
			КонецЕсли;
			ТекущаяДатаТрека = НачалоДня(ДатаВремяТочки);
			стррДанные = ТрекОткрытьФайл(ТекущаяДатаТрека, КаталогТрековАгента);
			тзТрек				= стррДанные.Трек;						
			ВремяНачалаТрека 	= стррДанные.ВремяНачала;
			ВремяОкончанияТрека = стррДанные.ВремяОкончания;
			БылиИзменения 	 = Ложь;
			Сортировать		 = Ложь;
		КонецЕсли;

		Если ДатаВремяТочки > ВремяОкончанияТрека Тогда
			стзТрек = тзТрек.Добавить();
			стзТрек.Время = ДатаВремяТочки;
			ТрекЗаполнитьРеквизитыСтроки(стзТрек, СтрокаФайла);
			БылиИзменения = Истина;	
		ИначеЕсли ДатаВремяТочки < ВремяНачалаТрека Тогда // изменено время в МУ?
			стзТрек = тзТрек.Добавить();
			стзТрек.Время = ДатаВремяТочки;
			ТрекЗаполнитьРеквизитыСтроки(стзТрек, СтрокаФайла);
			БылиИзменения = Истина;
			Сортировать	= Истина;			
		КонецЕсли;
		
		СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если БылиИзменения Тогда
		ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать);
	КонецЕсли; 
	
	Если ДатаВремяТочки <> Неопределено Тогда // есть дата и время последней точки трека, нужно ее запомнить для подтверждения.
		Имя = СДИмяФайлаДляМУ(СсылкаМУ);
		стррЗначения = СДПрочитать(Имя, Истина);
		стррЗначения.Вставить("ПоследнееВремяТрека", ДатаВремяТочки);
		СДЗаписать(Имя, стррЗначения);
	КонецЕсли; 

КонецПроцедуры

Процедура ТрекЗакрытьФайл(стррДанные, КаталогТрековАгента, Сортировать = Ложь)

	тзТрек = стррДанные.Трек;
	Если тзТрек.Количество() = 0 Тогда // пустой трек не записываем
		Возврат;
	КонецЕсли; 
	
	Если Сортировать Тогда
		тзТрек.Сортировать("Время");
	КонецЕсли; 
	
	стррДанные.ВремяНачала 		= тзТрек[0].Время;
	стррДанные.ВремяОкончания 	= тзТрек[тзТрек.Количество()-1].Время;
	ИмяФайла = ТрекИмяФайлаПоДате(стррДанные.ВремяНачала, КаталогТрековАгента);
	
	ЗначениеВФайл(ИмяФайла, стррДанные);

КонецПроцедуры

Функция ТрекОткрытьФайл(ДатаТочкиТрека, КаталогТрековАгента) Экспорт

	ИмяФайла = ТрекИмяФайлаПоДате(ДатаТочкиТрека, КаталогТрековАгента);
	Если ФайлСуществует(ИмяФайла) Тогда
		стррДанные = ЗначениеИзФайла(ИмяФайла);
	Иначе
		стррДанные = Новый Структура;
		стррДанные.Вставить("Версия", 1);
		стррДанные.Вставить("ВремяНачала", 		'00010101');
		стррДанные.Вставить("ВремяОкончания", 	'00010101');
		
		ТипДата	 = Новый ОписаниеТипов("Дата");
		ТипЧисло = Новый ОписаниеТипов("Число");
		
		тзТрек = Новый ТаблицаЗначений;
		тзТрек.Колонки.Добавить("Время", 	ТипДата);
		тзТрек.Колонки.Добавить("Широта", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Долгота", 	ТипЧисло);
		тзТрек.Колонки.Добавить("Скорость",	ТипЧисло);
		тзТрек.Колонки.Добавить("ИсточникСигнала",  ТипЧисло);
		
		стррДанные.Вставить("Трек", тзТрек);

	КонецЕсли; 
	
	Возврат стррДанные;

КонецФункции 

// процедура не заполняет перевый параметр строки (Время), т.к. время устанавливается перед вызовом процедуры.
Процедура ТрекЗаполнитьРеквизитыСтроки(стзТрек, Строка)
	
	Разделитель = Символы.Таб;
	
	НомерПараметра = 0;
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		СтрЗначение = Лев(Строка, Позиция - 1);
		Если НомерПараметра > 0 Тогда
			стзТрек[НомерПараметра] = ?(ПустаяСтрока(СтрЗначение), 0, Число(СтрЗначение));
		КонецЕсли; 
		Строка = Сред(Строка, Позиция + 1);
		Позиция = Найти(Строка, Разделитель);
		НомерПараметра = НомерПараметра + 1;
	КонецЦикла;
	
	стзТрек[НомерПараметра] = ?(ПустаяСтрока(Строка), 0, Число(Строка));
	
КонецПроцедуры	

Функция ТрекДатаИзСтроки(СтрокаТрека)

	СтрокаДаты = СтрЗаменить(Лев(СтрокаТрека, 19), "-", "");
	СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
	Возврат Дата(СтрокаДаты);

КонецФункции

Функция ТрекИмяФайлаПоДате(ДатаТрека, КаталогТрековАгента)

	Возврат КаталогТрековАгента + Формат(ДатаТрека, "ДФ=yyyyMMdd") + "_GPS.dat";
	
КонецФункции

// ЗагрузкаТреков
#КонецОбласти

Процедура СообщитьОПропускеДокумента(стррПараметры)

	Текст = "Пропущена загрузка документа """ + стррПараметры.ВидДокумента +
		""" № " + Строка(стррПараметры.Номер) + " от " + Строка(стррПараметры.Дата) +
		" - документ был загружен ранее.";
	СсылкаНаОбъект = Неопределено;
	стррПараметры.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);
	ОповеститьОСобытии(Текст,, СсылкаНаОбъект, "ТекущийАгент");

КонецПроцедуры

Процедура ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты)
	
	тзКассовыеДокументы = ЗагружаемыеОбъекты.тзКассовыеДокументы;
	Если Не тзКассовыеДокументы = Неопределено Тогда
		
		СтррВидыДокументовОснования = ОснованияДляДокументовОрдер();

		Для Каждого СтрокаТ Из тзКассовыеДокументы Цикл
			ОбъектДок = СтрокаТ.Документ;
			УстановитьДокументОснованияОрдеру(ОбъектДок, СтррВидыДокументовОснования, СтрокаТ);
			
			ДокументОснование = Неопределено;
			Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование) Тогда 
				ДокументОснование = ОбъектДок.ДокументОснование;
			КонецЕсли;
			
			Результат = ЗаписьДокумента(ОбъектДок, СтрокаТ.стррДокумент, СтрокаТ.ЭтоНовыйОбъект);
			Если Не Результат Тогда
				СообщитьОПропускеДокумента(СтрокаТ.стррДокумент);
			ИначеЕсли Результат И ПроводитьДокументыПриЗагрузке Тогда
				Попытка
					Если Не ДокументОснование = Неопределено Тогда 
						ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		тзКассовыеДокументы.Очистить();
		ЗагружаемыеОбъекты.тзКассовыеДокументы = тзКассовыеДокументы;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДокументОснованияОрдеру(ДокументОбъект, СтррВидыДокументовОснования, ДанныеОрдера)

	СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа[0];
	
	Для Каждого Элемент Из СтррВидыДокументовОснования Цикл
		СсылкаОснования = СсылкаИзДокумента(ДанныеОрдера.ИдОснования, Элемент.Значение);
		Если Не ЗначениеЗаполнено(СсылкаОснования) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ДокументОснование = СсылкаОснования;
		СтрокаПлатеж.Заказ = СсылкаОснования;
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			СтрокаПлатеж.ОснованиеПлатежа = СсылкаОснования;
			МассивДокументов = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
			МассивДокументов.Добавить(ДокументОбъект.ДокументОснование);
			Если ПоколениеКонфигурации("<УТ_11.3") Тогда
				ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(ДокументОбъект.СуммаДокумента,
						ДокументОбъект.Валюта, МассивДокументов, Ложь, Истина);
			Иначе
				ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
						ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа, Ложь);
			КонецЕсли;			
			ДокументОбъект.Основание = СокрЛП(СсылкаОснования);
		КонецЕсли;
		Прервать;
	КонецЦикла;

КонецПроцедуры

// Загрузка значений всех реквизитов обработки. Таблицы значений загружаются в реквизит "ВременныеТаблицы" (тип - Структура).
Процедура ЗагрузитьНастройкиДляРаботыОбмена()

	ОпределитьВерсиюКонфигурации();
	
	Имена = "";
	
	Для Каждого ЭлементМетаданных Из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Имя = ЭлементМетаданных.Имя;
		Если Имя <> "ВыбАгент" Тогда
			Имена = Имена + Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьЗначенияНастроекОбработки(Лев(Имена, СтрДлина(Имена)-1), Истина);
	
	гКэшЧтенияКонстант  		= Новый Структура;
	гКэшСравненияКонфигураций 	= Новый Соответствие;
	гКэшРеквизитыОбъектов 		= Новый Соответствие;
	гКэшСпискиОбъектов 			= Новый Соответствие;
	
	гОбновитьСпрХарактеристикиНоменклатурыСлужебный = Ложь;

КонецПроцедуры

Функция ХранитьСлужебныеДанныеВФайлах() // gi_170902 изменено с процедуры на функцию	
	
	Если гСлужебныеДанныеВФайлах = Неопределено Тогда	
		гСлужебныеДанныеВФайлах = Ложь; // хранение в Хранилище подтверждений для загруженных: документов, справочников, треков. 
	КонецЕсли;
	
	Возврат гСлужебныеДанныеВФайлах;
	
КонецФункции

Функция НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, ЭтоДополнительноеСведение, Подсказка)

	НовыйЭлемент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	НовыйЭлемент.ДополнительныеЗначенияИспользуются = Истина;
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
		НовыйЭлемент.Доступен = Ложь;
	КонецЕсли;
	НовыйЭлемент.Заголовок 		= ПредставлениеСвойства;
	НовыйЭлемент.Наименование 	= ИмяСвойства;
	НовыйЭлемент.ТипЗначения 	= ОписаниеТипа;
	НовыйЭлемент.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение;
	НовыйЭлемент.Подсказка 		= Подсказка;
	НовыйЭлемент.Записать();

	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции 

// Функция возвращает структуру, используемую для запоминания загруженных объектов
// (документов, элементов справочников) из XML-файла, полученного от МТ.
Функция ЗагруженныеОбъектыИзФайла() // gi_170902 переименовал из НовыйЗагруженныеОбъектыИзФайла

	стррРезультат = Новый Структура;
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор"); // gi_170830
	
	тзЗагруженныеДокументы = Новый ТаблицаЗначений;
	тзЗагруженныеДокументы.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);	// gi_170830 идентификатор документа
	тзЗагруженныеДокументы.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа в 1С
	тзЗагруженныеДокументы.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // gi_170830 // идентификатор (GUID) вида документа в МУ (на случай, если, например, Заказ в МУ загружался в 1С как РеализацияТоваровУслуг)
	стррРезультат.Вставить("тзЗагруженныеДокументы", 			тзЗагруженныеДокументы); // идентификаторы загруженных документов
	
	// sd_10082017 {
	тзЗагруженныеСправочники = Новый ТаблицаЗначений;
	тзЗагруженныеСправочники.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор);	// gi_170830 идентификатор элемента справочника
	тзЗагруженныеСправочники.Колонки.Добавить("ИдВидСправочникаМТ", ОписаниеТипаИдентификатор); // gi_170830 // идентификатор (GUID) вида справочника в МУ ? возможно не нужен
	стррРезультат.Вставить("тзЗагруженныеСправочники", 	тзЗагруженныеСправочники); // идентификаторы загруженных элементов справочников
	// } sd_10082017 
	
	тзКассовыеДокументы = Новый ТаблицаЗначений; // gi_170902 переименовал из ТаблицаКассовыхДокументов
	тзКассовыеДокументы.Колонки.Добавить("Документ");
	тзКассовыеДокументы.Колонки.Добавить("стррДокумент");
	тзКассовыеДокументы.Колонки.Добавить("ЭтоНовыйОбъект");
	тзКассовыеДокументы.Колонки.Добавить("ИдОснования");
	стррРезультат.Вставить("тзКассовыеДокументы", тзКассовыеДокументы);

	Возврат стррРезультат;
	
КонецФункции // ЗагруженныеОбъектыИзФайла()

Функция СсылкаИзДокумента(ИдДокумента, ВидДокумента)

	ДокМенеджер = Документы[ВидДокумента];	
	ОбъектДок = Неопределено;	
	
	Если Не ПустаяСтрока(ИдДокумента) Тогда
		Ссылка = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдДокумента));
		ОбъектДок = Ссылка.ПолучитьОбъект();
	КонецЕсли; 
	
	Возврат ?(ОбъектДок = Неопределено, ДокМенеджер.ПустаяСсылка(), Ссылка);
	
КонецФункции

Функция СсылкаИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	СпрМенеджер = Справочники[Спр];
	
	Если ИдЭлемента = Неопределено Или ЭтоПустойИдентификатор(ИдЭлемента) Тогда
		Возврат СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Неопределено;	

	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		Результат = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		Если Результат.ПолучитьОбъект() = Неопределено Тогда
			Если СоздаватьЭлемент Тогда // sd_10082017 
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				ЭлементОбъект.УстановитьСсылкуНового(Результат); 
				//ЭлементОбъект.апОбменДанными.Загрузка = Истина; // sd_10082017 свойства апОбменДанными не существует, скорее всего опечатка.
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда
					Текст = "Не удалось записать элемент справочника: " + Строка(ЭлементОбъект);
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", ЭлементОбъект, "ТекущийАгент");
					Возврат Результат;
				КонецЕсли;
				Результат = ЭлементОбъект.Ссылка;
			Иначе
				Результат = СпрМенеджер.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция записыввает и (если требуется в настройках) проводит документ.
// Возвращает Истина, если документ удалось записать, или Ложь в противном случае.
Функция ЗаписьДокумента(Док, стррДокумент, НовыйДок = Истина, ДобавлятьЗаписьВРегистр = Истина)
	
	МожноПроводить = Истина;
	МетаданныеДок = Док.Метаданные();
	РеквизитыДок = МетаданныеДок.Реквизиты;

	Если ПроводитьДокументыПриЗагрузке Тогда
		
		Если РеквизитыДок.Найти("Партнер") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Партнер) Тогда
				Текст = "В документе " + Строка(Док) + " не указан партнер. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДок.Найти("Контрагент") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				Текст = "В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДок.Найти("Соглашение") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Соглашение) И ИспользоватьСоглашения И Не ИспользоватьПунктыРазгрузки Тогда
				Текст = "В документе " + Строка(Док) + " не указано соглашение. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДок.Найти("Договор") <> Неопределено И ИспользоватьПунктыРазгрузки Тогда
			Если Не ЗначениеЗаполнено(Док.Договор) Тогда
				Текст = "В документе " + Строка(Док) + " не указан договор. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДок.Найти("СуммаДокумента") <> Неопределено Тогда
			Если Док.СуммаДокумента = 0 Тогда
				Текст = "Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		МожноПроводить = Ложь;
		
	КонецЕсли;

	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда
		Текст = "Не удалось записать документ " + Строка(Док) + " в базу!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьДополнительныеСвойстваДокумента(Док.Ссылка, стррДокумент);	

	Если МетаданныеДок.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить 
		И ПроводитьДокументыПриЗагрузке
		И МожноПроводить 
	Тогда
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда
			ОповеститьОСобытии("Не удалось провести документ: " + Строка(Док), "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
			Возврат Истина; // 
		КонецЕсли;
	КонецЕсли;
	
	Текст = ?(НовыйДок, "Создан", "Перезаписан") + " документ " + Строка(Док);
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Док.Ссылка);
	
	Возврат Истина;
	
КонецФункции

// sd_10082017
Функция ЗаписьСправочника(Спр, стррДопСвойств = Неопределено, НовыйСпр = Истина)
	
	Если Не ВыполнитьОперациюДляОбъекта(Спр, "запись") Тогда
		Текст = "Не удалось записать справочник " + Строка(Спр) + " в базу!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Спр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	Если стррДопСвойств <> Неопределено Тогда 
		тзРеквизиты = Новый ТаблицаЗначений;
		тзРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		тзРеквизиты.Колонки.Добавить("Значение");
		
		стзШирота = тзРеквизиты.Добавить();	
		стзШирота.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер());	
		стзШирота.Значение	= стррДопСвойств.Широта;
		стзДолгота = тзРеквизиты.Добавить();
		стзДолгота.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер());
		стзДолгота.Значение = стррДопСвойств.Долгота;

		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Спр.Ссылка, тзРеквизиты);
	КонецЕсли;
	
	Текст = ?(НовыйСпр, "Создан", "Перезаписан") + " справочник " + Строка(Спр);
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Спр.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации)
	
	Результат = Ложь;
	
	Попытка
		
		Если ВидОперации = "запись" Тогда
			
			Объект.Записать();
			
		ИначеЕсли ВидОперации = "проведение" Тогда
			
			Если Объект.ПометкаУдаления Тогда
				ОповеститьОСобытии("Документ помечен на удаление - проведение отменено!", "ОшибкаЗапись", Объект.Ссылка, "ТекущийАгент");
				Возврат Ложь;
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		ИначеЕсли ВидОперации = "создание" Тогда
			
			СтрОбъект = Строка(Объект);
			
			Если Лев(СтрОбъект, 10)     = "Справочник" Тогда
				Объект = Объект.СоздатьЭлемент();
			ИначеЕсли Лев(СтрОбъект, 8) = "Документ" Тогда
				Объект = Объект.СоздатьДокумент();
			ИначеЕсли Лев(СтрОбъект, 7) = "Регистр" Тогда
				Объект = Объект.СоздатьМенеджерЗаписи();
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	Исключение
		
		Текст = "Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """. Причина: " + ОписаниеОшибки();
		Ссылка = ?(ЕстьРеквизитОбъекта("Ссылка", Объект), Объект.Ссылка, Неопределено);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Ссылка, "ТекущийАгент");
		
		Если ВидОперации = "проведение" И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			// запись документа прошла успешно, возвращаем Истина, чтобы документ был зарегистрирован в журнале обмена
			Результат = Истина;
		КонецЕсли; 
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

Функция ОснованияДляДокументовОрдер()

	СписокОснованийДляОрдера = Новый СписокЗначений;
	СписокОснованийДляОрдера.Добавить("ЗаказКлиента");
	СписокОснованийДляОрдера.Добавить("РеализацияТоваровУслуг");
	СписокОснованийДляОрдера.Добавить("ВозвратТоваровОтКлиента");
	СписокОснованийДляОрдера.Добавить("ПоступлениеТоваровУслуг");

	Возврат СписокОснованийДляОрдера;
КонецФункции // ОснованияДляДокументовОрдер()

Функция ЭтоПустойИдентификатор(ИД)

	Возврат (ПустаяСтрока(ИД) Или СокрЛП(ИД) = "00000000-0000-0000-0000-000000000000");

КонецФункции

Функция КонстантыИзФайлаОбмена(ТекстXML, ИменаКонстант)

	стррРезультат = Новый Структура(ИменаКонстант);
	ствКонстанты = КонстантыМТПолучитьСоответствие();
	
	Пока ТекстXML.Прочитать() Цикл
		Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяКонстанты = ствКонстанты.Получить(НРег(ТекстXML.ЗначениеАтрибута("GUID")));
			Если ЗначениеЗаполнено(ИмяКонстанты) Тогда
				стррРезультат[ИмяКонстанты] = ТекстXML.ЗначениеАтрибута("Value");
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат стррРезультат;
	
КонецФункции 

Функция ТорговыйПредставительИзФайлаОбмена(Идентификатор)

	Если Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));		
	КонецЕсли;
	
КонецФункции

Функция НайтиФайлОбменаВКаталоге(Путь)

	Маска = "To*.zip";
	НайденныеФайлы = НайтиФайлы(Путь, Маска);
	ФайлАрхив = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлАрхив = НайденныеФайлы[0];
	КонецЕсли;

	Возврат ФайлАрхив;
	
КонецФункции 

Функция ФайлОбменаТрек(ПутьККаталогуФайла)

	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, "gps*.txt");
	Результат = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		Результат = НайденныеФайлы[0];
	КонецЕсли;

	Возврат Результат;
	
КонецФункции 

Функция ФайлОбменаРаспакованный(ПутьККаталогуФайла)

	Маска = "To*.xml";
	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, Маска);
	ФайлОбмена = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлОбмена = НайденныеФайлы[0];
	Иначе
		Текст = СтрШаблон_("Не найден файл в папке ""%1"" по маске ""%2"".", ПутьККаталогуФайла, Маска);
		ВызватьИсключение(Текст);
	КонецЕсли;

	Возврат ФайлОбмена;
	
КонецФункции 

Функция УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦеныДокумента) 
	
	ВидЦены = СсылкаИзСправочника(ИдВидЦены, "ВидыЦен");
	
	Если ВидЦены.Пустая() 
			И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.РазрешитьРедактироватьЦены.Значение
				И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспользоватьТипыЦенВТЧ.Значение Тогда 
		
		ВидЦены = ВидЦеныДокумента;
		
	КонецЕсли;
	
	Возврат ВидЦены;
	
КонецФункции

Функция УстановитьОбеспечениеЗаказа();
	
	Если РегистрОстатковТоваров = "СвободныеОстатки" Или ПоколениеКонфигурации("<=УТ_11.1.2") Тогда 
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
		
	Возврат ВариантОбеспечения;
	
КонецФункции

// ЗагрузкаДанных
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти

#Область УТАП_KT2000_Alcohol_Trade

Процедура ВыгрузитьКонтрагентов_УТАП(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты");
	
	РезультатВыборки = ДанныеПоКонтрагентамДляВыгрузки_УТАП(МенеджерВТ);
	Выборка = РезультатВыборки.Выбрать();
	
	стррПоля = Новый Структура("GUID,Name,A012,A013,A022,A023");
	
	Пока Выборка.Следующий() Цикл
		ВыборкаСсылка = Выборка.Ссылка;
		стррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		стррПоля.Name = Выборка.Наименование;
		стррПоля.A012 = СокрЛП(ВыборкаСсылка.НаименованиеПолное);
		ПредставлениеИННКПП = Выборка.ИНН + ?(ПустаяСтрока(Выборка.ИНН), "", "/") + Выборка.КПП;
		стррПоля.A013 = ПредставлениеИННКПП;
		стррПоля.A022 = Выборка.КодПоОКПО;
		стррПоля.A023 = Выборка.ДополнительнаяИнформация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьПунктыРазгрузки_УТАП(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки"); // в МТ этот справочник называется "ТорговыеТочки"

	стррПоля = Новый Структура("GUID,Name,A02,A07");	
	
	РезультатВыборки = ДанныеПоПунктамРазгрузокДляВыгрузки_УТАП(МенеджерВТ);
	Выборка = РезультатВыборки.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID 	= Выборка.Ссылка.УникальныйИдентификатор();
		стррПоля.Name 	= Выборка.Наименование;
		стррПоля.A02	= Выборка.Контрагент;
		стррПоля.A07	= Выборка.ДополнительнаяИнформация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию_УТАП_ПунктыРазгрузок(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация");

	ствТипыКИ = ТипыКонтактнойИнформации();
	стррПоля = Новый Структура("GUID,A01,A02,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамПунктовРазгрузокИКонтрагентов_УТАП(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		стррПоля.GUID = Новый УникальныйИдентификатор();
		стррПоля.A01 = Выборка.Контрагент;
		стррПоля.A02 = Выборка.ПунктРазгрузки;
		стррПоля.A04 = ствТипыКИ[Выборка.Тип];
		стррПоля.A05 = Выборка.Вид;
		стррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, стррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Функция ДанныеПоПунктамРазгрузокДляВыгрузки_УТАП(МенеджерВТ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПунктыРазгрузки.Ссылка,
	|	ПунктыРазгрузки.Наименование,
	|	ПунктыРазгрузки.Контрагент,
	|	ПунктыРазгрузки.КодОКАТО + ПунктыРазгрузки.КПП КАК ДополнительнаяИнформация
	|ИЗ
	|	(ВЫБРАТЬ
	|		алкПунктыРазгрузки.Ссылка КАК Ссылка,
	|		алкПунктыРазгрузки.Наименование КАК Наименование,
	|		алкПунктыРазгрузки.Владелец КАК Контрагент,
	|		ВЫБОР
	|			КОГДА алкПунктыРазгрузки.КодОКАТО <> """"
	|				ТОГДА ""КодОКАТО:"" + алкПунктыРазгрузки.КодОКАТО + ""/""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодОКАТО,
	|		ВЫБОР
	|			КОГДА алкПунктыРазгрузки.КПП <> """"
	|				ТОГДА ""КПП:"" + алкПунктыРазгрузки.КПП
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КПП
	|	ИЗ
	|		ВТ_Контрагенты КАК ВТ_Контрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
	|			ПО ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец
	|	ГДЕ
	|		НЕ алкПунктыРазгрузки.ПометкаУдаления) КАК ПунктыРазгрузки";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтрагентамДляВыгрузки_УТАП(МенеджерВТ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка,
	|	Контрагенты.Наименование,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.КодПоОКПО,
	|	Контрагенты.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_Контрагенты.Ссылка = Контрагенты.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактамПунктовРазгрузокИКонтрагентов_УТАП(МенеджерВТ)
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Ссылка КАК ПунктРазгрузки,
	|	NULL КАК Контрагент,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Тип,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Вид,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КИПартнеров
	|ИЗ
	|	Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО алкПунктыРазгрузки.Владелец = ВТ_Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки.КонтактнаяИнформация КАК алкПунктыРазгрузкиКонтактнаяИнформация
	|		ПО алкПунктыРазгрузки.Ссылка = алкПунктыРазгрузкиКонтактнаяИнформация.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	КонтрагентыКонтактнаяИнформация.Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = ВТ_Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КИПартнеров.ПунктРазгрузки, """") КАК ПунктРазгрузки,
	|	ЕСТЬNULL(КИПартнеров.Контрагент, """") КАК Контрагент,
	|	КИПартнеров.Тип,
	|	КИПартнеров.Вид,
	|	КИПартнеров.Представление
	|ИЗ
	|	КИПартнеров КАК КИПартнеров";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();

КонецФункции

// УТАП_KT2000_Alcohol_Trade
#КонецОбласти